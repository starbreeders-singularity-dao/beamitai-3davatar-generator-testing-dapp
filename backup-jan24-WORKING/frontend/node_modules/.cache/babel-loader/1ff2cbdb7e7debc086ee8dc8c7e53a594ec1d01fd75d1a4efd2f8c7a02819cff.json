{"ast":null,"code":"import { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { TransactionMissingReceiptOrBlockHashError, TransactionReceiptMissingBlockNumberError } from 'web3-errors';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_polling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\nexport function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat, customTransactionReceiptSchema) {\n  if (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash)) throw new TransactionMissingReceiptOrBlockHashError({\n    receipt: transactionReceipt,\n    blockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n    transactionHash: format({\n      format: 'bytes32'\n    }, transactionHash, returnFormat)\n  });\n  if (!transactionReceipt.blockNumber) throw new TransactionReceiptMissingBlockNumberError({\n    receipt: transactionReceipt\n  });\n  // As we have the receipt, it's the first confirmation that tx is accepted.\n  transactionPromiEvent.emit('confirmation', {\n    confirmations: format({\n      format: 'uint'\n    }, 1, returnFormat),\n    receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),\n    latestBlockHash: format({\n      format: 'bytes32'\n    }, transactionReceipt.blockHash, returnFormat)\n  });\n  // so a subscription for newBlockHeaders can be made instead of polling\n  const provider = web3Context.requestManager.provider;\n  if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n    watchTransactionBySubscription({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      customTransactionReceiptSchema,\n      returnFormat\n    });\n  } else {\n    watchTransactionByPolling({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      customTransactionReceiptSchema,\n      returnFormat\n    });\n  }\n}\n//# sourceMappingURL=watch_transaction_for_confirmations.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}