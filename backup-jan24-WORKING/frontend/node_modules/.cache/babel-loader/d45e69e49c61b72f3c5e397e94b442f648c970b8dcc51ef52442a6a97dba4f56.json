{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ResponseError } from 'web3-errors';\nimport { Transport, Network } from './types.js';\nimport { Web3ExternalProvider } from './web3_provider.js';\nimport { QuickNodeRateLimitError } from './errors.js';\nconst isValid = str => str !== undefined && str.trim().length > 0;\nexport class QuickNodeProvider extends Web3ExternalProvider {\n  // eslint-disable-next-line default-param-last\n  constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, token = '', host = '', providerConfigOptions) {\n    super(network, transport, token, host, providerConfigOptions);\n  }\n  request(payload, requestOptions) {\n    const _super = Object.create(null, {\n      request: {\n        get: () => super.request\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _super.request.call(this, payload, requestOptions);\n      } catch (error) {\n        if (error instanceof ResponseError && error.statusCode === 429) {\n          throw new QuickNodeRateLimitError(error);\n        }\n        throw error;\n      }\n    });\n  }\n  // eslint-disable-next-line class-methods-use-this\n  getRPCURL(network, transport, _token, _host) {\n    let host = '';\n    let token = '';\n    switch (network) {\n      case Network.ETH_MAINNET:\n        host = isValid(_host) ? _host : 'powerful-holy-bush.quiknode.pro';\n        token = isValid(_token) ? _token : '3240624a343867035925ff7561eb60dfdba2a668';\n        break;\n      case Network.ETH_SEPOLIA:\n        host = isValid(_host) ? _host : 'dimensional-fabled-glitter.ethereum-sepolia.quiknode.pro';\n        token = isValid(_token) ? _token : '382a3b5a4b938f2d6e8686c19af4b22921fde2cd';\n        break;\n      case Network.ETH_HOLESKY:\n        host = isValid(_host) ? _host : 'yolo-morning-card.ethereum-holesky.quiknode.pro';\n        token = isValid(_token) ? _token : '481ebe70638c4dcf176af617a16d02ab866b9af9';\n        break;\n      case Network.ARBITRUM_MAINNET:\n        host = isValid(_host) ? _host : 'autumn-divine-dinghy.arbitrum-mainnet.quiknode.pro';\n        token = isValid(_token) ? _token : 'a5d7bfbf60b5ae9ce3628e53d69ef50d529e9a8c';\n        break;\n      case Network.ARBITRUM_SEPOLIA:\n        host = isValid(_host) ? _host : 'few-patient-pond.arbitrum-sepolia.quiknode.pro';\n        token = isValid(_token) ? _token : '3be985450970628c860b959c65cd2642dcafe53c';\n        break;\n      case Network.BNB_MAINNET:\n        host = isValid(_host) ? _host : 'purple-empty-reel.bsc.quiknode.pro';\n        token = isValid(_token) ? _token : 'ebf6c532961e21f092ff2facce1ec4c89c540158';\n        break;\n      case Network.BNB_TESTNET:\n        host = isValid(_host) ? _host : 'floral-rough-scion.bsc-testnet.quiknode.pro';\n        token = isValid(_token) ? _token : '5b297e5acff5f81f4c37ebf6f235f7299b6f9d28';\n        break;\n      case Network.POLYGON_MAINNET:\n        host = isValid(_host) ? _host : 'small-chaotic-moon.matic.quiknode.pro';\n        token = isValid(_token) ? _token : '847569f8a017e84d985e10d0f44365d965a951f1';\n        break;\n      case Network.POLYGON_AMOY:\n        host = isValid(_host) ? _host : 'prettiest-side-shape.matic-amoy.quiknode.pro';\n        token = isValid(_token) ? _token : '79a9476eea661d4f82de614db1d8a895b14b881c';\n        break;\n      default:\n        throw new Error('Network info not avalible.');\n    }\n    return `${transport}://${host}/${token}`;\n  }\n}\n//# sourceMappingURL=web3_provider_quicknode.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}