{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3SubscriptionManager } from 'web3-core';\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\n/**\n * Similar to `Web3SubscriptionManager` but has a reference to the Contract that uses\n */\nexport class ContractSubscriptionManager extends Web3SubscriptionManager {\n  /**\n   *\n   * @param - Web3SubscriptionManager\n   * @param - parentContract\n   *\n   * @example\n   * ```ts\n   * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n   * const contract = new Contract(...)\n   * const subscriptionManager = new Web3SubscriptionManager(requestManager, {}, contract);\n   * ```\n   */\n  constructor(self, parentContract) {\n    super(self.requestManager, self.registeredSubscriptions);\n    this.parentContract = parentContract;\n  }\n  /**\n   * Will create a new subscription\n   *\n   * @param name - The subscription you want to subscribe to\n   * @param args - Optional additional parameters, depending on the subscription type\n   * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   *\n   * Will subscribe to a specific topic (note: name)\n   * @returns The subscription object\n   */\n  subscribe(name_1, args_1) {\n    const _super = Object.create(null, {\n      subscribe: {\n        get: () => super.subscribe\n      }\n    });\n    return __awaiter(this, arguments, void 0, function* (name, args, returnFormat = DEFAULT_RETURN_FORMAT) {\n      return _super.subscribe.call(this, name, args !== null && args !== void 0 ? args : this.parentContract.options, returnFormat);\n    });\n  }\n}\n//# sourceMappingURL=contract-subscription-manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}