{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format } from 'web3-utils';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { watchTransactionByPolling } from './watch_transaction_by_polling.js';\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nexport const watchTransactionBySubscription = ({\n  web3Context,\n  transactionReceipt,\n  transactionPromiEvent,\n  customTransactionReceiptSchema,\n  returnFormat\n}) => {\n  // The following variable will stay true except if the data arrived,\n  //\tor if watching started after an error had occurred.\n  let needToWatchLater = true;\n  let lastCaughtBlockHash;\n  setImmediate(() => {\n    var _a;\n    (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then(subscription => {\n      subscription.on('data', newBlockHeader => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        needToWatchLater = false;\n        if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||\n        // For some cases, the on-data event is fired couple times for the same block!\n        // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n        lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {\n          return;\n        }\n        lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;\n        const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: format({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: format({\n            format: 'bytes32'\n          }, newBlockHeader.parentHash, returnFormat)\n        });\n        if (confirmations >= web3Context.transactionConfirmationBlocks) {\n          yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);\n        }\n      }));\n      subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);\n        needToWatchLater = false;\n        watchTransactionByPolling({\n          web3Context,\n          transactionReceipt,\n          transactionPromiEvent,\n          customTransactionReceiptSchema,\n          returnFormat\n        });\n      }));\n    }).catch(() => {\n      needToWatchLater = false;\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        customTransactionReceiptSchema,\n        transactionPromiEvent,\n        returnFormat\n      });\n    });\n  });\n  // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n  setTimeout(() => {\n    if (needToWatchLater) {\n      watchTransactionByPolling({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    }\n  }, web3Context.blockHeaderTimeout * 1000);\n};\n//# sourceMappingURL=watch_transaction_by_subscription.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}