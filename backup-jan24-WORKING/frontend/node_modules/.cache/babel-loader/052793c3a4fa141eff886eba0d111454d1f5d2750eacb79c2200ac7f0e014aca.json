{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport { create, decrypt, encrypt, hashMessage, privateKeyToAccount, recover, recoverTransaction, signTransaction, sign, Wallet, privateKeyToAddress, parseAndValidatePrivateKey, privateKeyToPublicKey } from 'web3-eth-accounts';\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = context => {\n  const signTransactionWithContext = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const tx = yield prepareTransactionForSigning(transaction, context);\n    const privateKeyBytes = format({\n      format: 'bytes'\n    }, privateKey, ETH_DATA_FORMAT);\n    return signTransaction(tx, privateKeyBytes);\n  });\n  const privateKeyToAccountWithContext = privateKey => {\n    const account = privateKeyToAccount(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const decryptWithContext = (keystore, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const account = yield decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  });\n  const createWithContext = () => {\n    const account = create();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const wallet = new Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction,\n    hashMessage,\n    sign,\n    recover,\n    encrypt,\n    wallet,\n    privateKeyToAddress,\n    parseAndValidatePrivateKey,\n    privateKeyToPublicKey\n  };\n};\n//# sourceMappingURL=accounts.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}