{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport { ensureIfUint8Array, uint8ArrayToHexString } from '../utils.js';\nimport { isHexStrict } from './string.js';\nimport { isUint8Array } from './bytes.js';\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n */\nexport const checkAddressCheckSum = data => {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(data)) return false;\n  const address = data.slice(2);\n  const updatedData = utf8ToBytes(address.toLowerCase());\n  const addressHash = uint8ArrayToHexString(keccak256(ensureIfUint8Array(updatedData))).slice(2);\n  for (let i = 0; i < 40; i += 1) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n */\nexport const isAddress = (value, checkChecksum = true) => {\n  if (typeof value !== 'string' && !isUint8Array(value)) {\n    return false;\n  }\n  let valueToCheck;\n  if (isUint8Array(value)) {\n    valueToCheck = uint8ArrayToHexString(value);\n  } else if (typeof value === 'string' && !isHexStrict(value)) {\n    valueToCheck = value.toLowerCase().startsWith('0x') ? value : `0x${value}`;\n  } else {\n    valueToCheck = value;\n  }\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {\n    return false;\n  }\n  // If it's ALL lowercase or ALL upppercase\n  if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {\n    return true;\n    // Otherwise check each case\n  }\n  return checkChecksum ? checkAddressCheckSum(valueToCheck) : true;\n};\n//# sourceMappingURL=address.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}