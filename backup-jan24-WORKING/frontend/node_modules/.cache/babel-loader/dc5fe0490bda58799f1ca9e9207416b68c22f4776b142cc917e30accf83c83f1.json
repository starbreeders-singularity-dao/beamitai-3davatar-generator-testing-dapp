{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport { ERR_RPC_INTERNAL_ERROR, ERR_RPC_INVALID_INPUT, ERR_RPC_INVALID_JSON, ERR_RPC_INVALID_METHOD, ERR_RPC_INVALID_PARAMS, ERR_RPC_INVALID_REQUEST, ERR_RPC_LIMIT_EXCEEDED, ERR_RPC_MISSING_RESOURCE, ERR_RPC_NOT_SUPPORTED, ERR_RPC_TRANSACTION_REJECTED, ERR_RPC_UNAVAILABLE_RESOURCE, ERR_RPC_UNSUPPORTED_METHOD } from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\nexport class RpcError extends BaseWeb3Error {\n  constructor(rpcError, message) {\n    super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()));\n    this.code = rpcError.error.code;\n    this.id = rpcError.id;\n    this.jsonrpc = rpcError.jsonrpc;\n    this.jsonRpcError = rpcError.error;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      error: this.jsonRpcError,\n      id: this.id,\n      jsonRpc: this.jsonrpc\n    });\n  }\n}\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n  constructor(code, data) {\n    var _a, _b, _c, _d;\n    if (!code) {\n      // this case should ideally not happen\n      super();\n    } else if ((_a = RpcErrorMessages[code]) === null || _a === void 0 ? void 0 : _a.message) {\n      super(RpcErrorMessages[code].message);\n    } else {\n      // Retrieve the status code object for the given code from the table, by searching through the appropriate range\n      const statusCodeRange = Object.keys(RpcErrorMessages).find(statusCode => typeof statusCode === 'string' && code >= parseInt(statusCode.split('-')[0], 10) && code <= parseInt(statusCode.split('-')[1], 10));\n      super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : '']) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace('*code*', (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '\"\"'));\n    }\n    this.code = code;\n    this.data = data;\n  }\n}\nexport class ParseError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n    this.code = ERR_RPC_INVALID_JSON;\n  }\n}\nexport class InvalidRequestError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n    this.code = ERR_RPC_INVALID_REQUEST;\n  }\n}\nexport class MethodNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n    this.code = ERR_RPC_INVALID_METHOD;\n  }\n}\nexport class InvalidParamsError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n    this.code = ERR_RPC_INVALID_PARAMS;\n  }\n}\nexport class InternalError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n    this.code = ERR_RPC_INTERNAL_ERROR;\n  }\n}\nexport class InvalidInputError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n    this.code = ERR_RPC_INVALID_INPUT;\n  }\n}\nexport class MethodNotSupported extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n    this.code = ERR_RPC_UNSUPPORTED_METHOD;\n  }\n}\nexport class ResourceUnavailableError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n    this.code = ERR_RPC_UNAVAILABLE_RESOURCE;\n  }\n}\nexport class ResourcesNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n    this.code = ERR_RPC_MISSING_RESOURCE;\n  }\n}\nexport class VersionNotSupportedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n    this.code = ERR_RPC_NOT_SUPPORTED;\n  }\n}\nexport class TransactionRejectedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n    this.code = ERR_RPC_TRANSACTION_REJECTED;\n  }\n}\nexport class LimitExceededError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n    this.code = ERR_RPC_LIMIT_EXCEEDED;\n  }\n}\nexport const rpcErrorsMap = new Map();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, {\n  error: ParseError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n  error: InvalidRequestError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n  error: MethodNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, {\n  error: InvalidParamsError\n});\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, {\n  error: InternalError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, {\n  error: InvalidInputError\n});\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n  error: MethodNotSupported\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n  error: ResourceUnavailableError\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n  error: TransactionRejectedError\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n  error: ResourcesNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n  error: VersionNotSupportedError\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, {\n  error: LimitExceededError\n});\n//# sourceMappingURL=rpc_errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}