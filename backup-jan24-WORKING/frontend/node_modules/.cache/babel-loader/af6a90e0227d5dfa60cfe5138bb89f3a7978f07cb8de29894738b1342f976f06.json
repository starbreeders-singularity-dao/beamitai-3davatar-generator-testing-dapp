{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3ContractError } from 'web3-errors';\nimport { sendTransaction } from 'web3-eth';\nimport { decodeFunctionCall } from 'web3-eth-abi';\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { encodeMethodABI } from './encoding.js';\nimport { getSendTxParams } from './utils.js';\n/*\n * This class is only supposed to be used for the return of `new Contract(...).deploy(...)` method.\n */\nexport class DeployerMethodClass {\n  _contractMethodDeploySend(tx) {\n    // eslint-disable-next-line no-use-before-define\n    const returnTxOptions = {\n      transactionResolver: receipt => {\n        if (receipt.status === BigInt(0)) {\n          throw new Web3ContractError(\"code couldn't be stored\", receipt);\n        }\n        const newContract = this.parent.clone();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        newContract.options.address = receipt.contractAddress;\n        return newContract;\n      },\n      contractAbi: this.parent.options.jsonInterface,\n      // TODO Should make this configurable by the user\n      checkRevertBeforeSending: false\n    };\n    return isNullish(this.parent.getTransactionMiddleware()) ? sendTransaction(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions) // not calling this with undefined Middleware because it will not break if Eth package is not updated\n    : sendTransaction(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions, this.parent.getTransactionMiddleware());\n  }\n  constructor(\n  // eslint-disable-next-line no-use-before-define\n  parent, deployOptions) {\n    this.parent = parent;\n    this.deployOptions = deployOptions;\n    const {\n      args,\n      abi,\n      contractOptions,\n      deployData\n    } = this.calculateDeployParams();\n    this.args = args;\n    this.constructorAbi = abi;\n    this.contractOptions = contractOptions;\n    this.deployData = deployData;\n  }\n  send(options) {\n    const modifiedOptions = Object.assign({}, options);\n    const tx = this.populateTransaction(modifiedOptions);\n    return this._contractMethodDeploySend(tx);\n  }\n  populateTransaction(txOptions) {\n    var _a, _b;\n    const modifiedContractOptions = Object.assign(Object.assign({}, this.contractOptions), {\n      from: (_b = (_a = this.contractOptions.from) !== null && _a !== void 0 ? _a : this.parent.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n    });\n    // args, abi, contractOptions, deployData\n    const tx = getSendTxParams({\n      abi: this.constructorAbi,\n      params: this.args,\n      options: Object.assign(Object.assign({}, txOptions), {\n        dataInputFill: this.parent.contractDataInputFill\n      }),\n      contractOptions: modifiedContractOptions\n    });\n    // @ts-expect-error remove unnecessary field\n    if (tx.dataInputFill) {\n      // @ts-expect-error remove unnecessary field\n      delete tx.dataInputFill;\n    }\n    return tx;\n  }\n  calculateDeployParams() {\n    var _a, _b, _c, _d, _e, _f;\n    let abi = this.parent.options.jsonInterface.find(j => j.type === 'constructor');\n    if (!abi) {\n      abi = {\n        type: 'constructor',\n        stateMutability: ''\n      };\n    }\n    const _input = format({\n      format: 'bytes'\n    }, (_b = (_a = this.deployOptions) === null || _a === void 0 ? void 0 : _a.input) !== null && _b !== void 0 ? _b : this.parent.options.input, DEFAULT_RETURN_FORMAT);\n    const _data = format({\n      format: 'bytes'\n    }, (_d = (_c = this.deployOptions) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : this.parent.options.data, DEFAULT_RETURN_FORMAT);\n    if ((!_input || _input.trim() === '0x') && (!_data || _data.trim() === '0x')) {\n      throw new Web3ContractError('contract creation without any data provided.');\n    }\n    const args = (_f = (_e = this.deployOptions) === null || _e === void 0 ? void 0 : _e.arguments) !== null && _f !== void 0 ? _f : [];\n    const contractOptions = Object.assign(Object.assign({}, this.parent.options), {\n      input: _input,\n      data: _data\n    });\n    const deployData = _input !== null && _input !== void 0 ? _input : _data;\n    return {\n      args,\n      abi,\n      contractOptions,\n      deployData\n    };\n  }\n  estimateGas(options_1) {\n    return __awaiter(this, arguments, void 0, function* (options, returnFormat = this.parent.defaultReturnFormat) {\n      const modifiedOptions = Object.assign({}, options);\n      return this.parent.contractMethodEstimateGas({\n        abi: this.constructorAbi,\n        params: this.args,\n        returnFormat,\n        options: modifiedOptions,\n        contractOptions: this.contractOptions\n      });\n    });\n  }\n  encodeABI() {\n    return encodeMethodABI(this.constructorAbi, this.args, format({\n      format: 'bytes'\n    }, this.deployData, this.parent.defaultReturnFormat));\n  }\n  decodeData(data) {\n    return Object.assign(Object.assign({}, decodeFunctionCall(this.constructorAbi, data.replace(this.deployData, ''), false)), {\n      __method__: this.constructorAbi.type\n    });\n  }\n}\n//# sourceMappingURL=contract-deployer-method-class.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}