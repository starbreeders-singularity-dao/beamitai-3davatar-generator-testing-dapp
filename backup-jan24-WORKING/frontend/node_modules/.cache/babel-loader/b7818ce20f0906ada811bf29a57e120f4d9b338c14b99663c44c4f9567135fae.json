{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError, InvalidBooleanError } from 'web3-errors';\nimport { toBool } from 'web3-utils';\nimport { WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\nexport function encodeBoolean(param, input) {\n  let value;\n  try {\n    value = toBool(input);\n  } catch (e) {\n    if (e instanceof InvalidBooleanError) {\n      throw new AbiError('provided input is not valid boolean value', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n  }\n  return encodeNumber({\n    type: 'uint8',\n    name: ''\n  }, Number(value));\n}\nexport function decodeBool(_param, bytes) {\n  const numberResult = decodeNumber({\n    type: 'uint8',\n    name: ''\n  }, bytes);\n  if (numberResult.result > 1 || numberResult.result < 0) {\n    throw new AbiError('Invalid boolean value encoded', {\n      boolBytes: bytes.subarray(0, WORD_SIZE),\n      numberResult\n    });\n  }\n  return {\n    result: numberResult.result === BigInt(1),\n    encoded: numberResult.encoded,\n    consumed: WORD_SIZE\n  };\n}\n//# sourceMappingURL=bool.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}