{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context_1, address_1, storageSlot_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n    var _a;\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    if (!isNullish(res)) {\n      const result = Object.assign(Object.assign({}, res), {\n        transactions: (_a = res.transactions) !== null && _a !== void 0 ? _a : []\n      });\n      return result;\n    }\n    return res;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, returnFormat) {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context_1, transactionHash_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    let response;\n    try {\n      response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    } catch (error) {\n      // geth indexing error, we poll until transactions stopped indexing\n      if (typeof error === 'object' && !isNullish(error) && 'message' in error && error.message === 'transaction indexing is in progress') {\n        console.warn('Transaction indexing is in progress.');\n      } else {\n        throw error;\n      }\n    }\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context_1, address_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transactionObj, returnFormat, options = {\n  checkRevertBeforeSending: true\n}, transactionMiddleware) {\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transaction = Object.assign({}, transactionObj);\n        if (!isNullish(transactionMiddleware)) {\n          transaction = yield transactionMiddleware.processTransaction(transaction);\n        }\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT, {\n          transactionSchema: web3Context.config.customTransactionSchema\n        });\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = {\n  checkRevertBeforeSending: true\n}) {\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context_1, message_1, addressOrIndex_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {\n    var _a;\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        transactionSchema: web3Context.config.customTransactionSchema,\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    });\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context_1, address_1, storageKeys_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context_1, blockCount_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context_1, transaction_1) {\n  return __awaiter(this, arguments, void 0, function* (web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n//# sourceMappingURL=rpc_method_wrappers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}