{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isNullish } from 'web3-validator';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n// check if code is a valid rpc server error code\nexport const isResponseRpcError = rpcError => {\n  const errorCode = rpcError.error.code;\n  return rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32000;\n};\nexport const isResponseWithResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' &&\n// JSON RPC consider \"null\" as valid response\n'result' in response && isNullish(response.error) && (typeof response.id === 'number' || typeof response.id === 'string');\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport const isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && isNullish(response.result) &&\n// JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\nexport const isResponseWithNotification = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && !isNullish(response.params) && !isNullish(response.method);\nexport const isSubscriptionResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && 'id' in response &&\n// JSON RPC consider \"null\" as valid response\n'result' in response;\nexport const validateResponse = response => isResponseWithResult(response) || isResponseWithError(response);\nexport const isValidResponse = response => Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);\nexport const isBatchResponse = response => Array.isArray(response) && response.length > 0 && isValidResponse(response);\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed;\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number starting from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport const setRequestIdStart = start => {\n  requestIdSeed = start;\n};\nexport const toPayload = request => {\n  var _a, _b, _c, _d;\n  if (typeof requestIdSeed !== 'undefined') {\n    requestIdSeed += 1;\n  }\n  return {\n    jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',\n    id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),\n    method: request.method,\n    params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined\n  };\n};\nexport const toBatchPayload = requests => requests.map(request => toPayload(request));\nexport const isBatchRequest = request => Array.isArray(request) && request.length > 0;\n//# sourceMappingURL=json_rpc.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}