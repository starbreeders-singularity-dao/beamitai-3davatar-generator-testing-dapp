{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { uint8ArrayConcat } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { decodeParamFromAbiParameter, encodeParamFromAbiParameter } from './index.js';\nimport { encodeDynamicParams } from './utils.js';\nimport { isDynamic } from '../utils.js';\nimport { decodeNumber } from './number.js';\nexport function encodeTuple(param, input) {\n  var _a, _b, _c;\n  let dynamic = false;\n  if (!Array.isArray(input) && typeof input !== 'object') {\n    throw new AbiError('param must be either Array or Object', {\n      param,\n      input\n    });\n  }\n  const narrowedInput = input;\n  const encoded = [];\n  for (let i = 0; i < ((_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i += 1) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const paramComponent = param.components[i];\n    let result;\n    if (Array.isArray(narrowedInput)) {\n      if (i >= narrowedInput.length) {\n        throw new AbiError('input param length missmatch', {\n          param,\n          input\n        });\n      }\n      result = encodeParamFromAbiParameter(paramComponent, narrowedInput[i]);\n    } else {\n      const paramInput = narrowedInput[(_c = paramComponent.name) !== null && _c !== void 0 ? _c : ''];\n      // eslint-disable-next-line no-null/no-null\n      if (paramInput === undefined || paramInput === null) {\n        throw new AbiError('missing input defined in abi', {\n          param,\n          input,\n          paramName: paramComponent.name\n        });\n      }\n      result = encodeParamFromAbiParameter(paramComponent, paramInput);\n    }\n    if (result.dynamic) {\n      dynamic = true;\n    }\n    encoded.push(result);\n  }\n  if (dynamic) {\n    return {\n      dynamic: true,\n      encoded: encodeDynamicParams(encoded)\n    };\n  }\n  return {\n    dynamic: false,\n    encoded: uint8ArrayConcat(...encoded.map(e => e.encoded))\n  };\n}\nexport function decodeTuple(param, bytes) {\n  const result = {\n    __length__: 0\n  };\n  // tracks how much static params consumed bytes\n  let consumed = 0;\n  if (!param.components) {\n    return {\n      result,\n      encoded: bytes,\n      consumed\n    };\n  }\n  // track how much dynamic params consumed bytes\n  let dynamicConsumed = 0;\n  for (const [index, childParam] of param.components.entries()) {\n    let decodedResult;\n    if (isDynamic(childParam)) {\n      // if dynamic, we will have offset encoded\n      const offsetResult = decodeNumber({\n        type: 'uint32',\n        name: ''\n      }, bytes.subarray(consumed));\n      // offset counts from start of original byte sequence\n      decodedResult = decodeParamFromAbiParameter(childParam, bytes.subarray(Number(offsetResult.result)));\n      consumed += offsetResult.consumed;\n      dynamicConsumed += decodedResult.consumed;\n    } else {\n      // static param, just decode\n      decodedResult = decodeParamFromAbiParameter(childParam, bytes.subarray(consumed));\n      consumed += decodedResult.consumed;\n    }\n    result.__length__ += 1;\n    result[index] = decodedResult.result;\n    if (childParam.name && childParam.name !== '') {\n      result[childParam.name] = decodedResult.result;\n    }\n  }\n  return {\n    encoded: bytes.subarray(consumed + dynamicConsumed),\n    result,\n    consumed: consumed + dynamicConsumed\n  };\n}\n//# sourceMappingURL=tuple.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}