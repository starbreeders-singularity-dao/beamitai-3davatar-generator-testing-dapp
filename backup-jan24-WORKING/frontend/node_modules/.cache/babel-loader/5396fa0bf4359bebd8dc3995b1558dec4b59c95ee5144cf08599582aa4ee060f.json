{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png'; // Import the logo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [dots, setDots] = useState('');\n\n  // Fetch images from the backend using the environment variable\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const images = await fetchLocalImages(); // Fetch from the backend\n        console.log('Fetched images:', images); // Log the fetched images to debug\n        setLocalImages(images); // Set the images into state\n      } catch (error) {\n        console.error('Error fetching local images:', error);\n      }\n    };\n    fetchImages(); // Fetch images on component mount\n  }, []);\n  useEffect(() => {\n    if (loading) {\n      const interval = setInterval(() => {\n        setDots(prevDots => prevDots.length < 3 ? prevDots + '.' : '');\n      }, 500); // Change dots every 500ms\n      return () => clearInterval(interval); // Cleanup on component unmount\n    } else {\n      setDots(''); // Reset dots when not loading\n    }\n  }, [loading]);\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', {\n        type: blob.type\n      });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([`${data.imagePath}`]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n  const handleBack = () => {\n    setSelectedNFT(null);\n    setGeneratedImages([]);\n    setUploadStatus(null);\n    setLoading(false);\n    setDots('');\n  };\n\n  // Forward button handler (jump to generated image)\n  const handleForward = () => {\n    if (generatedImages.length) {\n      document.getElementById('generated-image-section').scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"2D to 3D - Beam your Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(AvatarSelection, {\n          selectedNFT: selectedNFT,\n          handleGenerateImages: handleGenerateImages,\n          loading: loading,\n          dots: dots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n          generatedImages: generatedImages,\n          localImages: localImages,\n          handleCreateAvatar: handleCreateAvatar,\n          handleBeamit: handleBeamit,\n          handleBack: handleBack,\n          uploadStatus: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MEMcttRQiQAejJWeaeA3L0qFKgA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","AvatarSelection","ImageGallery","fetchLocalImages","generateImages","uploadImageToCloud","logo","jsxDEV","_jsxDEV","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","generatedImages","setGeneratedImages","localImages","setLocalImages","loading","setLoading","pfpFile","setPfpFile","uploadStatus","setUploadStatus","dots","setDots","fetchImages","images","error","interval","setInterval","prevDots","length","clearInterval","handleCreateAvatar","imageUrl","res","fetch","blob","file","File","type","handleGenerateImages","alert","data","imagePath","message","handleBeamit","fullBodyImage","split","pop","handleBack","handleForward","document","getElementById","scrollIntoView","behavior","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","style","display","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png'; // Import the logo\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [dots, setDots] = useState('');\n\n  // Fetch images from the backend using the environment variable\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const images = await fetchLocalImages(); // Fetch from the backend\n        console.log('Fetched images:', images); // Log the fetched images to debug\n        setLocalImages(images); // Set the images into state\n      } catch (error) {\n        console.error('Error fetching local images:', error);\n      }\n    };\n  \n    fetchImages(); // Fetch images on component mount\n  }, []);\n  \n\n  useEffect(() => {\n    if (loading) {\n      const interval = setInterval(() => {\n        setDots((prevDots) => (prevDots.length < 3 ? prevDots + '.' : ''));\n      }, 500); // Change dots every 500ms\n      return () => clearInterval(interval); // Cleanup on component unmount\n    } else {\n      setDots(''); // Reset dots when not loading\n    }\n  }, [loading]);\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', { type: blob.type });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([`${data.imagePath}`]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedNFT(null);\n    setGeneratedImages([]);\n    setUploadStatus(null);\n    setLoading(false);\n    setDots('');\n  };\n\n  // Forward button handler (jump to generated image)\n  const handleForward = () => {\n    if (generatedImages.length) {\n      document.getElementById('generated-image-section').scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" className=\"App-logo\" />\n        <h1>2D to 3D - Beam your Avatar</h1>\n      </header>\n\n      <div className=\"App-content\">\n        <div style={{ display: 'flex' }}>\n          <AvatarSelection\n            selectedNFT={selectedNFT}\n            handleGenerateImages={handleGenerateImages}\n            loading={loading}\n            dots={dots}\n          />\n          <ImageGallery\n            generatedImages={generatedImages}\n            localImages={localImages}\n            handleCreateAvatar={handleCreateAvatar}\n            handleBeamit={handleBeamit}\n            handleBack={handleBack}\n            uploadStatus={uploadStatus}\n          />\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}