{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_CONTRACT, ERR_CONTRACT_ABI_MISSING, ERR_CONTRACT_EXECUTION_REVERTED, ERR_CONTRACT_EVENT_NOT_EXISTS, ERR_CONTRACT_INSTANTIATION, ERR_CONTRACT_MISSING_ADDRESS, ERR_CONTRACT_MISSING_DEPLOY_DATA, ERR_CONTRACT_MISSING_FROM_ADDRESS, ERR_CONTRACT_REQUIRED_CALLBACK, ERR_CONTRACT_RESERVED_EVENT, ERR_CONTRACT_RESOLVER_MISSING, ERR_CONTRACT_TX_DATA_AND_INPUT } from '../error_codes.js';\nimport { BaseWeb3Error, InvalidValueError } from '../web3_error_base.js';\nexport class Web3ContractError extends BaseWeb3Error {\n  constructor(message, receipt) {\n    super(message);\n    this.code = ERR_CONTRACT;\n    this.receipt = receipt;\n  }\n}\nexport class ResolverMethodMissingError extends BaseWeb3Error {\n  constructor(address, name) {\n    super(`The resolver at ${address} does not implement requested method: \"${name}\".`);\n    this.address = address;\n    this.name = name;\n    this.code = ERR_CONTRACT_RESOLVER_MISSING;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      address: this.address,\n      name: this.name\n    });\n  }\n}\nexport class ContractMissingABIError extends BaseWeb3Error {\n  constructor() {\n    super('You must provide the json interface of the contract when instantiating a contract object.');\n    this.code = ERR_CONTRACT_ABI_MISSING;\n  }\n}\nexport class ContractOnceRequiresCallbackError extends BaseWeb3Error {\n  constructor() {\n    super('Once requires a callback as the second parameter.');\n    this.code = ERR_CONTRACT_REQUIRED_CALLBACK;\n  }\n}\nexport class ContractEventDoesNotExistError extends BaseWeb3Error {\n  constructor(eventName) {\n    super(`Event \"${eventName}\" doesn't exist in this contract.`);\n    this.eventName = eventName;\n    this.code = ERR_CONTRACT_EVENT_NOT_EXISTS;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      eventName: this.eventName\n    });\n  }\n}\nexport class ContractReservedEventError extends BaseWeb3Error {\n  constructor(type) {\n    super(`Event \"${type}\" doesn't exist in this contract.`);\n    this.type = type;\n    this.code = ERR_CONTRACT_RESERVED_EVENT;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      type: this.type\n    });\n  }\n}\nexport class ContractMissingDeployDataError extends BaseWeb3Error {\n  constructor() {\n    super(`No \"data\" specified in neither the given options, nor the default options.`);\n    this.code = ERR_CONTRACT_MISSING_DEPLOY_DATA;\n  }\n}\nexport class ContractNoAddressDefinedError extends BaseWeb3Error {\n  constructor() {\n    super(\"This contract object doesn't have address set yet, please set an address first.\");\n    this.code = ERR_CONTRACT_MISSING_ADDRESS;\n  }\n}\nexport class ContractNoFromAddressDefinedError extends BaseWeb3Error {\n  constructor() {\n    super('No \"from\" address specified in neither the given options, nor the default options.');\n    this.code = ERR_CONTRACT_MISSING_FROM_ADDRESS;\n  }\n}\nexport class ContractInstantiationError extends BaseWeb3Error {\n  constructor() {\n    super(...arguments);\n    this.code = ERR_CONTRACT_INSTANTIATION;\n  }\n}\n/**\n * This class is expected to be set as an `cause` inside ContractExecutionError\n * The properties would be typically decoded from the `data` if it was encoded according to EIP-838\n */\nexport class Eip838ExecutionError extends Web3ContractError {\n  constructor(error) {\n    super(error.message || 'Error');\n    this.name = 'name' in error && error.name || this.constructor.name;\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    this.stack = 'stack' in error && error.stack || undefined;\n    this.code = error.code;\n    // get embedded error details got from some providers like MetaMask\n    // and set this.data from the inner error data for easier read.\n    // note: the data is a hex string inside either:\n    //\t error.data, error.data.data or error.data.originalError.data (https://github.com/web3/web3.js/issues/4454#issuecomment-1485953455)\n    if (typeof error.data === 'object') {\n      let originalError;\n      if (error.data && 'originalError' in error.data) {\n        originalError = error.data.originalError;\n      } else {\n        // Ganache has no `originalError` sub-object unlike others\n        originalError = error.data;\n      }\n      this.data = originalError.data;\n      this.cause = new Eip838ExecutionError(originalError);\n    } else {\n      this.data = error.data;\n    }\n  }\n  setDecodedProperties(errorName, errorSignature, errorArgs) {\n    this.errorName = errorName;\n    this.errorSignature = errorSignature;\n    this.errorArgs = errorArgs;\n  }\n  toJSON() {\n    let json = Object.assign(Object.assign({}, super.toJSON()), {\n      data: this.data\n    });\n    if (this.errorName) {\n      json = Object.assign(Object.assign({}, json), {\n        errorName: this.errorName,\n        errorSignature: this.errorSignature,\n        errorArgs: this.errorArgs\n      });\n    }\n    return json;\n  }\n}\n/**\n * Used when an error is raised while executing a function inside a smart contract.\n * The data is expected to be encoded according to EIP-848.\n */\nexport class ContractExecutionError extends Web3ContractError {\n  constructor(rpcError) {\n    super('Error happened while trying to execute a function inside a smart contract');\n    this.code = ERR_CONTRACT_EXECUTION_REVERTED;\n    this.cause = new Eip838ExecutionError(rpcError);\n  }\n}\nexport class ContractTransactionDataAndInputError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\\'t have \"data\" and \"input\" as properties of a contract at the same time, please use either \"data\" or \"input\" instead.');\n    this.code = ERR_CONTRACT_TX_DATA_AND_INPUT;\n  }\n}\n//# sourceMappingURL=contract_errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}