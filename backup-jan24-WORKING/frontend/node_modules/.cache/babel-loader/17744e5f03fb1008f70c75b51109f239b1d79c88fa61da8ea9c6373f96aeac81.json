{"ast":null,"code":"import { WebSocket as _WebSocket } from \"./ws.js\"; /*-browser*/\nimport { SocketProvider } from \"./provider-socket.js\";\n/**\n *  A JSON-RPC provider which is backed by a WebSocket.\n *\n *  WebSockets are often preferred because they retain a live connection\n *  to a server, which permits more instant access to events.\n *\n *  However, this incurs higher server infrasturture costs, so additional\n *  resources may be required to host your own WebSocket nodes and many\n *  third-party services charge additional fees for WebSocket endpoints.\n */\nexport class WebSocketProvider extends SocketProvider {\n  #connect;\n  #websocket;\n  get websocket() {\n    if (this.#websocket == null) {\n      throw new Error(\"websocket closed\");\n    }\n    return this.#websocket;\n  }\n  constructor(url, network, options) {\n    super(network, options);\n    if (typeof url === \"string\") {\n      this.#connect = () => {\n        return new _WebSocket(url);\n      };\n      this.#websocket = this.#connect();\n    } else if (typeof url === \"function\") {\n      this.#connect = url;\n      this.#websocket = url();\n    } else {\n      this.#connect = null;\n      this.#websocket = url;\n    }\n    this.websocket.onopen = async () => {\n      try {\n        await this._start();\n        this.resume();\n      } catch (error) {\n        console.log(\"failed to start WebsocketProvider\", error);\n        // @TODO: now what? Attempt reconnect?\n      }\n    };\n    this.websocket.onmessage = message => {\n      this._processMessage(message.data);\n    };\n    /*\n            this.websocket.onclose = (event) => {\n                // @TODO: What event.code should we reconnect on?\n                const reconnect = false;\n                if (reconnect) {\n                    this.pause(true);\n                    if (this.#connect) {\n                        this.#websocket = this.#connect();\n                        this.#websocket.onopen = ...\n                        // @TODO: this requires the super class to rebroadcast; move it there\n                    }\n                    this._reconnect();\n                }\n            };\n    */\n  }\n  async _write(message) {\n    this.websocket.send(message);\n  }\n  async destroy() {\n    if (this.#websocket != null) {\n      this.#websocket.close();\n      this.#websocket = null;\n    }\n    super.destroy();\n  }\n}\n//# sourceMappingURL=provider-websocket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}