{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManagerEvent } from './web3_request_manager.js';\nexport class Web3SubscriptionManager {\n  constructor(requestManager, registeredSubscriptions, tolerateUnlinkedSubscription = false) {\n    this.requestManager = requestManager;\n    this.registeredSubscriptions = registeredSubscriptions;\n    this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;\n    this._subscriptions = new Map();\n    this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter(this, void 0, void 0, function* () {\n      yield this.unsubscribe();\n    }));\n    this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n      this.clear();\n      this.listenToProviderEvents();\n    });\n    this.listenToProviderEvents();\n  }\n  listenToProviderEvents() {\n    const providerAsWebProvider = this.requestManager.provider;\n    if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) {\n      return;\n    }\n    if (typeof this.requestManager.provider.on === 'function') {\n      if (typeof this.requestManager.provider.request === 'function') {\n        // Listen to provider messages and data\n        this.requestManager.provider.on('message',\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        message => this.messageListener(message));\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        providerAsWebProvider.on('data', data => this.messageListener(data));\n      }\n    }\n  }\n  messageListener(data) {\n    var _a, _b, _c;\n    if (!data) {\n      throw new SubscriptionError('Should not call messageListener with no data. Type was');\n    }\n    const subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));\n    // Process if the received data is related to a subscription\n    if (subscriptionId) {\n      const sub = this._subscriptions.get(subscriptionId);\n      sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);\n    }\n  }\n  /**\n   * Will create a new subscription\n   *\n   * @param name - The subscription you want to subscribe to\n   * @param args - Optional additional parameters, depending on the subscription type\n   * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   *\n   * Will subscribe to a specific topic (note: name)\n   * @returns The subscription object\n   */\n  subscribe(name_1, args_1) {\n    return __awaiter(this, arguments, void 0, function* (name, args, returnFormat = DEFAULT_RETURN_FORMAT) {\n      const Klass = this.registeredSubscriptions[name];\n      if (!Klass) {\n        throw new SubscriptionError('Invalid subscription type');\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {\n        subscriptionManager: this,\n        returnFormat\n        // eslint.disable-next-line @typescript-eslint/no-unsafe-any\n      });\n      yield this.addSubscription(subscription);\n      return subscription;\n    });\n  }\n  /**\n   * Will returns all subscriptions.\n   */\n  get subscriptions() {\n    return this._subscriptions;\n  }\n  /**\n   *\n   * Adds an instance of {@link Web3Subscription} and subscribes to it\n   *\n   * @param sub - A {@link Web3Subscription} object\n   */\n  addSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.requestManager.provider) {\n        throw new ProviderError('Provider not available');\n      }\n      if (!this.supportsSubscriptions()) {\n        throw new SubscriptionError('The current provider does not support subscriptions');\n      }\n      if (sub.id && this._subscriptions.has(sub.id)) {\n        throw new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n      }\n      yield sub.sendSubscriptionRequest();\n      if (isNullish(sub.id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet.');\n      }\n      this._subscriptions.set(sub.id, sub);\n      return sub.id;\n    });\n  }\n  /**\n   * Will clear a subscription\n   *\n   * @param id - The subscription of type {@link Web3Subscription}  to remove\n   */\n  removeSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        id\n      } = sub;\n      if (isNullish(id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');\n      }\n      if (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n        throw new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n      }\n      yield sub.sendUnsubscribeRequest();\n      this._subscriptions.delete(id);\n      return id;\n    });\n  }\n  /**\n   * Will unsubscribe all subscriptions that fulfill the condition\n   *\n   * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n   * @returns An array of all the un-subscribed subscriptions\n   */\n  unsubscribe(condition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n      for (const [id, sub] of this.subscriptions.entries()) {\n        if (!condition || typeof condition === 'function' && condition({\n          id,\n          sub\n        })) {\n          result.push(this.removeSubscription(sub));\n        }\n      }\n      return Promise.all(result);\n    });\n  }\n  /**\n   * Clears all subscriptions\n   */\n  clear() {\n    this._subscriptions.clear();\n  }\n  /**\n   * Check whether the current provider supports subscriptions.\n   *\n   * @returns `true` or `false` depending on if the current provider supports subscriptions\n   */\n  supportsSubscriptions() {\n    return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);\n  }\n}\n//# sourceMappingURL=web3_subscription_manager.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}