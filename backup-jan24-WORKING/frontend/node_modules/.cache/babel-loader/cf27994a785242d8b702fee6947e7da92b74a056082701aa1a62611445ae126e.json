{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { Common } from '../common/common.js';\nimport { Hardfork, Chain } from '../common/enums.js';\nimport { Capability } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport class BaseTransaction {\n  constructor(txData, opts) {\n    var _a, _b;\n    this.cache = {\n      hash: undefined,\n      dataFee: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n    this.DEFAULT_CHAIN = Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = Hardfork.Merge;\n    const {\n      nonce,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s,\n      type\n    } = txData;\n    this._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n    this.txOptions = opts;\n    const toB = toUint8Array(to === '' ? '0x' : to);\n    const vB = toUint8Array(v === '' ? '0x' : v);\n    const rB = toUint8Array(r === '' ? '0x' : r);\n    const sB = toUint8Array(s === '' ? '0x' : s);\n    this.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n    this.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new Address(toB) : undefined;\n    this.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n    this.data = toUint8Array(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n    this.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n    this.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n    this._validateCannotExceedMaxInteger({\n      value: this.value,\n      r: this.r,\n      s: this.s\n    });\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({\n      gasLimit: this.gasLimit\n    }, 64);\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce\n    }, 64, true);\n    // eslint-disable-next-line no-null/no-null\n    const createContract = this.to === undefined || this.to === null;\n    const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;\n    const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();\n    if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n      checkMaxInitCodeSize(common, this.data.length);\n    }\n  }\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability) {\n    return this.activeCapabilities.includes(capability);\n  }\n  validate(stringError = false) {\n    const errors = [];\n    if (this.getBaseFee() > this.gasLimit) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n    }\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    return stringError ? errors : errors.length === 0;\n  }\n  _validateYParity() {\n    const {\n      v\n    } = this;\n    if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n   * Reasoning: https://ethereum.stackexchange.com/a/55728\n   */\n  _validateHighS() {\n    const {\n      s\n    } = this;\n    if (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n      const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee() {\n    const txFee = this.common.param('gasPrices', 'tx');\n    let fee = this.getDataFee();\n    if (txFee) fee += txFee;\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      const txCreationFee = this.common.param('gasPrices', 'txCreation');\n      if (txCreationFee) fee += txCreationFee;\n    }\n    return fee;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero');\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    let cost = BigInt(0);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this.data.length; i += 1) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n    // eslint-disable-next-line no-null/no-null\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = BigInt(Math.ceil(this.data.length / 32));\n      const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n      cost += initCodeCost;\n    }\n    return cost;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress() {\n    return this.to === undefined || this.to.buf.length === 0;\n  }\n  isSigned() {\n    const {\n      v,\n      r,\n      s\n    } = this;\n    if (v === undefined || r === undefined || s === undefined) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature() {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey();\n      return unpadUint8Array(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress() {\n    return new Address(Address.publicToAddress(this.getSenderPublicKey()));\n  }\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey) {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.');\n      throw new Error(msg);\n    }\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false;\n    if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(Capability.EIP155ReplayProtection)) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n      hackApplied = true;\n    }\n    const msgHash = this.getMessageToSign(true);\n    const {\n      v,\n      r,\n      s\n    } = this._ecsign(msgHash, privateKey);\n    const tx = this._processSignature(v, r, s);\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1);\n      }\n    }\n    return tx;\n  }\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  _getCommon(common, chainId) {\n    var _a, _b, _c, _d;\n    // TODO: this function needs to be reviewed and the code to be more clean\n    // check issue https://github.com/web3/web3.js/issues/6666\n    // Chain ID provided\n    if (chainId !== undefined) {\n      const chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n      if (common) {\n        if (common.chainId() !== chainIdBigInt) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n          throw new Error(msg);\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy();\n      }\n      if (Common.isSupportedChainId(chainIdBigInt)) {\n        // No Common, chain ID supported by Common\n        // -> Instantiate Common with chain ID\n        return new Common({\n          chain: chainIdBigInt,\n          hardfork: this.DEFAULT_HARDFORK\n        });\n      }\n      // No Common, chain ID not supported by Common\n      // -> Instantiate custom Common derived from DEFAULT_CHAIN\n      return Common.custom({\n        name: 'custom-chain',\n        networkId: chainIdBigInt,\n        chainId: chainIdBigInt\n      }, {\n        baseChain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    }\n    // No chain ID provided\n    // -> return Common provided or create new default Common\n    if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === 'function') {\n      return common.copy();\n    }\n    // TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666\n    // This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`\n    // If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block\n    if (common) {\n      const hardfork = typeof common.hardfork === 'function' ? common.hardfork() :\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      common.hardfork;\n      return Common.custom({\n        name: 'custom-chain',\n        networkId: common.networkId ? common.networkId() : (_b = BigInt((_a = common.customChain) === null || _a === void 0 ? void 0 : _a.networkId)) !== null && _b !== void 0 ? _b : undefined,\n        chainId: common.chainId ? common.chainId() : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : undefined\n      }, {\n        baseChain: this.DEFAULT_CHAIN,\n        hardfork: hardfork || this.DEFAULT_HARDFORK\n      });\n    }\n    return new Common({\n      chain: this.DEFAULT_CHAIN,\n      hardfork: this.DEFAULT_HARDFORK\n    });\n  }\n  /**\n   * Validates that an object with BigInt values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BigInt values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_UINT64) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > MAX_UINT64) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n            throw new Error(msg);\n          }\n          break;\n        case 256:\n          if (cannotEqual) {\n            if (value !== undefined && value >= MAX_INTEGER) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > MAX_INTEGER) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n            throw new Error(msg);\n          }\n          break;\n        default:\n          {\n            const msg = this._errorMsg('unimplemented bits value');\n            throw new Error(msg);\n          }\n      }\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static _validateNotArray(values) {\n    const txDataKeys = ['nonce', 'gasPrice', 'gasLimit', 'to', 'value', 'data', 'v', 'r', 's', 'type', 'baseFee', 'maxFeePerGas', 'chainId'];\n    for (const [key, value] of Object.entries(values)) {\n      if (txDataKeys.includes(key)) {\n        if (Array.isArray(value)) {\n          throw new Error(`${key} cannot be an array`);\n        }\n      }\n    }\n  }\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  _getSharedErrorPostfix() {\n    let hash = '';\n    try {\n      hash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n    } catch (e) {\n      hash = 'error';\n    }\n    let isSigned = '';\n    try {\n      isSigned = this.isSigned().toString();\n    } catch (e) {\n      hash = 'error';\n    }\n    let hf = '';\n    try {\n      hf = this.common.hardfork();\n    } catch (e) {\n      hf = 'error';\n    }\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n    postfix += `signed=${isSigned} hf=${hf}`;\n    return postfix;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _ecsign(msgHash, privateKey, chainId) {\n    const signature = secp256k1.sign(msgHash, privateKey);\n    const signatureBytes = signature.toCompactRawBytes();\n    const r = signatureBytes.subarray(0, 32);\n    const s = signatureBytes.subarray(32, 64);\n    const v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return {\n      r,\n      s,\n      v\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromSerializedTx(\n  // @ts-expect-error unused variable\n  serialized,\n  // @ts-expect-error unused variable\n  opts = {}) {}\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromTxData(\n  // @ts-expect-error unused variable\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  txData,\n  // @ts-expect-error unused variable\n  opts = {}) {}\n}\n//# sourceMappingURL=baseTransaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}