{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nconst symbol = Symbol.for('web3/base-provider');\n// Provider interface compatible with EIP-1193\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\nexport class Web3BaseProvider {\n  static isWeb3Provider(provider) {\n    return provider instanceof Web3BaseProvider || Boolean(provider && provider[symbol]);\n  }\n  // To match an object \"instanceof\" does not work if\n  // matcher class and object is using different package versions\n  // to overcome this bottleneck used this approach.\n  // The symbol value for one string will always remain same regardless of package versions\n  // eslint-disable-next-line class-methods-use-this\n  get [symbol]() {\n    return true;\n  }\n  /**\n   * @deprecated Please use `.request` instead.\n   * @param payload - Request Payload\n   * @param callback - Callback\n   */\n  send(payload,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback) {\n    this.request(payload).then(response => {\n      // eslint-disable-next-line no-null/no-null\n      callback(null, response);\n    }).catch(err => {\n      callback(err);\n    });\n  }\n  /**\n   * @deprecated Please use `.request` instead.\n   * @param payload - Request Payload\n   */\n  sendAsync(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.request(payload);\n    });\n  }\n  /**\n   * Modify the return type of the request method to be fully compatible with EIP-1193\n   *\n   * [deprecated] In the future major releases (\\>= v5) all providers are supposed to be fully compatible with EIP-1193.\n   * So this method will not be needed and would not be available in the future.\n   *\n   * @returns A new instance of the provider with the request method fully compatible with EIP-1193\n   *\n   * @example\n   * ```ts\n   * const provider = new Web3HttpProvider('http://localhost:8545');\n   * const fullyCompatibleProvider = provider.asEIP1193Provider();\n   * const result = await fullyCompatibleProvider.request({ method: 'eth_getBalance' });\n   * console.log(result); // '0x0234c8a3397aab58' or something like that\n   * ```\n   */\n  asEIP1193Provider() {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const newObj = Object.create(this);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalRequest = newObj.request;\n    newObj.request = function request(args) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        const response = yield originalRequest(args);\n        return response.result;\n      });\n    };\n    // @ts-expect-error the property should not be available in the new object because of using Object.create(this).\n    //\tBut it is available if we do not delete it.\n    newObj.asEIP1193Provider = undefined; // to prevent the user for calling this method again\n    return newObj;\n  }\n}\n//# sourceMappingURL=web3_base_provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}