{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [videoUrl, setVideoUrl] = useState('');\n  const [videoStatus, setVideoStatus] = useState('');\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  useEffect(() => {\n    // Connect to WebSocket when component mounts\n    const ws = new WebSocket('ws://localhost:5002');\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'video-ready') {\n        setVideoUrl(data.videoUrl);\n        setVideoStatus('complete');\n        setUploadStatus('3D Avatar is ready!');\n      }\n    };\n\n    // Cleanup on unmount\n    return () => {\n      ws.close();\n    };\n  }, []);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n  };\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: selectedNFT\n        })\n      });\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n      const downloadData = await downloadResponse.json();\n      const savedImageName = downloadData.filename;\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: savedImageName\n        })\n      });\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setFullBodyImageUrl(data.imagePath);\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n    try {\n      setUploadStatus('Uploading...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: filename\n        })\n      });\n      console.log('Upload response:', await response.clone().json());\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n  const VideoDisplay = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pink-text\",\n      children: \"Your 3D Avatar is ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      className: \"avatar-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: videoUrl,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log('Mint NFT clicked'),\n      className: \"nft-button mint-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px',\n          marginLeft: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"wallet-button\",\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"wallet-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: polygonIcon,\n          alt: \"Polygon Icon\",\n          style: {\n            width: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Your Avatar Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), selectedNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedNFT,\n            alt: \"Selected NFT\",\n            className: \"selected-nft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"nft-button\",\n            onClick: handleGenerateFullBodyImage,\n            children: loading ? 'Generating...' : 'Create Full Body Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), showNFTGrid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Please select an image to create your avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-gallery\",\n          children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: nft.image_url,\n              alt: nft.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCreateAvatar(nft.image_url),\n              className: \"nft-button\",\n              children: \"Choose PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pink-text\",\n          children: \"Please connect your MetaMask wallet to view your NFTs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-body-container\",\n        children: videoUrl ? /*#__PURE__*/_jsxDEV(VideoDisplay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-body-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"pink-text\",\n              children: \"Your Full Body Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-body-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fullBodyImageUrl,\n              alt: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBackButton,\n              className: \"nft-button\",\n              children: \"Back to NFT Selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBeamIt,\n              className: \"nft-button beam-button\",\n              children: \"Beam It!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 17\n          }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: uploadStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NIXAmkXLO3g0pfRqFvBXpJgrPXg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","AvatarSelection","logo","polygonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","account","setAccount","nfts","setNfts","loading","setLoading","statusMessage","setStatusMessage","fullBodyImageUrl","setFullBodyImageUrl","showNFTGrid","setShowNFTGrid","uploadStatus","setUploadStatus","videoUrl","setVideoUrl","videoStatus","setVideoStatus","fetchNFTs","ws","WebSocket","onmessage","event","data","JSON","parse","type","close","connectWallet","window","ethereum","accounts","request","method","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","status","json","handleCreateAvatar","imageUrl","handleBackButton","handleGenerateFullBodyImage","downloadResponse","body","stringify","errorText","text","downloadData","savedImageName","filename","generateResponse","imagePath","handleBeamIt","split","pop","fileName","clone","VideoDisplay","className","children","_jsxFileName","lineNumber","columnNumber","controls","src","onClick","alt","style","maxWidth","marginLeft","position","top","right","display","alignItems","gap","width","map","nft","index","image_url","name","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [videoUrl, setVideoUrl] = useState('');\n  const [videoStatus, setVideoStatus] = useState('');\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  useEffect(() => {\n    // Connect to WebSocket when component mounts\n    const ws = new WebSocket('ws://localhost:5002');\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'video-ready') {\n        setVideoUrl(data.videoUrl);\n        setVideoStatus('complete');\n        setUploadStatus('3D Avatar is ready!');\n      }\n    };\n\n    // Cleanup on unmount\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n  };\n\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: selectedNFT\n        }),\n      });\n\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n\n      const downloadData = await downloadResponse.json();\n      const savedImageName = downloadData.filename;\n\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: savedImageName \n        }),\n      });\n\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setFullBodyImageUrl(data.imagePath);\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n\n    try {\n      setUploadStatus('Uploading...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      \n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          fileName: filename \n        }),\n      });\n\n      console.log('Upload response:', await response.clone().json());\n      \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n\n  const VideoDisplay = () => (\n    <div className=\"video-container\">\n      <h2 className=\"pink-text\">Your 3D Avatar is ready</h2>\n      <video controls className=\"avatar-video\">\n        <source src={videoUrl} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n      <button onClick={() => console.log('Mint NFT clicked')} className=\"nft-button mint-button\">\n        Mint NFT\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px', marginLeft: '20px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20, display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <button onClick={connectWallet} className=\"wallet-button\">\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet} className=\"wallet-button\">Disconnect</button>}\n          <img src={polygonIcon} alt=\"Polygon Icon\" style={{ width: '30px' }} />\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        <div className=\"avatar-selection\">\n          <h2 className=\"pink-text\">Your Avatar Selection</h2>\n          {selectedNFT && (\n            <div>\n              <img src={selectedNFT} alt=\"Selected NFT\" className=\"selected-nft\" />\n              <button className=\"nft-button\" onClick={handleGenerateFullBodyImage}>\n                {loading ? 'Generating...' : 'Create Full Body Image'}\n              </button>\n              <p className=\"status-message\">{statusMessage}</p>\n              {loading && <div className=\"loading-dots\">...</div>}\n            </div>\n          )}\n        </div>\n        \n        {showNFTGrid ? (\n          <div className=\"nft-gallery-container\">\n            <h2 className=\"pink-text\">Please select an image to create your avatar</h2>\n            {account ? (\n              <div className=\"nft-gallery\">\n                {nfts.map((nft, index) => (\n                  <div key={index} className=\"nft-item\">\n                    <img src={nft.image_url} alt={nft.name} style={{ width: '100px' }} />\n                    <p>{nft.name}</p>\n                    <button onClick={() => handleCreateAvatar(nft.image_url)} className=\"nft-button\">Choose PFP</button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"pink-text\">Please connect your MetaMask wallet to view your NFTs.</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"full-body-container\">\n            {videoUrl ? (\n              <VideoDisplay />\n            ) : (\n              <>\n                <div className=\"full-body-header\">\n                  <h2 className=\"pink-text\">Your Full Body Image</h2>\n                </div>\n                <div className=\"full-body-image\">\n                  <img src={fullBodyImageUrl} alt=\"Full Body\" />\n                </div>\n                <div className=\"button-group\">\n                  <button onClick={handleBackButton} className=\"nft-button\">Back to NFT Selection</button>\n                  <button onClick={handleBeamIt} className=\"nft-button beam-button\">Beam It!</button>\n                </div>\n                {uploadStatus && <p className=\"status-message\">{uploadStatus}</p>}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}