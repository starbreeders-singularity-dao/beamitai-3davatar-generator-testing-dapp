{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport RenderResults from './components/RenderResults';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [fileName, setFileName] = useState('');\n\n  // Fetch images from the backend on component mount\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const images = await fetchLocalImages();\n        console.log('Fetched images:', images);\n        setLocalImages(images);\n      } catch (error) {\n        console.error('Error fetching local images:', error);\n      }\n    };\n    fetchImages();\n  }, []);\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', {\n        type: blob.type\n      });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([data.imagePath]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n\n      // Fetch the latest video URL after upload\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/get-latest-video`);\n      const data = await response.json();\n      if (response.ok && data.videoPath) {\n        setVideoUrl(data.videoPath);\n        setFileName(data.videoName);\n      } else {\n        console.error('Error fetching video:', data);\n      }\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"2D to 3D - Beam your Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: videoUrl ? /*#__PURE__*/_jsxDEV(RenderResults, {\n        videoUrl: videoUrl,\n        fileName: fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(AvatarSelection, {\n          selectedNFT: selectedNFT,\n          handleGenerateImages: handleGenerateImages,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n          generatedImages: generatedImages,\n          localImages: localImages,\n          handleCreateAvatar: handleCreateAvatar,\n          handleBeamit: handleBeamit,\n          uploadStatus: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T10ikVJFxG1ksmtPy2+nYAw5dis=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","AvatarSelection","ImageGallery","RenderResults","fetchLocalImages","generateImages","uploadImageToCloud","logo","jsxDEV","_jsxDEV","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","generatedImages","setGeneratedImages","localImages","setLocalImages","loading","setLoading","pfpFile","setPfpFile","uploadStatus","setUploadStatus","videoUrl","setVideoUrl","fileName","setFileName","fetchImages","images","error","handleCreateAvatar","imageUrl","res","fetch","blob","file","File","type","handleGenerateImages","alert","data","imagePath","message","handleBeamit","length","fullBodyImage","split","pop","response","json","ok","videoPath","videoName","className","children","src","alt","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport RenderResults from './components/RenderResults';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [fileName, setFileName] = useState('');\n\n  // Fetch images from the backend on component mount\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const images = await fetchLocalImages();\n        console.log('Fetched images:', images);\n        setLocalImages(images);\n      } catch (error) {\n        console.error('Error fetching local images:', error);\n      }\n    };\n\n    fetchImages();\n  }, []);\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', { type: blob.type });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([data.imagePath]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n\n      // Fetch the latest video URL after upload\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/get-latest-video`);\n      const data = await response.json();\n\n      if (response.ok && data.videoPath) {\n        setVideoUrl(data.videoPath);\n        setFileName(data.videoName);\n      } else {\n        console.error('Error fetching video:', data);\n      }\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" />\n        <h1>2D to 3D - Beam your Avatar</h1>\n      </header>\n\n      <div className=\"App-content\">\n        {videoUrl ? (\n          <RenderResults videoUrl={videoUrl} fileName={fileName} />\n        ) : (\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <AvatarSelection\n              selectedNFT={selectedNFT}\n              handleGenerateImages={handleGenerateImages}\n              loading={loading}\n            />\n            <ImageGallery\n              generatedImages={generatedImages}\n              localImages={localImages}\n              handleCreateAvatar={handleCreateAvatar}\n              handleBeamit={handleBeamit}\n              uploadStatus={uploadStatus}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}