{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// Add validation\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found in environment variables');\n}\nif (NFT_STORAGE_KEY.length < 40) {\n  throw new Error('NFT Storage API key appears to be invalid (too short)');\n}\nconsole.log('NFT Storage Key validation passed');\nconst client = new NFTStorage({\n  token: NFT_STORAGE_KEY\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting IPFS upload process...');\n    console.log('Downloading GLB file...');\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB file: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n\n    // Upload GLB to IPFS\n    console.log('Uploading GLB to IPFS...', {\n      blobSize: glbBlob.size,\n      blobType: glbBlob.type\n    });\n    const glbCid = await client.storeBlob(glbBlob);\n    console.log('GLB uploaded to IPFS:', glbCid);\n    const glbIpfsUrl = `ipfs://${glbCid}`;\n\n    // Create metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: glbIpfsUrl,\n      animation_url: glbIpfsUrl,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n\n    // Upload metadata to IPFS\n    console.log('Uploading metadata to IPFS...');\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataCid = await client.storeBlob(metadataBlob);\n    console.log('Upload complete:', {\n      glbCid,\n      metadataCid\n    });\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('IPFS upload error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","Error","length","console","log","client","token","uploadToIPFS","glbUrl","originalNFT","response","fetch","ok","status","glbBlob","blob","blobSize","size","blobType","type","glbCid","storeBlob","glbIpfsUrl","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","value","tokenId","chainId","metadataBlob","Blob","JSON","stringify","metadataCid","error"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// Add validation\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found in environment variables');\n}\n\nif (NFT_STORAGE_KEY.length < 40) {\n    throw new Error('NFT Storage API key appears to be invalid (too short)');\n}\n\nconsole.log('NFT Storage Key validation passed');\n\nconst client = new NFTStorage({ token: NFT_STORAGE_KEY });\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting IPFS upload process...');\n        \n        console.log('Downloading GLB file...');\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB file: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        \n        // Upload GLB to IPFS\n        console.log('Uploading GLB to IPFS...', {\n            blobSize: glbBlob.size,\n            blobType: glbBlob.type\n        });\n        \n        const glbCid = await client.storeBlob(glbBlob);\n        console.log('GLB uploaded to IPFS:', glbCid);\n        \n        const glbIpfsUrl = `ipfs://${glbCid}`;\n        \n        // Create metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: glbIpfsUrl,\n            animation_url: glbIpfsUrl,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n        \n        // Upload metadata to IPFS\n        console.log('Uploading metadata to IPFS...');\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { \n            type: 'application/json' \n        });\n        const metadataCid = await client.storeBlob(metadataBlob);\n        \n        console.log('Upload complete:', {\n            glbCid,\n            metadataCid\n        });\n        \n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('IPFS upload error:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AAExC,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;;AAE7D;AACA,IAAI,CAACH,eAAe,EAAE;EAClB,MAAM,IAAII,KAAK,CAAC,wDAAwD,CAAC;AAC7E;AAEA,IAAIJ,eAAe,CAACK,MAAM,GAAG,EAAE,EAAE;EAC7B,MAAM,IAAID,KAAK,CAAC,uDAAuD,CAAC;AAC5E;AAEAE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;AAEhD,MAAMC,MAAM,GAAG,IAAIT,UAAU,CAAC;EAAEU,KAAK,EAAET;AAAgB,CAAC,CAAC;AAEzD,OAAO,MAAMU,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAN,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAE9CD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,CAAC;IACpC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIX,KAAK,CAAC,6BAA6BS,QAAQ,CAACG,MAAM,EAAE,CAAC;IACnE;IACA,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAErC;IACAZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE;MACpCY,QAAQ,EAAEF,OAAO,CAACG,IAAI;MACtBC,QAAQ,EAAEJ,OAAO,CAACK;IACtB,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,MAAMf,MAAM,CAACgB,SAAS,CAACP,OAAO,CAAC;IAC9CX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEgB,MAAM,CAAC;IAE5C,MAAME,UAAU,GAAG,UAAUF,MAAM,EAAE;;IAErC;IACA,MAAMG,QAAQ,GAAG;MACbC,IAAI,EAAE,qBAAqBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACvCC,WAAW,EAAE,oCAAoC;MACjDC,KAAK,EAAEN,UAAU;MACjBO,aAAa,EAAEP,UAAU;MACzBQ,UAAU,EAAE,CACR;QACIC,UAAU,EAAE,iBAAiB;QAC7BC,KAAK,EAAEvB,WAAW,CAACwB;MACvB,CAAC,EACD;QACIF,UAAU,EAAE,mBAAmB;QAC/BC,KAAK,EAAEvB,WAAW,CAACyB;MACvB,CAAC;IAET,CAAC;;IAED;IACA/B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAM+B,YAAY,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE;MACtDJ,IAAI,EAAE;IACV,CAAC,CAAC;IACF,MAAMoB,WAAW,GAAG,MAAMlC,MAAM,CAACgB,SAAS,CAACc,YAAY,CAAC;IAExDhC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;MAC5BgB,MAAM;MACNmB;IACJ,CAAC,CAAC;IAEF,OAAO,UAAUA,WAAW,EAAE;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZrC,OAAO,CAACqC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}