{"ast":null,"code":"const FilmShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    nIntensity: {\n      value: 0.5\n    },\n    sIntensity: {\n      value: 0.05\n    },\n    sCount: {\n      value: 4096\n    },\n    grayscale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\",\n  // control parameter\n  \"uniform float time;\", \"uniform bool grayscale;\",\n  // noise effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float nIntensity;\",\n  // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float sIntensity;\",\n  // scanlines effect count value (0 = no effect, 4096 = full effect)\n  \"uniform float sCount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\",\n  // sample the source\n  \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n  // make some noise\n  \"\tfloat dx = rand( vUv + time );\",\n  // add noise\n  \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n  // get us a sine and cosine\n  \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n  // add scanlines\n  \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n  // interpolate between source and result by intensity\n  \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n  // convert to grayscale if desired\n  \"\tif( grayscale ) {\", \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\", \"\t}\", \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\", \"}\"].join(\"\\n\")\n};\nexport { FilmShader };\n//# sourceMappingURL=FilmShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}