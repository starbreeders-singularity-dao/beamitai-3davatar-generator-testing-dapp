{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst COLLECTION_ID = process.env.REACT_APP_NFT_STORAGE_COLLECTION_ID;\nconsole.log('Starting NFT.Storage setup...');\nif (!NFT_STORAGE_KEY || !COLLECTION_ID) {\n  throw new Error('NFT Storage configuration missing');\n}\nconst authHeader = `Bearer ${NFT_STORAGE_KEY.trim()}`;\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // Get the GLB file\n    console.log('Fetching GLB from:', glbUrl);\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Create token data\n    const tokenData = [{\n      tokenID: Date.now().toString(),\n      cid: \"uploading...\" // Temporary CID\n    }];\n    const tokenFile = new Blob([JSON.stringify(tokenData)], {\n      type: 'application/json'\n    });\n\n    // Upload token data\n    const formData = new FormData();\n    formData.append('collectionID', COLLECTION_ID);\n    formData.append('file', tokenFile, 'tokens.json');\n    const uploadResponse = await fetch('https://preserve.nft.storage/api/v1/collection/add_tokens', {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload response:', error);\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const uploadData = await uploadResponse.json();\n    console.log('Upload successful:', uploadData);\n    return `ipfs://${uploadData.cid}`;\n  } catch (error) {\n    console.error('Upload error:', {\n      message: error.message,\n      name: error.name,\n      response: error.response\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","COLLECTION_ID","REACT_APP_NFT_STORAGE_COLLECTION_ID","console","log","Error","authHeader","trim","uploadToIPFS","glbUrl","originalNFT","response","fetch","ok","status","glbBlob","blob","size","type","tokenData","tokenID","Date","now","toString","cid","tokenFile","Blob","JSON","stringify","formData","FormData","append","uploadResponse","method","headers","body","error","json","uploadData","message","name"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst COLLECTION_ID = process.env.REACT_APP_NFT_STORAGE_COLLECTION_ID;\n\nconsole.log('Starting NFT.Storage setup...');\n\nif (!NFT_STORAGE_KEY || !COLLECTION_ID) {\n    throw new Error('NFT Storage configuration missing');\n}\n\nconst authHeader = `Bearer ${NFT_STORAGE_KEY.trim()}`;\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // Get the GLB file\n        console.log('Fetching GLB from:', glbUrl);\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Create token data\n        const tokenData = [{\n            tokenID: Date.now().toString(),\n            cid: \"uploading...\" // Temporary CID\n        }];\n\n        const tokenFile = new Blob([JSON.stringify(tokenData)], {\n            type: 'application/json'\n        });\n\n        // Upload token data\n        const formData = new FormData();\n        formData.append('collectionID', COLLECTION_ID);\n        formData.append('file', tokenFile, 'tokens.json');\n\n        const uploadResponse = await fetch('https://preserve.nft.storage/api/v1/collection/add_tokens', {\n            method: 'POST',\n            headers: {\n                'Authorization': authHeader\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload response:', error);\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const uploadData = await uploadResponse.json();\n        console.log('Upload successful:', uploadData);\n\n        return `ipfs://${uploadData.cid}`;\n    } catch (error) {\n        console.error('Upload error:', {\n            message: error.message,\n            name: error.name,\n            response: error.response\n        });\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AAExC,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAC7D,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,mCAAmC;AAErEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAE5C,IAAI,CAACP,eAAe,IAAI,CAACI,aAAa,EAAE;EACpC,MAAM,IAAII,KAAK,CAAC,mCAAmC,CAAC;AACxD;AAEA,MAAMC,UAAU,GAAG,UAAUT,eAAe,CAACU,IAAI,CAAC,CAAC,EAAE;AAErD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAP,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACAD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,MAAM,CAAC;IACzC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,CAAC;IACpC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIR,KAAK,CAAC,wBAAwBM,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC9D;IACA,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrCb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;MAC7Ba,IAAI,EAAEF,OAAO,CAACE,IAAI;MAClBC,IAAI,EAAEH,OAAO,CAACG;IAClB,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAG,CAAC;MACfC,OAAO,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAC9BC,GAAG,EAAE,cAAc,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACT,SAAS,CAAC,CAAC,EAAE;MACpDD,IAAI,EAAE;IACV,CAAC,CAAC;;IAEF;IACA,MAAMW,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAE9B,aAAa,CAAC;IAC9C4B,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,SAAS,EAAE,aAAa,CAAC;IAEjD,MAAMO,cAAc,GAAG,MAAMpB,KAAK,CAAC,2DAA2D,EAAE;MAC5FqB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAE5B;MACrB,CAAC;MACD6B,IAAI,EAAEN;IACV,CAAC,CAAC;IAEF,IAAI,CAACG,cAAc,CAACnB,EAAE,EAAE;MACpB,MAAMuB,KAAK,GAAG,MAAMJ,cAAc,CAACK,IAAI,CAAC,CAAC;MACzClC,OAAO,CAACiC,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAM,IAAI/B,KAAK,CAAC,kBAAkBsB,IAAI,CAACC,SAAS,CAACQ,KAAK,CAAC,EAAE,CAAC;IAC9D;IAEA,MAAME,UAAU,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IAC9ClC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkC,UAAU,CAAC;IAE7C,OAAO,UAAUA,UAAU,CAACd,GAAG,EAAE;EACrC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZjC,OAAO,CAACiC,KAAK,CAAC,eAAe,EAAE;MAC3BG,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtBC,IAAI,EAAEJ,KAAK,CAACI,IAAI;MAChB7B,QAAQ,EAAEyB,KAAK,CAACzB;IACpB,CAAC,CAAC;IACF,MAAMyB,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}