{"ast":null,"code":"import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, CanvasTexture, SRGBColorSpace } from 'three';\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\nexport function decompress(texture, maxTextureSize = Infinity, renderer = null) {\n  if (!fullscreenQuadGeometry) fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial) fullscreenQuadMaterial = new ShaderMaterial({\n    uniforms: {\n      blitTexture: new Uniform(texture)\n    },\n    vertexShader: `\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main(){\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = vec4(position.xy * 1.0,0.,.999999);\n\t\t\t}`,\n    fragmentShader: `\n\t\t\tuniform sampler2D blitTexture; \n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main(){ \n\t\t\t\tgl_FragColor = vec4(vUv.xy, 0, 1);\n\t\t\t\t\n\t\t\t\t#ifdef IS_SRGB\n\t\t\t\tgl_FragColor = sRGBTransferOETF( texture2D( blitTexture, vUv) );\n\t\t\t\t#else\n\t\t\t\tgl_FragColor = texture2D( blitTexture, vUv);\n\t\t\t\t#endif\n\t\t\t}`\n  });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = texture.colorSpace == SRGBColorSpace;\n  fullscreenQuadMaterial.needsUpdate = true;\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustumCulled = false;\n  }\n  const _camera = new PerspectiveCamera();\n  const _scene = new Scene();\n  _scene.add(fullscreenQuad);\n  if (renderer === null) {\n    renderer = _renderer = new WebGLRenderer({\n      antialias: false\n    });\n  }\n  const width = Math.min(texture.image.width, maxTextureSize);\n  const height = Math.min(texture.image.height, maxTextureSize);\n  renderer.setSize(width, height);\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = width;\n  canvas.height = height;\n  context.drawImage(renderer.domElement, 0, 0, width, height);\n  const readableTexture = new CanvasTexture(canvas);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.colorSpace = texture.colorSpace;\n  readableTexture.name = texture.name;\n  if (_renderer) {\n    _renderer.forceContextLoss();\n    _renderer.dispose();\n    _renderer = null;\n  }\n  return readableTexture;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}