{"ast":null,"code":"import { Vector3, Color } from \"three\";\nconst GodRaysDepthMaskShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \" vUv = uv;\", \" gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"varying vec2 vUv;\", \"uniform sampler2D tInput;\", \"void main() {\", \"\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );\", \"}\"].join(\"\\n\")\n};\nconst GodRaysGenerateShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    },\n    fStepSize: {\n      value: 1\n    },\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \" vUv = uv;\", \" gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#define TAPS_PER_PASS 6.0\", \"varying vec2 vUv;\", \"uniform sampler2D tInput;\", \"uniform vec3 vSunPositionScreenSpace;\", \"uniform float fStepSize;\",\n  // filter step size\n  \"void main() {\",\n  // delta from current pixel to \"sun\" position\n  \"\tvec2 delta = vSunPositionScreenSpace.xy - vUv;\", \"\tfloat dist = length( delta );\",\n  // Step vector (uv space)\n  \"\tvec2 stepv = fStepSize * delta / dist;\",\n  // Number of iterations between pixel and sun\n  \"\tfloat iters = dist/fStepSize;\", \"\tvec2 uv = vUv.xy;\", \"\tfloat col = 0.0;\",\n  // This breaks ANGLE in Chrome 22\n  //\t- see http://code.google.com/p/chromium/issues/detail?id=153105\n  /*\n  \t\t// Unrolling didnt do much on my hardware (ATI Mobility Radeon 3450),\n  \t\t// so i've just left the loop\n  \n  \t\t\"for ( float i = 0.0; i < TAPS_PER_PASS; i += 1.0 ) {\",\n  \n  \t\t// Accumulate samples, making sure we dont walk past the light source.\n  \n  \t\t// The check for uv.y < 1 would not be necessary with \"border\" UV wrap\n  \t\t// mode, with a black border color. I don't think this is currently\n  \t\t// exposed by three.js. As a result there might be artifacts when the\n  \t\t// sun is to the left, right or bottom of screen as these cases are\n  \t\t// not specifically handled.\n  \n  \t\t\"\tcol += ( i <= iters && uv.y < 1.0 ? texture2D( tInput, uv ).r : 0.0 );\",\n  \t\t\"\tuv += stepv;\",\n  \n  \t\t\"}\",\n  \t\t*/\n  // Unrolling loop manually makes it work in ANGLE\n  \"\tfloat f = min( 1.0, max( vSunPositionScreenSpace.z / 1000.0, 0.0 ) );\",\n  // used to fade out godrays\n  \"\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\", \"\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\", \"\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\", \"\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\", \"\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\", \"\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;\", \"\tuv += stepv;\",\n  // Should technically be dividing by 'iters', but 'TAPS_PER_PASS' smooths out\n  // objectionable artifacts, in particular near the sun position. The side\n  // effect is that the result is darker than it should be around the sun, as\n  // TAPS_PER_PASS is greater than the number of samples actually accumulated.\n  // When the result is inverted (in the shader 'godrays_combine', this produces\n  // a slight bright spot at the position of the sun, even when it is occluded.\n  \"\tgl_FragColor = vec4( col/TAPS_PER_PASS );\", \"\tgl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n};\nconst GodRaysCombineShader = {\n  uniforms: {\n    tColors: {\n      value: null\n    },\n    tGodRays: {\n      value: null\n    },\n    fGodRayIntensity: {\n      value: 0.69\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"varying vec2 vUv;\", \"uniform sampler2D tColors;\", \"uniform sampler2D tGodRays;\", \"uniform float fGodRayIntensity;\", \"void main() {\",\n  // Since THREE.MeshDepthMaterial renders foreground objects white and background\n  // objects black, the god-rays will be white streaks. Therefore value is inverted\n  // before being combined with tColors\n  \"\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );\", \"\tgl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n};\nconst GodRaysFakeSunShader = {\n  uniforms: {\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    },\n    fAspect: {\n      value: 1\n    },\n    sunColor: {\n      value: new Color(16772608)\n    },\n    bgColor: {\n      value: new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"varying vec2 vUv;\", \"uniform vec3 vSunPositionScreenSpace;\", \"uniform float fAspect;\", \"uniform vec3 sunColor;\", \"uniform vec3 bgColor;\", \"void main() {\", \"\tvec2 diff = vUv - vSunPositionScreenSpace.xy;\",\n  // Correct for aspect ratio\n  \"\tdiff.x *= fAspect;\", \"\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );\", \"\tprop = 0.35 * pow( 1.0 - prop, 3.0 );\", \"\tgl_FragColor.xyz = ( vSunPositionScreenSpace.z > 0.0 ) ? mix( sunColor, bgColor, 1.0 - prop ) : bgColor;\", \"\tgl_FragColor.w = 1.0;\", \"}\"].join(\"\\n\")\n};\nexport { GodRaysCombineShader, GodRaysDepthMaskShader, GodRaysFakeSunShader, GodRaysGenerateShader };\n//# sourceMappingURL=GodRaysShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}