{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ACESFilmicToneMapping, AnimationMixer, Box3, Euler, LoopPingPong, LoopRepeat, Matrix3, Object3D, PerspectiveCamera, Raycaster, Scene, Sphere, Triangle, Vector2, Vector3 } from 'three';\nimport { CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { reduceVertices } from 'three/examples/jsm/utils/SceneUtils.js';\nimport { $currentGLTF, $model, $originalGltfJson } from '../features/scene-graph.js';\nimport { $nodeFromIndex, $nodeFromPoint } from '../features/scene-graph/model.js';\nimport { $renderer } from '../model-viewer-base.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nimport { Damper, SETTLING_TIME } from './Damper.js';\nimport { GroundedSkybox } from './GroundedSkybox.js';\nimport { Hotspot } from './Hotspot.js';\nimport { Shadow } from './Shadow.js';\nexport const GROUNDED_SKYBOX_SIZE = 10;\nconst MIN_SHADOW_RATIO = 100;\nexport const IlluminationRole = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\nconst view = new Vector3();\nconst target = new Vector3();\nconst normalWorld = new Vector3();\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\nconst ndc = new Vector2();\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  constructor({\n    canvas,\n    element,\n    width,\n    height\n  }) {\n    super();\n    this.annotationRenderer = new CSS2DRenderer();\n    this.effectRenderer = null;\n    this.schemaElement = document.createElement('script');\n    this.width = 1;\n    this.height = 1;\n    this.aspect = 1;\n    this.scaleStep = 0;\n    this.renderCount = 0;\n    this.externalRenderer = null;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.xrCamera = null;\n    this.url = null;\n    this.pivot = new Object3D();\n    this.target = new Object3D();\n    this.animationNames = [];\n    this.boundingBox = new Box3();\n    this.boundingSphere = new Sphere();\n    this.size = new Vector3();\n    this.idealAspect = 0;\n    this.framedFoVDeg = 0;\n    this.shadow = null;\n    this.shadowIntensity = 0;\n    this.shadowSoftness = 1;\n    this.bakedShadows = new Set();\n    this.exposure = 1;\n    this.toneMapping = ACESFilmicToneMapping;\n    this.canScale = true;\n    this.isDirty = false;\n    this.goalTarget = new Vector3();\n    this.targetDamperX = new Damper();\n    this.targetDamperY = new Damper();\n    this.targetDamperZ = new Damper();\n    this._currentGLTF = null;\n    this._model = null;\n    this.cancelPendingSourceChange = null;\n    this.animationsByName = new Map();\n    this.currentAnimationAction = null;\n    this.groundedSkybox = new GroundedSkybox();\n    this.name = 'ModelScene';\n    this.element = element;\n    this.canvas = canvas;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n    this.add(this.pivot);\n    this.pivot.name = 'Pivot';\n    this.pivot.add(this.target);\n    this.setSize(width, height);\n    this.target.name = 'Target';\n    this.mixer = new AnimationMixer(this.target);\n    const {\n      domElement\n    } = this.annotationRenderer;\n    const {\n      style\n    } = domElement;\n    style.display = 'none';\n    style.pointerEvents = 'none';\n    style.position = 'absolute';\n    style.top = '0';\n    this.element.shadowRoot.querySelector('.default').appendChild(domElement);\n    this.schemaElement.setAttribute('type', 'application/ld+json');\n  }\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  get context() {\n    return this.canvas.getContext('2d');\n  }\n  getCamera() {\n    return this.xrCamera != null ? this.xrCamera : this.camera;\n  }\n  queueRender() {\n    this.isDirty = true;\n  }\n  shouldRender() {\n    return this.isDirty;\n  }\n  hasRendered() {\n    this.isDirty = false;\n  }\n  forceRescale() {\n    this.scaleStep = -1;\n    this.queueRender();\n  }\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   */\n  async setObject(model) {\n    this.reset();\n    this._model = model;\n    this.target.add(model);\n    await this.setupScene();\n  }\n  /**\n   * Sets the model via URL.\n   */\n  async setSource(url, progressCallback = () => {}) {\n    if (!url || url === this.url) {\n      progressCallback(1);\n      return;\n    }\n    this.reset();\n    this.url = url;\n    if (this.externalRenderer != null) {\n      const framingInfo = await this.externalRenderer.load(progressCallback);\n      this.boundingSphere.radius = framingInfo.framedRadius;\n      this.idealAspect = framingInfo.fieldOfViewAspect;\n      return;\n    }\n    // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n    if (this.cancelPendingSourceChange != null) {\n      this.cancelPendingSourceChange();\n      this.cancelPendingSourceChange = null;\n    }\n    let gltf;\n    try {\n      gltf = await new Promise(async (resolve, reject) => {\n        this.cancelPendingSourceChange = () => reject();\n        try {\n          const result = await this.element[$renderer].loader.load(url, this.element, progressCallback);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      if (error == null) {\n        // Loading was cancelled, so silently return\n        return;\n      }\n      throw error;\n    }\n    this.cancelPendingSourceChange = null;\n    this.reset();\n    this.url = url;\n    this._currentGLTF = gltf;\n    if (gltf != null) {\n      this._model = gltf.scene;\n      this.target.add(gltf.scene);\n    }\n    const {\n      animations\n    } = gltf;\n    const animationsByName = new Map();\n    const animationNames = [];\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n    await this.setupScene();\n  }\n  async setupScene() {\n    this.applyTransform();\n    this.updateBoundingBox();\n    await this.updateFraming();\n    this.updateShadow();\n    this.setShadowIntensity(this.shadowIntensity);\n    this.setGroundedSkybox();\n  }\n  reset() {\n    this.url = null;\n    this.renderCount = 0;\n    this.queueRender();\n    if (this.shadow != null) {\n      this.shadow.setIntensity(0);\n    }\n    this.bakedShadows.clear();\n    const {\n      _model\n    } = this;\n    if (_model != null) {\n      _model.removeFromParent();\n      this._model = null;\n    }\n    const gltf = this._currentGLTF;\n    if (gltf != null) {\n      gltf.dispose();\n      this._currentGLTF = null;\n    }\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n  dispose() {\n    this.reset();\n    if (this.shadow != null) {\n      this.shadow.dispose();\n      this.shadow = null;\n    }\n    this.element[$currentGLTF] = null;\n    this.element[$originalGltfJson] = null;\n    this.element[$model] = null;\n  }\n  get currentGLTF() {\n    return this._currentGLTF;\n  }\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width, height) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n    this.annotationRenderer.setSize(width, height);\n    this.aspect = this.width / this.height;\n    if (this.externalRenderer != null) {\n      const dpr = window.devicePixelRatio;\n      this.externalRenderer.resize(width * dpr, height * dpr);\n    }\n    this.queueRender();\n  }\n  markBakedShadow(mesh) {\n    mesh.userData.noHit = true;\n    this.bakedShadows.add(mesh);\n  }\n  unmarkBakedShadow(mesh) {\n    mesh.userData.noHit = false;\n    mesh.visible = true;\n    this.bakedShadows.delete(mesh);\n    this.boundingBox.expandByObject(mesh);\n  }\n  findBakedShadows(group) {\n    const boundingBox = new Box3();\n    group.traverse(object => {\n      const mesh = object;\n      if (!mesh.material) {\n        return;\n      }\n      const material = mesh.material;\n      if (!material.transparent) {\n        return;\n      }\n      boundingBox.setFromObject(mesh);\n      const size = boundingBox.getSize(vector3);\n      const minDim = Math.min(size.x, size.y, size.z);\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim < MIN_SHADOW_RATIO * minDim) {\n        return;\n      }\n      this.markBakedShadow(mesh);\n    });\n  }\n  checkBakedShadows() {\n    const {\n      min,\n      max\n    } = this.boundingBox;\n    const shadowBox = new Box3();\n    this.boundingBox.getSize(this.size);\n    for (const mesh of this.bakedShadows) {\n      shadowBox.setFromObject(mesh);\n      if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n        // floor shadow\n        continue;\n      }\n      if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n        // wall shadow\n        continue;\n      }\n      this.unmarkBakedShadow(mesh);\n    }\n  }\n  applyTransform() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    const orientation = parseExpressions(this.element.orientation)[0].terms;\n    const roll = normalizeUnit(orientation[0]).number;\n    const pitch = normalizeUnit(orientation[1]).number;\n    const yaw = normalizeUnit(orientation[2]).number;\n    model.quaternion.setFromEuler(new Euler(pitch, yaw, roll, 'YXZ'));\n    const scale = parseExpressions(this.element.scale)[0].terms;\n    model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n  }\n  updateBoundingBox() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.findBakedShadows(model);\n    const bound = (box, vertex) => {\n      return box.expandByPoint(vertex);\n    };\n    this.setBakedShadowVisibility(false);\n    this.boundingBox = reduceVertices(model, bound, new Box3());\n    // If there's nothing but the baked shadow, then it's not a baked shadow.\n    if (this.boundingBox.isEmpty()) {\n      this.setBakedShadowVisibility(true);\n      this.bakedShadows.forEach(mesh => this.unmarkBakedShadow(mesh));\n      this.boundingBox = reduceVertices(model, bound, new Box3());\n    }\n    this.checkBakedShadows();\n    this.setBakedShadowVisibility();\n    this.boundingBox.getSize(this.size);\n    this.target.add(model);\n  }\n  /**\n   * Calculates the boundingSphere and idealAspect that allows the 3D\n   * object to be framed tightly in a 2D window of any aspect ratio without\n   * clipping at any camera orbit. The camera's center target point can be\n   * optionally specified. If no center is specified, it defaults to the center\n   * of the bounding box, which means asymmetric models will tend to be tight on\n   * one side instead of both. Proper choice of center can correct this.\n   */\n  async updateFraming() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.setBakedShadowVisibility(false);\n    const {\n      center\n    } = this.boundingSphere;\n    this.element.requestUpdate('cameraTarget');\n    await this.element.updateComplete;\n    center.copy(this.getTarget());\n    const radiusSquared = (value, vertex) => {\n      return Math.max(value, center.distanceToSquared(vertex));\n    };\n    this.boundingSphere.radius = Math.sqrt(reduceVertices(model, radiusSquared, 0));\n    const horizontalTanFov = (value, vertex) => {\n      vertex.sub(center);\n      const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      return Math.max(value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n    };\n    this.idealAspect = reduceVertices(model, horizontalTanFov, 0) / Math.tan(this.framedFoVDeg / 2 * Math.PI / 180);\n    this.setBakedShadowVisibility();\n    this.target.add(model);\n  }\n  setBakedShadowVisibility(visible = this.shadowIntensity <= 0) {\n    for (const shadow of this.bakedShadows) {\n      shadow.visible = visible;\n    }\n  }\n  idealCameraDistance() {\n    const halfFovRad = this.framedFoVDeg / 2 * Math.PI / 180;\n    return this.boundingSphere.radius / Math.sin(halfFovRad);\n  }\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  adjustedFoV(fovDeg) {\n    const vertical = Math.tan(fovDeg / 2 * Math.PI / 180) * Math.max(1, this.idealAspect / this.aspect);\n    return 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n  getNDC(clientX, clientY) {\n    if (this.xrCamera != null) {\n      ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n    } else {\n      const rect = this.element.getBoundingClientRect();\n      ndc.set((clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n    }\n    ndc.multiplyScalar(2).subScalar(1);\n    ndc.y *= -1;\n    return ndc;\n  }\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  setEnvironmentAndSkybox(environment, skybox) {\n    if (this.element[$renderer].arRenderer.presentedScene === this) {\n      return;\n    }\n    this.environment = environment;\n    this.setBackground(skybox);\n    this.queueRender();\n  }\n  setBackground(skybox) {\n    this.groundedSkybox.map = skybox;\n    if (this.groundedSkybox.isUsable()) {\n      this.target.add(this.groundedSkybox);\n      this.background = null;\n    } else {\n      this.target.remove(this.groundedSkybox);\n      this.background = skybox;\n    }\n  }\n  farRadius() {\n    return this.boundingSphere.radius * (this.groundedSkybox.parent != null ? GROUNDED_SKYBOX_SIZE : 1);\n  }\n  setGroundedSkybox() {\n    const heightNode = parseExpressions(this.element.skyboxHeight)[0].terms[0];\n    const height = normalizeUnit(heightNode).number;\n    const radius = GROUNDED_SKYBOX_SIZE * this.boundingSphere.radius;\n    this.groundedSkybox.updateGeometry(height, radius);\n    this.groundedSkybox.position.y = height - (this.shadow ? 2 * this.shadow.gap() : 0);\n    this.setBackground(this.groundedSkybox.map);\n  }\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX, modelY, modelZ) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n  /**\n   * Set the decay time of, affects the speed of target transitions.\n   */\n  setTargetDamperDecayTime(decayMilliseconds) {\n    this.targetDamperX.setDecayTime(decayMilliseconds);\n    this.targetDamperY.setDecayTime(decayMilliseconds);\n    this.targetDamperZ.setDecayTime(decayMilliseconds);\n  }\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget() {\n    return this.goalTarget.clone().multiplyScalar(-1);\n  }\n  /**\n   * Gets the current target point, which may not equal the goal returned by\n   * getTarget() due to finite input decay smoothing.\n   */\n  getDynamicTarget() {\n    return this.target.position.clone().multiplyScalar(-1);\n  }\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta) {\n    const goal = this.goalTarget;\n    const target = this.target.position;\n    if (!goal.equals(target)) {\n      const normalization = this.boundingSphere.radius / 10;\n      let {\n        x,\n        y,\n        z\n      } = target;\n      x = this.targetDamperX.update(x, goal.x, delta, normalization);\n      y = this.targetDamperY.update(y, goal.y, delta, normalization);\n      z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n      this.groundedSkybox.position.x = -x;\n      this.groundedSkybox.position.z = -z;\n      this.target.position.set(x, y, z);\n      this.target.updateMatrixWorld();\n      this.queueRender();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX, worldZ) {\n    const {\n      x,\n      z\n    } = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n  get model() {\n    return this._model;\n  }\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY) {\n    this.pivot.rotation.y = radiansY;\n    this.groundedSkybox.rotation.y = -radiansY;\n    this.queueRender();\n  }\n  get yaw() {\n    return this.pivot.rotation.y;\n  }\n  set animationTime(value) {\n    this.mixer.setTime(value);\n    this.queueShadowRender();\n  }\n  get animationTime() {\n    if (this.currentAnimationAction != null) {\n      const loopCount = Math.max(this.currentAnimationAction._loopCount, 0);\n      if (this.currentAnimationAction.loop === LoopPingPong && (loopCount & 1) === 1) {\n        return this.duration - this.currentAnimationAction.time;\n      } else {\n        return this.currentAnimationAction.time;\n      }\n    }\n    return 0;\n  }\n  set animationTimeScale(value) {\n    this.mixer.timeScale = value;\n  }\n  get animationTimeScale() {\n    return this.mixer.timeScale;\n  }\n  get duration() {\n    if (this.currentAnimationAction != null && this.currentAnimationAction.getClip()) {\n      return this.currentAnimationAction.getClip().duration;\n    }\n    return 0;\n  }\n  get hasActiveAnimation() {\n    return this.currentAnimationAction != null;\n  }\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n  playAnimation(name = null, crossfadeTime = 0, loopMode = LoopRepeat, repetitionCount = Infinity) {\n    if (this._currentGLTF == null) {\n      return;\n    }\n    const {\n      animations\n    } = this;\n    if (animations == null || animations.length === 0) {\n      return;\n    }\n    let animationClip = null;\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n      if (animationClip == null) {\n        const parsedAnimationIndex = parseInt(name);\n        if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 && parsedAnimationIndex < animations.length) {\n          animationClip = animations[parsedAnimationIndex];\n        }\n      }\n    }\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n    try {\n      const {\n        currentAnimationAction: lastAnimationAction\n      } = this;\n      const action = this.mixer.clipAction(animationClip, this);\n      this.currentAnimationAction = action;\n      if (this.element.paused) {\n        this.mixer.stopAllAction();\n      } else {\n        action.paused = false;\n        if (lastAnimationAction != null && action !== lastAnimationAction) {\n          action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n        } else if (this.animationTimeScale > 0 && this.animationTime == this.duration) {\n          // This is a workaround for what I believe is a three.js bug.\n          this.animationTime = 0;\n        }\n      }\n      action.setLoop(loopMode, repetitionCount);\n      action.enabled = true;\n      action.clampWhenFinished = true;\n      action.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  stopAnimation() {\n    this.currentAnimationAction = null;\n    this.mixer.stopAllAction();\n  }\n  updateAnimation(step) {\n    this.mixer.update(step);\n    this.queueShadowRender();\n  }\n  subscribeMixerEvent(event, callback) {\n    this.mixer.addEventListener(event, callback);\n  }\n  /**\n   * Call if the object has been changed in such a way that the shadow's shape\n   * has changed (not a rotation about the Y axis).\n   */\n  updateShadow() {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      shadow.setScene(this, this.shadowSoftness, side);\n      shadow.needsUpdate = true;\n    }\n  }\n  renderShadow(renderer) {\n    const shadow = this.shadow;\n    if (shadow != null && shadow.needsUpdate == true) {\n      shadow.render(renderer, this);\n      shadow.needsUpdate = false;\n    }\n  }\n  queueShadowRender() {\n    if (this.shadow != null) {\n      this.shadow.needsUpdate = true;\n    }\n  }\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity) {\n    this.shadowIntensity = shadowIntensity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    this.setBakedShadowVisibility();\n    if (shadowIntensity <= 0 && this.shadow == null) {\n      return;\n    }\n    if (this.shadow == null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      this.shadow = new Shadow(this, this.shadowSoftness, side);\n    }\n    this.shadow.setIntensity(shadowIntensity);\n  }\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness) {\n    this.shadowSoftness = softness;\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setSoftness(softness);\n    }\n  }\n  /**\n   * Shift the floor vertically from the bottom of the model's bounding box by\n   * offset (should generally be negative).\n   */\n  setShadowOffset(offset) {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setOffset(offset);\n    }\n  }\n  getHit(object = this) {\n    const hits = raycaster.intersectObject(object, true);\n    return hits.find(hit => hit.object.visible && !hit.object.userData.noHit);\n  }\n  hitFromController(controller, object = this) {\n    raycaster.setFromXRController(controller);\n    return this.getHit(object);\n  }\n  hitFromPoint(ndcPosition, object = this) {\n    raycaster.setFromCamera(ndcPosition, this.getCamera());\n    return this.getHit(object);\n  }\n  /**\n   * This method returns the world position, model-space normal and texture\n   * coordinate of the point on the mesh corresponding to the input pixel\n   * coordinates given relative to the model-viewer element. If the mesh\n   * is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(ndcPosition, object = this) {\n    var _a;\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null) {\n      return null;\n    }\n    const position = hit.point;\n    const normal = hit.face != null ? hit.face.normal.clone().applyNormalMatrix(new Matrix3().getNormalMatrix(hit.object.matrixWorld)) : raycaster.ray.direction.clone().multiplyScalar(-1);\n    const uv = (_a = hit.uv) !== null && _a !== void 0 ? _a : null;\n    return {\n      position,\n      normal,\n      uv\n    };\n  }\n  /**\n   * This method returns a dynamic hotspot ID string of the point on the mesh\n   * corresponding to the input pixel coordinates given relative to the\n   * model-viewer element. The ID string can be used in the data-surface\n   * attribute of the hotspot to make it follow this point on the surface even\n   * as the model animates. If the mesh is not hit, the result is null.\n   */\n  surfaceFromPoint(ndcPosition, object = this) {\n    const model = this.element.model;\n    if (model == null) {\n      return null;\n    }\n    const hit = this.hitFromPoint(ndcPosition, object);\n    if (hit == null || hit.face == null) {\n      return null;\n    }\n    const node = model[$nodeFromPoint](hit);\n    const {\n      meshes,\n      primitives\n    } = node.mesh.userData.associations;\n    const va = new Vector3();\n    const vb = new Vector3();\n    const vc = new Vector3();\n    const {\n      a,\n      b,\n      c\n    } = hit.face;\n    const mesh = hit.object;\n    mesh.getVertexPosition(a, va);\n    mesh.getVertexPosition(b, vb);\n    mesh.getVertexPosition(c, vc);\n    const tri = new Triangle(va, vb, vc);\n    const uvw = new Vector3();\n    tri.getBarycoord(mesh.worldToLocal(hit.point), uvw);\n    return `${meshes} ${primitives} ${a} ${b} ${c} ${uvw.x.toFixed(3)} ${uvw.y.toFixed(3)} ${uvw.z.toFixed(3)}`;\n  }\n  /**\n   * The following methods are for operating on the set of Hotspot objects\n   * attached to the scene. These come from DOM elements, provided to slots by\n   * the Annotation Mixin.\n   */\n  addHotspot(hotspot) {\n    this.target.add(hotspot);\n    // This happens automatically in render(), but we do it early so that\n    // the slots appear in the shadow DOM and the elements get attached,\n    // allowing us to dispatch events on them.\n    this.annotationRenderer.domElement.appendChild(hotspot.element);\n    this.updateSurfaceHotspot(hotspot);\n  }\n  removeHotspot(hotspot) {\n    this.target.remove(hotspot);\n  }\n  /**\n   * Helper method to apply a function to all hotspots.\n   */\n  forHotspots(func) {\n    const {\n      children\n    } = this.target;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const hotspot = children[i];\n      if (hotspot instanceof Hotspot) {\n        func(hotspot);\n      }\n    }\n  }\n  /**\n   * Lazy initializer for surface hotspots - will only run once.\n   */\n  updateSurfaceHotspot(hotspot) {\n    if (hotspot.surface == null || this.element.model == null) {\n      return;\n    }\n    const nodes = parseExpressions(hotspot.surface)[0].terms;\n    if (nodes.length != 8) {\n      console.warn(hotspot.surface + ' does not have exactly 8 numbers.');\n      return;\n    }\n    const primitiveNode = this.element.model[$nodeFromIndex](nodes[0].number, nodes[1].number);\n    if (primitiveNode == null) {\n      console.warn(hotspot.surface + ' does not match a node/primitive in this glTF! Skipping this hotspot.');\n      return;\n    }\n    const numVert = primitiveNode.mesh.geometry.attributes.position.count;\n    const tri = new Vector3(nodes[2].number, nodes[3].number, nodes[4].number);\n    if (tri.x >= numVert || tri.y >= numVert || tri.z >= numVert) {\n      console.warn(hotspot.surface + ' vertex indices out of range in this glTF! Skipping this hotspot.');\n      return;\n    }\n    const bary = new Vector3(nodes[5].number, nodes[6].number, nodes[7].number);\n    hotspot.mesh = primitiveNode.mesh;\n    hotspot.tri = tri;\n    hotspot.bary = bary;\n    hotspot.updateSurface();\n  }\n  /**\n   * Update positions of surface hotspots to follow model animation.\n   */\n  animateSurfaceHotspots() {\n    if (this.element.paused) {\n      return;\n    }\n    this.forHotspots(hotspot => {\n      hotspot.updateSurface();\n    });\n  }\n  /**\n   * Update the CSS visibility of the hotspots based on whether their normals\n   * point toward the camera.\n   */\n  updateHotspotsVisibility(viewerPosition) {\n    this.forHotspots(hotspot => {\n      view.copy(viewerPosition);\n      target.setFromMatrixPosition(hotspot.matrixWorld);\n      view.sub(target);\n      normalWorld.copy(hotspot.normal).transformDirection(this.target.matrixWorld);\n      if (view.dot(normalWorld) < 0) {\n        hotspot.hide();\n      } else {\n        hotspot.show();\n      }\n    });\n  }\n  /**\n   * Rotate all hotspots to an absolute orientation given by the input number of\n   * radians. Zero returns them to upright.\n   */\n  orientHotspots(radians) {\n    this.forHotspots(hotspot => {\n      hotspot.orient(radians);\n    });\n  }\n  /**\n   * Set the rendering visibility of all hotspots. This is used to hide them\n   * during transitions and such.\n   */\n  setHotspotsVisibility(visible) {\n    this.forHotspots(hotspot => {\n      hotspot.visible = visible;\n    });\n  }\n  updateSchema(src) {\n    var _a;\n    const {\n      schemaElement,\n      element\n    } = this;\n    const {\n      alt,\n      poster,\n      iosSrc\n    } = element;\n    if (src != null) {\n      const encoding = [{\n        '@type': 'MediaObject',\n        contentUrl: src,\n        encodingFormat: ((_a = src.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'gltf' ? 'model/gltf+json' : 'model/gltf-binary'\n      }];\n      if (iosSrc) {\n        encoding.push({\n          '@type': 'MediaObject',\n          contentUrl: iosSrc,\n          encodingFormat: 'model/vnd.usdz+zip'\n        });\n      }\n      const structuredData = {\n        '@context': 'http://schema.org/',\n        '@type': '3DModel',\n        image: poster !== null && poster !== void 0 ? poster : undefined,\n        name: alt !== null && alt !== void 0 ? alt : undefined,\n        encoding\n      };\n      schemaElement.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(schemaElement);\n    } else if (schemaElement.parentElement != null) {\n      schemaElement.parentElement.removeChild(schemaElement);\n    }\n  }\n}\n//# sourceMappingURL=ModelScene.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}