{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { format } from 'web3-utils';\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { decodeLog } from 'web3-eth-abi';\nimport { logSchema } from '../schemas.js';\nimport { ALL_EVENTS } from '../constants.js';\nexport const decodeEventABI = (event, data, jsonInterface, returnFormat = DEFAULT_RETURN_FORMAT) => {\n  var _a, _b, _c, _d, _e, _f;\n  let modifiedEvent = Object.assign({}, event);\n  const result = format(logSchema, data, returnFormat);\n  // if allEvents get the right event\n  if ([ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {\n    const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);\n    if (matchedEvent) {\n      modifiedEvent = matchedEvent;\n    } else {\n      modifiedEvent = {\n        anonymous: true\n      };\n    }\n  }\n  // create empty inputs if none are present (e.g. anonymous events on allEvents)\n  modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : [];\n  // Handle case where an event signature shadows the current ABI with non-identical\n  // arg indexing. If # of topics doesn't match, event is anon.\n  if (!modifiedEvent.anonymous) {\n    let indexedInputs = 0;\n    ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach(input => {\n      if (input.indexed) {\n        indexedInputs += 1;\n      }\n    });\n    if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {\n      // checks if event is anonymous\n      modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), {\n        anonymous: true,\n        inputs: []\n      });\n    }\n  }\n  const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);\n  return Object.assign(Object.assign({}, result), {\n    returnValues: decodeLog([...((_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : [])], data.data, argTopics),\n    event: modifiedEvent.name,\n    signature: !modifiedEvent.anonymous && ((_f = data.topics) === null || _f === void 0 ? void 0 : _f.length) > 0 && data.topics[0] ? data.topics[0] : undefined,\n    raw: {\n      data: data.data,\n      topics: data.topics\n    }\n  });\n};\n//# sourceMappingURL=decoding.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}