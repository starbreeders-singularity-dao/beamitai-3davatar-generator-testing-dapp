{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  _s();\n  const [isMinting, setIsMinting] = useState(false);\n  const mintNFT = async () => {\n    try {\n      setIsMinting(true);\n\n      // Connect to MetaMask\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Create contract instance\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // For testing, let's just mint with dummy data\n      const tx = await contract.mint(await signer.getAddress(), \"test-uri\", \"original-token-id\", 1 // chainId\n      );\n      await tx.wait();\n      alert('NFT Minted Successfully!');\n    } catch (error) {\n      console.error('Minting error:', error);\n      alert('Failed to mint NFT');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: mintNFT,\n    disabled: isMinting,\n    className: \"mint-button\",\n    children: isMinting ? 'Minting...' : 'Mint NFT'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTMinter, \"joId2EiQDCFhrJf1KnPBwxLsB9s=\");\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["useState","ethers","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","_s","isMinting","setIsMinting","mintNFT","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","tx","mint","getAddress","wait","alert","error","console","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const [isMinting, setIsMinting] = useState(false);\n    \n    const mintNFT = async () => {\n        try {\n            setIsMinting(true);\n            \n            // Connect to MetaMask\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            \n            // Create contract instance\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n            \n            // For testing, let's just mint with dummy data\n            const tx = await contract.mint(\n                await signer.getAddress(),\n                \"test-uri\",\n                \"original-token-id\",\n                1  // chainId\n            );\n            \n            await tx.wait();\n            alert('NFT Minted Successfully!');\n            \n        } catch (error) {\n            console.error('Minting error:', error);\n            alert('Failed to mint NFT');\n        } finally {\n            setIsMinting(false);\n        }\n    };\n    \n    return (\n        <button \n            onClick={mintNFT} \n            disabled={isMinting}\n            className=\"mint-button\"\n        >\n            {isMinting ? 'Minting...' : 'Mint NFT'}\n        </button>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,SAAS,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMY,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI;MACAD,YAAY,CAAC,IAAI,CAAC;;MAElB;MACA,MAAME,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,CAAC,CAAC;;MAEnC;MACA,MAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACoB,QAAQ,CAChCnB,gBAAgB,EAChBC,YAAY,EACZe,MACJ,CAAC;;MAED;MACA,MAAMI,EAAE,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAC1B,MAAML,MAAM,CAACM,UAAU,CAAC,CAAC,EACzB,UAAU,EACV,mBAAmB,EACnB,CAAC,CAAE;MACP,CAAC;MAED,MAAMF,EAAE,CAACG,IAAI,CAAC,CAAC;MACfC,KAAK,CAAC,0BAA0B,CAAC;IAErC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCD,KAAK,CAAC,oBAAoB,CAAC;IAC/B,CAAC,SAAS;MACNf,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACIN,OAAA;IACIwB,OAAO,EAAEjB,OAAQ;IACjBkB,QAAQ,EAAEpB,SAAU;IACpBqB,SAAS,EAAC,aAAa;IAAAC,QAAA,EAEtBtB,SAAS,GAAG,YAAY,GAAG;EAAU;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEjB,CAAC;AAAC3B,EAAA,CA9CIH,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AAgDf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}