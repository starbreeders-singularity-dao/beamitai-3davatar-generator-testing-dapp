{"ast":null,"code":"import { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nfunction raycast_indirect(bvh, root, side, ray, intersects, near, far) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  _raycast(0, bvh, side, ray, intersects, near, far);\n  BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects, near, far) {\n  const {\n    float32Array,\n    uint16Array,\n    uint32Array\n  } = BufferStack;\n  const nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris_indirect(bvh, side, ray, offset, count, intersects, near, far);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n    if (intersectRay(leftIndex, float32Array, ray, near, far)) {\n      _raycast(leftIndex, bvh, side, ray, intersects, near, far);\n    }\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n    if (intersectRay(rightIndex, float32Array, ray, near, far)) {\n      _raycast(rightIndex, bvh, side, ray, intersects, near, far);\n    }\n  }\n}\nexport { raycast_indirect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}