{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { transactionReceiptSchema } from '../schemas.js';\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nexport const watchTransactionByPolling = ({\n  web3Context,\n  transactionReceipt,\n  transactionPromiEvent,\n  customTransactionReceiptSchema,\n  returnFormat\n}) => {\n  var _a;\n  // Having a transactionReceipt means that the transaction has already been included\n  // in at least one block, so we start with 1\n  let confirmations = 1;\n  const intervalId = setInterval(() => {\n    (() => __awaiter(void 0, void 0, void 0, function* () {\n      if (confirmations >= web3Context.transactionConfirmationBlocks) {\n        clearInterval(intervalId);\n        return;\n      }\n      const nextBlock = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, numberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);\n      if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {\n        confirmations += 1;\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: format({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: format({\n            format: 'bytes32'\n          }, nextBlock.hash, returnFormat)\n        });\n      }\n    }))();\n  }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);\n};\n//# sourceMappingURL=watch_transaction_by_polling.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}