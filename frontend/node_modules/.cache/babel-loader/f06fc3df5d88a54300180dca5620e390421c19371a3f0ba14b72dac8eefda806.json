{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { validator } from 'web3-validator';\nexport function getProtocolVersion(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_protocolVersion',\n      params: []\n    });\n  });\n}\nexport function getSyncing(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_syncing',\n      params: []\n    });\n  });\n}\nexport function getCoinbase(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_coinbase',\n      params: []\n    });\n  });\n}\nexport function getMining(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_mining',\n      params: []\n    });\n  });\n}\nexport function getHashRate(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_hashrate',\n      params: []\n    });\n  });\n}\nexport function getGasPrice(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_gasPrice',\n      params: []\n    });\n  });\n}\nexport function getMaxPriorityFeePerGas(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_maxPriorityFeePerGas',\n      params: []\n    });\n  });\n}\nexport function getAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_accounts',\n      params: []\n    });\n  });\n}\nexport function getBlockNumber(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_blockNumber',\n      params: []\n    });\n  });\n}\nexport function getBalance(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBalance',\n      params: [address, blockNumber]\n    });\n  });\n}\nexport function getStorageAt(requestManager, address, storageSlot, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getStorageAt',\n      params: [address, storageSlot, blockNumber]\n    });\n  });\n}\nexport function getTransactionCount(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getTransactionCount',\n      params: [address, blockNumber]\n    });\n  });\n}\nexport function getBlockTransactionCountByHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash]\n    });\n  });\n}\nexport function getBlockTransactionCountByNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumber]\n    });\n  });\n}\nexport function getUncleCountByBlockHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockHash',\n      params: [blockHash]\n    });\n  });\n}\nexport function getUncleCountByBlockNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockNumber',\n      params: [blockNumber]\n    });\n  });\n}\nexport function getCode(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getCode',\n      params: [address, blockNumber]\n    });\n  });\n}\nexport function sign(requestManager, address, message) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'hex'], [address, message]);\n    return requestManager.send({\n      method: 'eth_sign',\n      params: [address, message]\n    });\n  });\n}\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport function signTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_signTransaction',\n      params: [transaction]\n    });\n  });\n}\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport function sendTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_sendTransaction',\n      params: [transaction]\n    });\n  });\n}\nexport function sendRawTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['hex'], [transaction]);\n    return requestManager.send({\n      method: 'eth_sendRawTransaction',\n      params: [transaction]\n    });\n  });\n}\n// TODO - validate transaction\nexport function call(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // validateTransactionCall(transaction);\n    validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_call',\n      params: [transaction, blockNumber]\n    });\n  });\n}\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nexport function estimateGas(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_estimateGas',\n      params: [transaction, blockNumber]\n    });\n  });\n}\nexport function getBlockByHash(requestManager, blockHash, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, hydrated]\n    });\n  });\n}\nexport function getBlockByNumber(requestManager, blockNumber, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumber, hydrated]\n    });\n  });\n}\nexport function getTransactionByHash(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionByHash',\n      params: [transactionHash]\n    });\n  });\n}\nexport function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, transactionIndex]\n    });\n  });\n}\nexport function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumber, transactionIndex]\n    });\n  });\n}\nexport function getTransactionReceipt(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionReceipt',\n      params: [transactionHash]\n    });\n  });\n}\nexport function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockHashAndIndex',\n      params: [blockHash, uncleIndex]\n    });\n  });\n}\nexport function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockNumberAndIndex',\n      params: [blockNumber, uncleIndex]\n    });\n  });\n}\nexport function getCompilers(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getCompilers',\n      params: []\n    });\n  });\n}\nexport function compileSolidity(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSolidity',\n      params: [code]\n    });\n  });\n}\nexport function compileLLL(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileLLL',\n      params: [code]\n    });\n  });\n}\nexport function compileSerpent(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSerpent',\n      params: [code]\n    });\n  });\n}\nexport function newFilter(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_newFilter',\n      params: [filter]\n    });\n  });\n}\nexport function newBlockFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newBlockFilter',\n      params: []\n    });\n  });\n}\nexport function newPendingTransactionFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newPendingTransactionFilter',\n      params: []\n    });\n  });\n}\nexport function uninstallFilter(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_uninstallFilter',\n      params: [filterIdentifier]\n    });\n  });\n}\nexport function getFilterChanges(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterChanges',\n      params: [filterIdentifier]\n    });\n  });\n}\nexport function getFilterLogs(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterLogs',\n      params: [filterIdentifier]\n    });\n  });\n}\nexport function getLogs(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_getLogs',\n      params: [filter]\n    });\n  });\n}\nexport function getWork(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getWork',\n      params: []\n    });\n  });\n}\nexport function submitWork(requestManager, nonce, hash, digest) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n    return requestManager.send({\n      method: 'eth_submitWork',\n      params: [nonce, hash, digest]\n    });\n  });\n}\nexport function submitHashrate(requestManager, hashRate, id) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n    return requestManager.send({\n      method: 'eth_submitHashrate',\n      params: [hashRate, id]\n    });\n  });\n}\nexport function getFeeHistory(requestManager, blockCount, newestBlock, rewardPercentiles) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n    for (const rewardPercentile of rewardPercentiles) {\n      validator.validate(['number'], [rewardPercentile]);\n    }\n    return requestManager.send({\n      method: 'eth_feeHistory',\n      params: [blockCount, newestBlock, rewardPercentiles]\n    });\n  });\n}\nexport function getPendingTransactions(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_pendingTransactions',\n      params: []\n    });\n  });\n}\nexport function requestAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_requestAccounts',\n      params: []\n    });\n  });\n}\nexport function getChainId(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_chainId',\n      params: []\n    });\n  });\n}\nexport function getProof(requestManager, address, storageKeys, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['address', 'bytes32[]', 'blockNumberOrTag'], [address, storageKeys, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getProof',\n      params: [address, storageKeys, blockNumber]\n    });\n  });\n}\nexport function getNodeInfo(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'web3_clientVersion',\n      params: []\n    });\n  });\n}\nexport function createAccessList(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_createAccessList',\n      params: [transaction, blockNumber]\n    });\n  });\n}\nexport function signTypedData(requestManager, address, typedData, useLegacy = false) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // TODO Add validation for typedData\n    validator.validate(['address'], [address]);\n    return requestManager.send({\n      method: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n      params: [address, typedData]\n    });\n  });\n}\n//# sourceMappingURL=eth_rpc_methods.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}