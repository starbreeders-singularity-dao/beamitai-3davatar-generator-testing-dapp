{"ast":null,"code":"/**\n * NFT.Storage Upload Handler with proper collection management\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://preserve.nft.storage/api/v1';\n\n// Debug logging\nconsole.log('NFT Storage Key Details:', {\n  exists: !!NFT_STORAGE_KEY,\n  length: NFT_STORAGE_KEY === null || NFT_STORAGE_KEY === void 0 ? void 0 : NFT_STORAGE_KEY.length,\n  firstChars: NFT_STORAGE_KEY === null || NFT_STORAGE_KEY === void 0 ? void 0 : NFT_STORAGE_KEY.substring(0, 5)\n});\nif (!(NFT_STORAGE_KEY !== null && NFT_STORAGE_KEY !== void 0 && NFT_STORAGE_KEY.trim())) {\n  throw new Error('NFT.Storage API key is required');\n}\n\n/**\n * Creates a new collection\n */\nconst createNewCollection = async () => {\n  console.log('Creating new collection...');\n  const initialCsv = 'tokenID,cid\\n1,placeholder';\n  const csvFile = new Blob([initialCsv], {\n    type: 'text/csv'\n  });\n  const formData = new FormData();\n  formData.append('file', csvFile, 'initial.csv');\n  formData.append('collectionName', 'BeamitAIAvatars');\n  formData.append('contractAddress', 'undefined');\n  formData.append('chainID', '80002');\n  formData.append('network', 'polygon');\n  const response = await fetch(`${API_BASE}/collection/create_collection`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    console.error('Collection creation failed:', error);\n    throw new Error(`Failed to create collection: ${JSON.stringify(error)}`);\n  }\n  const data = await response.json();\n  console.log('Collection created:', data);\n  return data.collectionID;\n};\n\n/**\n * Ensures we have a valid collection\n */\nconst ensureCollection = async () => {\n  try {\n    let collectionId = localStorage.getItem('beamitCollectionId');\n    if (!collectionId) {\n      collectionId = await createNewCollection();\n      localStorage.setItem('beamitCollectionId', collectionId);\n    }\n    console.log('Using collection ID:', collectionId);\n    return collectionId;\n  } catch (error) {\n    console.error('Collection setup failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Uploads content to IPFS\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // Ensure we have a valid collection\n    const collectionId = await ensureCollection();\n    console.log('Confirmed collection ID:', collectionId);\n\n    // Fetch GLB\n    const glbResponse = await fetch(glbUrl);\n    if (!glbResponse.ok) {\n      throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n    }\n    const glbBlob = await glbResponse.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Create CSV content\n    const tokenId = Date.now().toString();\n    const csvContent = `tokenID,cid\\n${tokenId},pending_${tokenId}`;\n\n    // Prepare upload\n    const formData = new FormData();\n    formData.append('collectionID', collectionId);\n    formData.append('file', new Blob([csvContent], {\n      type: 'text/csv'\n    }), 'token.csv');\n    console.log('Uploading with collection:', {\n      id: collectionId,\n      tokenId: tokenId\n    });\n\n    // Upload to NFT.Storage\n    const uploadResponse = await fetch(`${API_BASE}/collection/add_tokens`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n        'Accept': 'application/json'\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload failed:', {\n        status: uploadResponse.status,\n        error\n      });\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const result = await uploadResponse.json();\n    console.log('Upload successful:', result);\n    return `ipfs://${result.cid || tokenId}`;\n  } catch (error) {\n    console.error('Upload process failed:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","API_BASE","console","log","exists","length","firstChars","substring","trim","Error","createNewCollection","initialCsv","csvFile","Blob","type","formData","FormData","append","response","fetch","method","headers","body","ok","error","json","JSON","stringify","data","collectionID","ensureCollection","collectionId","localStorage","getItem","setItem","uploadToIPFS","glbUrl","originalNFT","glbResponse","status","glbBlob","blob","size","tokenId","Date","now","toString","csvContent","id","uploadResponse","result","cid","name","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["/**\n * NFT.Storage Upload Handler with proper collection management\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://preserve.nft.storage/api/v1';\n\n// Debug logging\nconsole.log('NFT Storage Key Details:', {\n    exists: !!NFT_STORAGE_KEY,\n    length: NFT_STORAGE_KEY?.length,\n    firstChars: NFT_STORAGE_KEY?.substring(0, 5)\n});\n\nif (!NFT_STORAGE_KEY?.trim()) {\n    throw new Error('NFT.Storage API key is required');\n}\n\n/**\n * Creates a new collection\n */\nconst createNewCollection = async () => {\n    console.log('Creating new collection...');\n    \n    const initialCsv = 'tokenID,cid\\n1,placeholder';\n    const csvFile = new Blob([initialCsv], { type: 'text/csv' });\n    \n    const formData = new FormData();\n    formData.append('file', csvFile, 'initial.csv');\n    formData.append('collectionName', 'BeamitAIAvatars');\n    formData.append('contractAddress', 'undefined');\n    formData.append('chainID', '80002');\n    formData.append('network', 'polygon');\n\n    const response = await fetch(`${API_BASE}/collection/create_collection`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`\n        },\n        body: formData\n    });\n\n    if (!response.ok) {\n        const error = await response.json();\n        console.error('Collection creation failed:', error);\n        throw new Error(`Failed to create collection: ${JSON.stringify(error)}`);\n    }\n\n    const data = await response.json();\n    console.log('Collection created:', data);\n    return data.collectionID;\n};\n\n/**\n * Ensures we have a valid collection\n */\nconst ensureCollection = async () => {\n    try {\n        let collectionId = localStorage.getItem('beamitCollectionId');\n        \n        if (!collectionId) {\n            collectionId = await createNewCollection();\n            localStorage.setItem('beamitCollectionId', collectionId);\n        }\n\n        console.log('Using collection ID:', collectionId);\n        return collectionId;\n    } catch (error) {\n        console.error('Collection setup failed:', error);\n        throw error;\n    }\n};\n\n/**\n * Uploads content to IPFS\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // Ensure we have a valid collection\n        const collectionId = await ensureCollection();\n        console.log('Confirmed collection ID:', collectionId);\n\n        // Fetch GLB\n        const glbResponse = await fetch(glbUrl);\n        if (!glbResponse.ok) {\n            throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n        }\n        \n        const glbBlob = await glbResponse.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Create CSV content\n        const tokenId = Date.now().toString();\n        const csvContent = `tokenID,cid\\n${tokenId},pending_${tokenId}`;\n        \n        // Prepare upload\n        const formData = new FormData();\n        formData.append('collectionID', collectionId);\n        formData.append('file', new Blob([csvContent], { type: 'text/csv' }), 'token.csv');\n\n        console.log('Uploading with collection:', {\n            id: collectionId,\n            tokenId: tokenId\n        });\n\n        // Upload to NFT.Storage\n        const uploadResponse = await fetch(`${API_BASE}/collection/add_tokens`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n                'Accept': 'application/json'\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload failed:', {\n                status: uploadResponse.status,\n                error\n            });\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const result = await uploadResponse.json();\n        console.log('Upload successful:', result);\n\n        return `ipfs://${result.cid || tokenId}`;\n\n    } catch (error) {\n        console.error('Upload process failed:', {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        });\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}