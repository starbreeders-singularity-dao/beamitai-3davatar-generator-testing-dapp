{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  _s();\n  const [isMinting, setIsMinting] = useState(false);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n  const mintNFT = async () => {\n    try {\n      setIsMinting(true);\n      setError(null);\n      setStatus('Preparing for minting...');\n\n      // Upload to IPFS\n      setStatus('Uploading to IPFS...');\n      const tokenUri = await uploadToIPFS(glbUrl, originalNFT);\n      console.log('IPFS Upload complete:', tokenUri);\n      setStatus('Connecting to wallet...');\n      const provider = new BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      setStatus('Creating contract instance...');\n      const contract = new Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      setStatus('Minting NFT...');\n      const tx = await contract.mint(await signer.getAddress(), tokenUri, (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.tokenId) || \"test-token\", (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.chainId) || 80002);\n      setStatus('Confirming transaction...');\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt);\n      setStatus('Success!');\n      alert('NFT Minted Successfully! Transaction: ' + tx.hash);\n    } catch (error) {\n      console.error('Minting error:', error);\n      setError(error.message || 'Unknown error occurred');\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      disabled: isMinting,\n      style: {\n        padding: '10px 20px',\n        fontSize: '16px',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: isMinting ? 'not-allowed' : 'pointer',\n        opacity: isMinting ? 0.7 : 1\n      },\n      children: isMinting ? status : 'Mint NFT'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        color: 'red',\n        padding: '10px',\n        border: '1px solid red',\n        borderRadius: '4px'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTMinter, \"bNJDh4rmSXy8GhrT0eoLy9KSD7c=\");\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["useState","BrowserProvider","Contract","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","_s","isMinting","setIsMinting","error","setError","status","setStatus","mintNFT","tokenUri","console","log","provider","window","ethereum","signer","getSigner","contract","tx","mint","getAddress","tokenId","chainId","receipt","wait","alert","hash","message","children","onClick","disabled","style","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","opacity","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const [isMinting, setIsMinting] = useState(false);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState('');\n    \n    const mintNFT = async () => {\n        try {\n            setIsMinting(true);\n            setError(null);\n            setStatus('Preparing for minting...');\n            \n            // Upload to IPFS\n            setStatus('Uploading to IPFS...');\n            const tokenUri = await uploadToIPFS(glbUrl, originalNFT);\n            console.log('IPFS Upload complete:', tokenUri);\n            \n            setStatus('Connecting to wallet...');\n            const provider = new BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            \n            setStatus('Creating contract instance...');\n            const contract = new Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n            \n            setStatus('Minting NFT...');\n            const tx = await contract.mint(\n                await signer.getAddress(),\n                tokenUri,\n                originalNFT?.tokenId || \"test-token\",\n                originalNFT?.chainId || 80002\n            );\n            \n            setStatus('Confirming transaction...');\n            const receipt = await tx.wait();\n            console.log('Transaction confirmed:', receipt);\n            \n            setStatus('Success!');\n            alert('NFT Minted Successfully! Transaction: ' + tx.hash);\n            \n        } catch (error) {\n            console.error('Minting error:', error);\n            setError(error.message || 'Unknown error occurred');\n        } finally {\n            setIsMinting(false);\n        }\n    };\n    \n    return (\n        <div>\n            <button \n                onClick={mintNFT} \n                disabled={isMinting}\n                style={{\n                    padding: '10px 20px',\n                    fontSize: '16px',\n                    backgroundColor: '#4CAF50',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: isMinting ? 'not-allowed' : 'pointer',\n                    opacity: isMinting ? 0.7 : 1\n                }}\n            >\n                {isMinting ? status : 'Mint NFT'}\n            </button>\n            \n            {error && (\n                <div style={{\n                    marginTop: '10px',\n                    color: 'red',\n                    padding: '10px',\n                    border: '1px solid red',\n                    borderRadius: '4px'\n                }}>\n                    Error: {error}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}