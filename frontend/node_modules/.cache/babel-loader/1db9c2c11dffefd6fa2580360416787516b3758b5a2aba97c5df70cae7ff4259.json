{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport RenderResults from './components/RenderResults';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [fileName, setFileName] = useState('');\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [status, setStatus] = useState('Not connected');\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        setStatus('Connected');\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const balance = await provider.getBalance(accounts[0]);\n        console.log('ETH Balance:', ethers.formatEther(balance));\n\n        // Fetch NFTs\n        await fetchNFTs(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n        setStatus('Connection failed');\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n    setStatus('Not connected');\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      console.log('Using OpenSea API Key:', apiKey);\n      const chain = 'ethereum'; // or 'polygon', 'binance', etc., depending on the blockchain\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('OpenSea API Response:', data);\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', {\n        type: blob.type\n      });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([data.imagePath]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n\n      // Fetch the latest video URL after upload\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/get-latest-video`);\n      const data = await response.json();\n      if (response.ok && data.videoPath) {\n        setVideoUrl(data.videoPath);\n        setFileName(data.videoName);\n      } else {\n        console.error('Error fetching video:', data);\n      }\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [account ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery\",\n        children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.image_url,\n            alt: nft.name,\n            style: {\n              width: '200px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: nft.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleCreateAvatar(nft.image_url),\n            children: \"Choose PFP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please connect your MetaMask wallet to view your NFTs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), videoUrl ? /*#__PURE__*/_jsxDEV(RenderResults, {\n        videoUrl: videoUrl,\n        fileName: fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(AvatarSelection, {\n          selectedNFT: selectedNFT,\n          handleGenerateImages: handleGenerateImages,\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n          generatedImages: generatedImages,\n          localImages: localImages,\n          handleCreateAvatar: handleCreateAvatar,\n          handleBeamit: handleBeamit,\n          uploadStatus: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hRw2+E9Hfrd2nRi2hnMb4sGdO4Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","AvatarSelection","ImageGallery","RenderResults","fetchLocalImages","generateImages","uploadImageToCloud","logo","jsxDEV","_jsxDEV","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","generatedImages","setGeneratedImages","localImages","setLocalImages","loading","setLoading","pfpFile","setPfpFile","uploadStatus","setUploadStatus","videoUrl","setVideoUrl","fileName","setFileName","account","setAccount","nfts","setNfts","status","setStatus","fetchNFTs","connectWallet","window","ethereum","accounts","request","method","provider","BrowserProvider","balance","getBalance","formatEther","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","data","json","handleCreateAvatar","imageUrl","res","blob","file","File","type","handleGenerateImages","imagePath","message","handleBeamit","length","fullBodyImage","split","pop","videoPath","videoName","className","children","src","alt","style","maxWidth","_jsxFileName","lineNumber","columnNumber","position","top","right","onClick","map","nft","index","image_url","name","width","display","justifyContent","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport ImageGallery from './components/ImageGallery';\nimport RenderResults from './components/RenderResults';\nimport { fetchLocalImages, generateImages, uploadImageToCloud } from './utils/api';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [localImages, setLocalImages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pfpFile, setPfpFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState(null);\n  const [videoUrl, setVideoUrl] = useState('');\n  const [fileName, setFileName] = useState('');\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [status, setStatus] = useState('Not connected');\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n        setStatus('Connected');\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const balance = await provider.getBalance(accounts[0]);\n        console.log('ETH Balance:', ethers.formatEther(balance));\n\n        // Fetch NFTs\n        await fetchNFTs(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n        setStatus('Connection failed');\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n    setStatus('Not connected');\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      console.log('Using OpenSea API Key:', apiKey);\n\n      const chain = 'ethereum'; // or 'polygon', 'binance', etc., depending on the blockchain\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('OpenSea API Response:', data);\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n    setGeneratedImages([]);\n    try {\n      const res = await fetch(imageUrl);\n      const blob = await res.blob();\n      const file = new File([blob], 'pfpImage.jpg', { type: blob.type });\n      setPfpFile(file);\n    } catch (error) {\n      console.error('Error fetching image:', error);\n    }\n  };\n\n  const handleGenerateImages = async () => {\n    if (!selectedNFT || !pfpFile) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await generateImages(pfpFile);\n      setGeneratedImages([data.imagePath]);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      alert(`Error generating images: ${error.message}`);\n    }\n  };\n\n  const handleBeamit = async () => {\n    if (!generatedImages.length) {\n      alert('Please generate an image first.');\n      return;\n    }\n\n    const fullBodyImage = generatedImages[0].split('/').pop();\n    try {\n      setUploadStatus('Uploading image to Google Cloud...');\n      await uploadImageToCloud(fullBodyImage);\n      setUploadStatus('Upload successful!');\n\n      // Fetch the latest video URL after upload\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/get-latest-video`);\n      const data = await response.json();\n\n      if (response.ok && data.videoPath) {\n        setVideoUrl(data.videoPath);\n        setFileName(data.videoName);\n      } else {\n        console.error('Error fetching video:', data);\n      }\n    } catch (error) {\n      setUploadStatus(`Upload failed: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20 }}>\n          <button onClick={connectWallet}>\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet}>Disconnect</button>}\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        {account ? (\n          <div className=\"nft-gallery\">\n            {nfts.map((nft, index) => (\n              <div key={index} className=\"nft-item\">\n                <img src={nft.image_url} alt={nft.name} style={{ width: '200px' }} />\n                <p>{nft.name}</p>\n                <button onClick={() => handleCreateAvatar(nft.image_url)}>Choose PFP</button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p>Please connect your MetaMask wallet to view your NFTs.</p>\n        )}\n        {videoUrl ? (\n          <RenderResults videoUrl={videoUrl} fileName={fileName} />\n        ) : (\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <AvatarSelection\n              selectedNFT={selectedNFT}\n              handleGenerateImages={handleGenerateImages}\n              loading={loading}\n            />\n            <ImageGallery\n              generatedImages={generatedImages}\n              localImages={localImages}\n              handleCreateAvatar={handleCreateAvatar}\n              handleBeamit={handleBeamit}\n              uploadStatus={uploadStatus}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}