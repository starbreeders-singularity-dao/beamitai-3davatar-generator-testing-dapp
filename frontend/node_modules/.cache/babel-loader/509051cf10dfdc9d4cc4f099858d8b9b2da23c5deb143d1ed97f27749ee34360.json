{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { format, numberToHex } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { logSchema } from './schemas.js';\n/**\n * View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport function createNewPendingTransactionFilter(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.newPendingTransactionFilter(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createNewFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport function createNewFilter(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.newFilter(web3Context.requestManager, formattedFilter);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createNewBlockFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport function createNewBlockFilter(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.newBlockFilter(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.uninstallFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport function uninstallFilter(web3Context, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.uninstallFilter(web3Context.requestManager, numberToHex(filterIdentifier));\n    return response;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getFilterChanges}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport function getFilterChanges(web3Context, filterIdentifier, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getFilterChanges(web3Context.requestManager, numberToHex(filterIdentifier));\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getFilterLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport function getFilterLogs(web3Context, filterIdentifier, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getFilterLogs(web3Context.requestManager, numberToHex(filterIdentifier));\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n//# sourceMappingURL=filtering_rpc_method_wrappers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}