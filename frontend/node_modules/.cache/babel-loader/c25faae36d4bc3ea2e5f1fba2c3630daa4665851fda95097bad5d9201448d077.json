{"ast":null,"code":"import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: {\n      value: null\n    },\n    delta: {\n      value: new Vector2(1, 1)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color = vec4( 0.0 );\", \"\tfloat total = 0.0;\",\n  // randomize the lookup values to hide the fixed number of samples\n  \"\tfloat offset = rand( vUv );\", \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"\t\tfloat weight = 1.0 - abs( percent );\", \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\", \"\t\ttotal += weight;\", \"\t}\", \"\tgl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n};\nexport { TriangleBlurShader };\n//# sourceMappingURL=TriangleBlurShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}