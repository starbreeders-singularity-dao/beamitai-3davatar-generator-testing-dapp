{"ast":null,"code":"export default function potpack(boxes) {\n  // calculate total box area and maximum box width\n  let area = 0;\n  let maxWidth = 0;\n  for (const box of boxes) {\n    area += box.w * box.h;\n    maxWidth = Math.max(maxWidth, box.w);\n  }\n\n  // sort the boxes for insertion by height, descending\n  boxes.sort((a, b) => b.h - a.h);\n\n  // aim for a squarish resulting container,\n  // slightly adjusted for sub-100% space utilization\n  const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\n  // start with a single empty space, unbounded at the bottom\n  const spaces = [{\n    x: 0,\n    y: 0,\n    w: startWidth,\n    h: Infinity\n  }];\n  let width = 0;\n  let height = 0;\n  for (const box of boxes) {\n    // look through spaces backwards so that we check smaller spaces first\n    for (let i = spaces.length - 1; i >= 0; i--) {\n      const space = spaces[i];\n\n      // look for empty spaces that can accommodate the current box\n      if (box.w > space.w || box.h > space.h) continue;\n\n      // found the space; add the box to its top-left corner\n      // |-------|-------|\n      // |  box  |       |\n      // |_______|       |\n      // |         space |\n      // |_______________|\n      box.x = space.x;\n      box.y = space.y;\n      height = Math.max(height, box.y + box.h);\n      width = Math.max(width, box.x + box.w);\n      if (box.w === space.w && box.h === space.h) {\n        // space matches the box exactly; remove it\n        const last = spaces.pop();\n        if (i < spaces.length) spaces[i] = last;\n      } else if (box.h === space.h) {\n        // space matches the box height; update it accordingly\n        // |-------|---------------|\n        // |  box  | updated space |\n        // |_______|_______________|\n        space.x += box.w;\n        space.w -= box.w;\n      } else if (box.w === space.w) {\n        // space matches the box width; update it accordingly\n        // |---------------|\n        // |      box      |\n        // |_______________|\n        // | updated space |\n        // |_______________|\n        space.y += box.h;\n        space.h -= box.h;\n      } else {\n        // otherwise the box splits the space into two spaces\n        // |-------|-----------|\n        // |  box  | new space |\n        // |_______|___________|\n        // | updated space     |\n        // |___________________|\n        spaces.push({\n          x: space.x + box.w,\n          y: space.y,\n          w: space.w - box.w,\n          h: box.h\n        });\n        space.y += box.h;\n        space.h -= box.h;\n      }\n      break;\n    }\n  }\n  return {\n    w: width,\n    // container width\n    h: height,\n    // container height\n    fill: area / (width * height) || 0 // space utilization\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}