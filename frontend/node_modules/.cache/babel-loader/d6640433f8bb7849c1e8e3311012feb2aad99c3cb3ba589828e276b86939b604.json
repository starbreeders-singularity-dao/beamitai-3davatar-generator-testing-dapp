{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass XYZLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text) {\n    const lines = text.split(\"\\n\");\n    const vertices = [];\n    const colors = [];\n    for (let line of lines) {\n      line = line.trim();\n      if (line.charAt(0) === \"#\") continue;\n      const lineValues = line.split(/\\s+/);\n      if (lineValues.length === 3) {\n        vertices.push(parseFloat(lineValues[0]));\n        vertices.push(parseFloat(lineValues[1]));\n        vertices.push(parseFloat(lineValues[2]));\n      }\n      if (lineValues.length === 6) {\n        vertices.push(parseFloat(lineValues[0]));\n        vertices.push(parseFloat(lineValues[1]));\n        vertices.push(parseFloat(lineValues[2]));\n        colors.push(parseFloat(lineValues[3]) / 255);\n        colors.push(parseFloat(lineValues[4]) / 255);\n        colors.push(parseFloat(lineValues[5]) / 255);\n      }\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    if (colors.length > 0) {\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n    }\n    return geometry;\n  }\n}\nexport { XYZLoader };\n//# sourceMappingURL=XYZLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}