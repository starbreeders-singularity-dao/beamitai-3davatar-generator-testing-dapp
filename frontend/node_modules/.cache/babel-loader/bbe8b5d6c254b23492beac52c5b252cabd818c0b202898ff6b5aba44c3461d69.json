{"ast":null,"code":"import { MathUtils } from \"three\";\nconst _hsl = {};\nclass ColorConverter {\n  static setHSV(color, h, s, v) {\n    h = MathUtils.euclideanModulo(h, 1);\n    s = MathUtils.clamp(s, 0, 1);\n    v = MathUtils.clamp(v, 0, 1);\n    return color.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n  }\n  static getHSV(color, target) {\n    color.getHSL(_hsl);\n    _hsl.s *= _hsl.l < 0.5 ? _hsl.l : 1 - _hsl.l;\n    target.h = _hsl.h;\n    target.s = 2 * _hsl.s / (_hsl.l + _hsl.s);\n    target.v = _hsl.l + _hsl.s;\n    return target;\n  }\n  // where c, m, y, k is between 0 and 1\n  static setCMYK(color, c, m, y, k) {\n    const r = (1 - c) * (1 - k);\n    const g = (1 - m) * (1 - k);\n    const b = (1 - y) * (1 - k);\n    return color.setRGB(r, g, b);\n  }\n  static getCMYK(color, target) {\n    const r = color.r;\n    const g = color.g;\n    const b = color.b;\n    const k = 1 - Math.max(r, g, b);\n    const c = (1 - r - k) / (1 - k);\n    const m = (1 - g - k) / (1 - k);\n    const y = (1 - b - k) / (1 - k);\n    target.c = c;\n    target.m = m;\n    target.y = y;\n    target.k = k;\n    return target;\n  }\n}\nexport { ColorConverter };\n//# sourceMappingURL=ColorConverter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}