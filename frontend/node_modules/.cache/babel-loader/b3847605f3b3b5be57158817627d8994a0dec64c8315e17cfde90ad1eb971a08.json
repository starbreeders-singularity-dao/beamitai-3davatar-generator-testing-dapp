{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { Spherical, Vector3 } from 'three';\nimport { style } from '../decorators.js';\nimport { $ariaLabel, $container, $getModelIsVisible, $loadedTime, $needsRender, $onModelLoad, $onResize, $renderer, $scene, $tick, $updateStatus, $userInputElement, toVector3D } from '../model-viewer-base.js';\nimport { degreesToRadians, normalizeUnit } from '../styles/conversions.js';\nimport { StyleEvaluator } from '../styles/evaluators.js';\nimport { numberNode, parseExpressions } from '../styles/parsers.js';\nimport { DECAY_MILLISECONDS } from '../three-components/Damper.js';\nimport { ChangeSource, SmoothControls } from '../three-components/SmoothControls.js';\nimport { timeline } from '../utilities/animation.js';\n// NOTE(cdata): The following \"animation\" timing functions are deliberately\n// being used in favor of CSS animations. In Safari 12.1 and 13, CSS animations\n// would cause the interaction prompt to glitch unexpectedly\n// @see https://github.com/google/model-viewer/issues/839\nconst PROMPT_ANIMATION_TIME = 5000;\n// For timing purposes, a \"frame\" is a timing agnostic relative unit of time\n// and a \"value\" is a target value for the Frame.\nconst wiggle = timeline({\n  initialValue: 0,\n  keyframes: [{\n    frames: 5,\n    value: -1\n  }, {\n    frames: 1,\n    value: -1\n  }, {\n    frames: 8,\n    value: 1\n  }, {\n    frames: 1,\n    value: 1\n  }, {\n    frames: 5,\n    value: 0\n  }, {\n    frames: 18,\n    value: 0\n  }]\n});\nconst fade = timeline({\n  initialValue: 0,\n  keyframes: [{\n    frames: 1,\n    value: 1\n  }, {\n    frames: 5,\n    value: 1\n  }, {\n    frames: 1,\n    value: 0\n  }, {\n    frames: 6,\n    value: 0\n  }]\n});\nexport const DEFAULT_FOV_DEG = 30;\nexport const DEFAULT_MIN_FOV_DEG = 12;\nexport const DEFAULT_CAMERA_ORBIT = '0deg 75deg 105%';\nconst DEFAULT_CAMERA_TARGET = 'auto auto auto';\nconst DEFAULT_FIELD_OF_VIEW = 'auto';\nconst MINIMUM_RADIUS_RATIO = 2.2;\nconst AZIMUTHAL_QUADRANT_LABELS = ['front', 'right', 'back', 'left'];\nconst POLAR_TRIENT_LABELS = ['upper-', '', 'lower-'];\nexport const DEFAULT_INTERACTION_PROMPT_THRESHOLD = 3000;\nexport const INTERACTION_PROMPT = '. Use mouse, touch or arrow keys to move.';\nexport const InteractionPromptStrategy = {\n  AUTO: 'auto',\n  NONE: 'none'\n};\nexport const InteractionPromptStyle = {\n  BASIC: 'basic',\n  WIGGLE: 'wiggle'\n};\nexport const TouchAction = {\n  PAN_Y: 'pan-y',\n  PAN_X: 'pan-x',\n  NONE: 'none'\n};\nexport const fieldOfViewIntrinsics = () => {\n  return {\n    basis: [degreesToRadians(numberNode(DEFAULT_FOV_DEG, 'deg'))],\n    keywords: {\n      auto: [null]\n    }\n  };\n};\nconst minFieldOfViewIntrinsics = () => {\n  return {\n    basis: [degreesToRadians(numberNode(DEFAULT_MIN_FOV_DEG, 'deg'))],\n    keywords: {\n      auto: [null]\n    }\n  };\n};\nexport const cameraOrbitIntrinsics = (() => {\n  const defaultTerms = parseExpressions(DEFAULT_CAMERA_ORBIT)[0].terms;\n  const theta = normalizeUnit(defaultTerms[0]);\n  const phi = normalizeUnit(defaultTerms[1]);\n  return element => {\n    const radius = element[$scene].idealCameraDistance();\n    return {\n      basis: [theta, phi, numberNode(radius, 'm')],\n      keywords: {\n        auto: [null, null, numberNode(105, '%')]\n      }\n    };\n  };\n})();\nconst minCameraOrbitIntrinsics = element => {\n  const radius = MINIMUM_RADIUS_RATIO * element[$scene].boundingSphere.radius;\n  return {\n    basis: [numberNode(-Infinity, 'rad'), numberNode(0, 'rad'), numberNode(radius, 'm')],\n    keywords: {\n      auto: [null, null, null]\n    }\n  };\n};\nconst maxCameraOrbitIntrinsics = element => {\n  const orbitIntrinsics = cameraOrbitIntrinsics(element);\n  const evaluator = new StyleEvaluator([], orbitIntrinsics);\n  const defaultRadius = evaluator.evaluate()[2];\n  return {\n    basis: [numberNode(Infinity, 'rad'), numberNode(Math.PI, 'rad'), numberNode(defaultRadius, 'm')],\n    keywords: {\n      auto: [null, null, null]\n    }\n  };\n};\nexport const cameraTargetIntrinsics = element => {\n  const center = element[$scene].boundingBox.getCenter(new Vector3());\n  return {\n    basis: [numberNode(center.x, 'm'), numberNode(center.y, 'm'), numberNode(center.z, 'm')],\n    keywords: {\n      auto: [null, null, null]\n    }\n  };\n};\nconst HALF_PI = Math.PI / 2.0;\nconst THIRD_PI = Math.PI / 3.0;\nconst QUARTER_PI = HALF_PI / 2.0;\nconst TAU = 2.0 * Math.PI;\nexport const $controls = Symbol('controls');\nexport const $panElement = Symbol('panElement');\nexport const $promptElement = Symbol('promptElement');\nexport const $promptAnimatedContainer = Symbol('promptAnimatedContainer');\nexport const $fingerAnimatedContainers = Symbol('fingerAnimatedContainers');\nconst $deferInteractionPrompt = Symbol('deferInteractionPrompt');\nconst $updateAria = Symbol('updateAria');\nconst $a11y = Symbol('a11y');\nconst $updateA11y = Symbol('updateA11y');\nconst $updateCameraForRadius = Symbol('updateCameraForRadius');\nconst $cancelPrompts = Symbol('cancelPrompts');\nconst $onChange = Symbol('onChange');\nconst $onPointerChange = Symbol('onPointerChange');\nconst $waitingToPromptUser = Symbol('waitingToPromptUser');\nconst $userHasInteracted = Symbol('userHasInteracted');\nconst $promptElementVisibleTime = Symbol('promptElementVisibleTime');\nconst $lastPromptOffset = Symbol('lastPromptOffset');\nconst $cancellationSource = Symbol('cancellationSource');\nconst $lastSpherical = Symbol('lastSpherical');\nconst $jumpCamera = Symbol('jumpCamera');\nconst $initialized = Symbol('initialized');\nconst $maintainThetaPhi = Symbol('maintainThetaPhi');\nconst $syncCameraOrbit = Symbol('syncCameraOrbit');\nconst $syncFieldOfView = Symbol('syncFieldOfView');\nconst $syncCameraTarget = Symbol('syncCameraTarget');\nconst $syncMinCameraOrbit = Symbol('syncMinCameraOrbit');\nconst $syncMaxCameraOrbit = Symbol('syncMaxCameraOrbit');\nconst $syncMinFieldOfView = Symbol('syncMinFieldOfView');\nconst $syncMaxFieldOfView = Symbol('syncMaxFieldOfView');\nexport const ControlsMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n  class ControlsModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.cameraControls = false;\n      this.cameraOrbit = DEFAULT_CAMERA_ORBIT;\n      this.cameraTarget = DEFAULT_CAMERA_TARGET;\n      this.fieldOfView = DEFAULT_FIELD_OF_VIEW;\n      this.minCameraOrbit = 'auto';\n      this.maxCameraOrbit = 'auto';\n      this.minFieldOfView = 'auto';\n      this.maxFieldOfView = 'auto';\n      this.interactionPromptThreshold = DEFAULT_INTERACTION_PROMPT_THRESHOLD;\n      this.interactionPrompt = InteractionPromptStrategy.AUTO;\n      this.interactionPromptStyle = InteractionPromptStyle.WIGGLE;\n      this.orbitSensitivity = 1;\n      this.zoomSensitivity = 1;\n      this.panSensitivity = 1;\n      this.touchAction = TouchAction.NONE;\n      this.disableZoom = false;\n      this.disablePan = false;\n      this.disableTap = false;\n      this.interpolationDecay = DECAY_MILLISECONDS;\n      this.a11y = null;\n      this[_a] = this.shadowRoot.querySelector('.interaction-prompt');\n      this[_b] = this.shadowRoot.querySelector('#prompt');\n      this[_c] = [this.shadowRoot.querySelector('#finger0'), this.shadowRoot.querySelector('#finger1')];\n      this[_d] = this.shadowRoot.querySelector('.pan-target');\n      this[_e] = 0;\n      this[_f] = Infinity;\n      this[_g] = false;\n      this[_h] = false;\n      this[_j] = ChangeSource.AUTOMATIC;\n      this[_k] = new SmoothControls(this[$scene].camera, this[$userInputElement], this[$scene]);\n      this[_l] = new Spherical();\n      this[_m] = false;\n      this[_o] = false;\n      this[_p] = false;\n      this[_q] = {};\n      this[_r] = () => {\n        const source = this[$controls].changeSource;\n        this[$cancellationSource] = source;\n        if (source === ChangeSource.USER_INTERACTION) {\n          this[$userHasInteracted] = true;\n          this[$deferInteractionPrompt]();\n        }\n      };\n      this[_s] = () => {\n        this[$updateAria]();\n        this[$needsRender]();\n        const source = this[$controls].changeSource;\n        this.dispatchEvent(new CustomEvent('camera-change', {\n          detail: {\n            source\n          }\n        }));\n      };\n      this[_t] = event => {\n        this[$container].classList.toggle('pointer-tumbling', event.type === 'pointer-change-start');\n      };\n    }\n    get inputSensitivity() {\n      return this[$controls].inputSensitivity;\n    }\n    set inputSensitivity(value) {\n      this[$controls].inputSensitivity = value;\n    }\n    getCameraOrbit() {\n      const {\n        theta,\n        phi,\n        radius\n      } = this[$lastSpherical];\n      return {\n        theta,\n        phi,\n        radius,\n        toString() {\n          return `${this.theta}rad ${this.phi}rad ${this.radius}m`;\n        }\n      };\n    }\n    getCameraTarget() {\n      return toVector3D(this[$renderer].isPresenting ? this[$renderer].arRenderer.target : this[$scene].getDynamicTarget());\n    }\n    getFieldOfView() {\n      return this[$controls].getFieldOfView();\n    }\n    // Provided so user code does not have to parse these from attributes.\n    getMinimumFieldOfView() {\n      return this[$controls].options.minimumFieldOfView;\n    }\n    getMaximumFieldOfView() {\n      return this[$controls].options.maximumFieldOfView;\n    }\n    getIdealAspect() {\n      return this[$scene].idealAspect;\n    }\n    jumpCameraToGoal() {\n      this[$jumpCamera] = true;\n      this.requestUpdate($jumpCamera, false);\n    }\n    resetInteractionPrompt() {\n      this[$lastPromptOffset] = 0;\n      this[$promptElementVisibleTime] = Infinity;\n      this[$userHasInteracted] = false;\n      this[$waitingToPromptUser] = this.interactionPrompt === InteractionPromptStrategy.AUTO && this.cameraControls;\n    }\n    zoom(keyPresses) {\n      const event = new WheelEvent('wheel', {\n        deltaY: -30 * keyPresses\n      });\n      this[$userInputElement].dispatchEvent(event);\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      this[$controls].addEventListener('user-interaction', this[$cancelPrompts]);\n      this[$controls].addEventListener('pointer-change-start', this[$onPointerChange]);\n      this[$controls].addEventListener('pointer-change-end', this[$onPointerChange]);\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$controls].removeEventListener('user-interaction', this[$cancelPrompts]);\n      this[$controls].removeEventListener('pointer-change-start', this[$onPointerChange]);\n      this[$controls].removeEventListener('pointer-change-end', this[$onPointerChange]);\n    }\n    updated(changedProperties) {\n      super.updated(changedProperties);\n      const controls = this[$controls];\n      const scene = this[$scene];\n      if (changedProperties.has('cameraControls')) {\n        if (this.cameraControls) {\n          controls.enableInteraction();\n          if (this.interactionPrompt === InteractionPromptStrategy.AUTO) {\n            this[$waitingToPromptUser] = true;\n          }\n        } else {\n          controls.disableInteraction();\n          this[$deferInteractionPrompt]();\n        }\n        this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n      }\n      if (changedProperties.has('disableZoom')) {\n        controls.disableZoom = this.disableZoom;\n      }\n      if (changedProperties.has('disablePan')) {\n        controls.enablePan = !this.disablePan;\n      }\n      if (changedProperties.has('disableTap')) {\n        controls.enableTap = !this.disableTap;\n      }\n      if (changedProperties.has('interactionPrompt') || changedProperties.has('cameraControls') || changedProperties.has('src')) {\n        if (this.interactionPrompt === InteractionPromptStrategy.AUTO && this.cameraControls && !this[$userHasInteracted]) {\n          this[$waitingToPromptUser] = true;\n        } else {\n          this[$deferInteractionPrompt]();\n        }\n      }\n      if (changedProperties.has('interactionPromptStyle')) {\n        this[$promptAnimatedContainer].style.opacity = this.interactionPromptStyle == InteractionPromptStyle.BASIC ? '1' : '0';\n      }\n      if (changedProperties.has('touchAction')) {\n        const touchAction = this.touchAction;\n        controls.applyOptions({\n          touchAction\n        });\n        controls.updateTouchActionStyle();\n      }\n      if (changedProperties.has('orbitSensitivity')) {\n        controls.orbitSensitivity = this.orbitSensitivity;\n      }\n      if (changedProperties.has('zoomSensitivity')) {\n        controls.zoomSensitivity = this.zoomSensitivity;\n      }\n      if (changedProperties.has('panSensitivity')) {\n        controls.panSensitivity = this.panSensitivity;\n      }\n      if (changedProperties.has('interpolationDecay')) {\n        controls.setDamperDecayTime(this.interpolationDecay);\n        scene.setTargetDamperDecayTime(this.interpolationDecay);\n      }\n      if (changedProperties.has('a11y')) {\n        this[$updateA11y]();\n      }\n      if (this[$jumpCamera] === true) {\n        Promise.resolve().then(() => {\n          controls.jumpToGoal();\n          scene.jumpToGoal();\n          this[$onChange]();\n          this[$jumpCamera] = false;\n        });\n      }\n    }\n    async updateFraming() {\n      const scene = this[$scene];\n      const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n      await scene.updateFraming();\n      const newFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n      const zoom = this[$controls].getFieldOfView() / oldFramedFoV;\n      this[$controls].setFieldOfView(newFramedFoV * zoom);\n      this[$maintainThetaPhi] = true;\n      this.requestUpdate('maxFieldOfView');\n      this.requestUpdate('fieldOfView');\n      this.requestUpdate('minCameraOrbit');\n      this.requestUpdate('maxCameraOrbit');\n      this.requestUpdate('cameraOrbit');\n      await this.updateComplete;\n    }\n    interact(duration, finger0, finger1) {\n      const inputElement = this[$userInputElement];\n      const fingerElements = this[$fingerAnimatedContainers];\n      if (fingerElements[0].style.opacity === '1') {\n        console.warn('interact() failed because an existing interaction is running.');\n        return;\n      }\n      const xy = new Array();\n      xy.push({\n        x: timeline(finger0.x),\n        y: timeline(finger0.y)\n      });\n      const positions = [{\n        x: xy[0].x(0),\n        y: xy[0].y(0)\n      }];\n      if (finger1 != null) {\n        xy.push({\n          x: timeline(finger1.x),\n          y: timeline(finger1.y)\n        });\n        positions.push({\n          x: xy[1].x(0),\n          y: xy[1].y(0)\n        });\n      }\n      let startTime = performance.now();\n      const {\n        width,\n        height\n      } = this[$scene];\n      const rect = this.getBoundingClientRect();\n      const dispatchTouches = type => {\n        for (const [i, position] of positions.entries()) {\n          const {\n            style\n          } = fingerElements[i];\n          style.transform = `translateX(${width * position.x}px) translateY(${height * position.y}px)`;\n          if (type === 'pointerdown') {\n            style.opacity = '1';\n          } else if (type === 'pointerup') {\n            style.opacity = '0';\n          }\n          const init = {\n            pointerId: i - 5678,\n            pointerType: 'touch',\n            target: inputElement,\n            clientX: width * position.x + rect.x,\n            clientY: height * position.y + rect.y,\n            altKey: true // flag that this is not a user interaction\n          };\n          inputElement.dispatchEvent(new PointerEvent(type, init));\n        }\n      };\n      const moveTouches = () => {\n        // Cancel interaction if something else moves the camera or input is\n        // removed from the DOM.\n        const changeSource = this[$cancellationSource];\n        if (changeSource !== ChangeSource.AUTOMATIC || !inputElement.isConnected) {\n          for (const fingerElement of this[$fingerAnimatedContainers]) {\n            fingerElement.style.opacity = '0';\n          }\n          dispatchTouches('pointercancel');\n          this.dispatchEvent(new CustomEvent('interact-stopped', {\n            detail: {\n              source: changeSource\n            }\n          }));\n          document.removeEventListener('visibilitychange', onVisibilityChange);\n          return;\n        }\n        const time = Math.min(1, (performance.now() - startTime) / duration);\n        for (const [i, position] of positions.entries()) {\n          position.x = xy[i].x(time);\n          position.y = xy[i].y(time);\n        }\n        dispatchTouches('pointermove');\n        if (time < 1) {\n          requestAnimationFrame(moveTouches);\n        } else {\n          dispatchTouches('pointerup');\n          this.dispatchEvent(new CustomEvent('interact-stopped', {\n            detail: {\n              source: ChangeSource.AUTOMATIC\n            }\n          }));\n          document.removeEventListener('visibilitychange', onVisibilityChange);\n        }\n      };\n      const onVisibilityChange = () => {\n        let elapsed = 0;\n        if (document.visibilityState === 'hidden') {\n          elapsed = performance.now() - startTime;\n        } else {\n          startTime = performance.now() - elapsed;\n        }\n      };\n      document.addEventListener('visibilitychange', onVisibilityChange);\n      dispatchTouches('pointerdown');\n      this[$cancellationSource] = ChangeSource.AUTOMATIC;\n      requestAnimationFrame(moveTouches);\n    }\n    [(_a = $promptElement, _b = $promptAnimatedContainer, _c = $fingerAnimatedContainers, _d = $panElement, _e = $lastPromptOffset, _f = $promptElementVisibleTime, _g = $userHasInteracted, _h = $waitingToPromptUser, _j = $cancellationSource, _k = $controls, _l = $lastSpherical, _m = $jumpCamera, _o = $initialized, _p = $maintainThetaPhi, _q = $a11y, $syncFieldOfView)](style) {\n      const controls = this[$controls];\n      const scene = this[$scene];\n      scene.framedFoVDeg = style[0] * 180 / Math.PI;\n      controls.changeSource = ChangeSource.NONE;\n      controls.setFieldOfView(scene.adjustedFoV(scene.framedFoVDeg));\n      this[$cancelPrompts]();\n    }\n    [$syncCameraOrbit](style) {\n      const controls = this[$controls];\n      if (this[$maintainThetaPhi]) {\n        const {\n          theta,\n          phi\n        } = this.getCameraOrbit();\n        style[0] = theta;\n        style[1] = phi;\n        this[$maintainThetaPhi] = false;\n      }\n      controls.changeSource = ChangeSource.NONE;\n      controls.setOrbit(style[0], style[1], style[2]);\n      this[$cancelPrompts]();\n    }\n    [$syncMinCameraOrbit](style) {\n      this[$controls].applyOptions({\n        minimumAzimuthalAngle: style[0],\n        minimumPolarAngle: style[1],\n        minimumRadius: style[2]\n      });\n      this.jumpCameraToGoal();\n    }\n    [$syncMaxCameraOrbit](style) {\n      this[$controls].applyOptions({\n        maximumAzimuthalAngle: style[0],\n        maximumPolarAngle: style[1],\n        maximumRadius: style[2]\n      });\n      this[$updateCameraForRadius](style[2]);\n      this.jumpCameraToGoal();\n    }\n    [$syncMinFieldOfView](style) {\n      this[$controls].applyOptions({\n        minimumFieldOfView: style[0] * 180 / Math.PI\n      });\n      this.jumpCameraToGoal();\n    }\n    [$syncMaxFieldOfView](style) {\n      const fov = this[$scene].adjustedFoV(style[0] * 180 / Math.PI);\n      this[$controls].applyOptions({\n        maximumFieldOfView: fov\n      });\n      this.jumpCameraToGoal();\n    }\n    [$syncCameraTarget](style) {\n      const [x, y, z] = style;\n      if (!this[$renderer].arRenderer.isPresenting) {\n        this[$scene].setTarget(x, y, z);\n      }\n      this[$controls].changeSource = ChangeSource.NONE;\n      this[$renderer].arRenderer.updateTarget();\n      this[$cancelPrompts]();\n    }\n    [$tick](time, delta) {\n      super[$tick](time, delta);\n      if (this[$renderer].isPresenting || !this[$getModelIsVisible]()) {\n        return;\n      }\n      const controls = this[$controls];\n      const scene = this[$scene];\n      const now = performance.now();\n      if (this[$waitingToPromptUser]) {\n        if (this.loaded && now > this[$loadedTime] + this.interactionPromptThreshold) {\n          this[$waitingToPromptUser] = false;\n          this[$promptElementVisibleTime] = now;\n          this[$promptElement].classList.add('visible');\n        }\n      }\n      if (isFinite(this[$promptElementVisibleTime]) && this.interactionPromptStyle === InteractionPromptStyle.WIGGLE) {\n        const animationTime = (now - this[$promptElementVisibleTime]) / PROMPT_ANIMATION_TIME % 1;\n        const offset = wiggle(animationTime);\n        const opacity = fade(animationTime);\n        this[$promptAnimatedContainer].style.opacity = `${opacity}`;\n        if (offset !== this[$lastPromptOffset]) {\n          const xOffset = offset * scene.width * 0.05;\n          const deltaTheta = (offset - this[$lastPromptOffset]) * Math.PI / 16;\n          this[$promptAnimatedContainer].style.transform = `translateX(${xOffset}px)`;\n          controls.changeSource = ChangeSource.AUTOMATIC;\n          controls.adjustOrbit(deltaTheta, 0, 0);\n          this[$lastPromptOffset] = offset;\n        }\n      }\n      const cameraMoved = controls.update(time, delta);\n      const targetMoved = scene.updateTarget(delta);\n      if (cameraMoved || targetMoved) {\n        this[$onChange]();\n      }\n    }\n    [$deferInteractionPrompt]() {\n      // Effectively cancel the timer waiting for user interaction:\n      this[$waitingToPromptUser] = false;\n      this[$promptElement].classList.remove('visible');\n      this[$promptElementVisibleTime] = Infinity;\n    }\n    /**\n     * Updates the camera's near and far planes to enclose the scene when\n     * orbiting at the supplied radius.\n     */\n    [$updateCameraForRadius](radius) {\n      const maximumRadius = Math.max(this[$scene].farRadius(), radius);\n      const near = 0;\n      const far = Math.abs(2 * maximumRadius);\n      this[$controls].updateNearFar(near, far);\n    }\n    [$updateAria]() {\n      const {\n        theta,\n        phi\n      } = this[$controls].getCameraSpherical(this[$lastSpherical]);\n      const azimuthalQuadrant = (4 + Math.floor((theta % TAU + QUARTER_PI) / HALF_PI)) % 4;\n      const polarTrient = Math.floor(phi / THIRD_PI);\n      const azimuthalQuadrantLabel = AZIMUTHAL_QUADRANT_LABELS[azimuthalQuadrant];\n      const polarTrientLabel = POLAR_TRIENT_LABELS[polarTrient];\n      const position = `${polarTrientLabel}${azimuthalQuadrantLabel}`;\n      const key = position;\n      if (key in this[$a11y]) {\n        this[$updateStatus](this[$a11y][key]);\n      } else {\n        this[$updateStatus](`View from stage ${position}`);\n      }\n    }\n    get [$ariaLabel]() {\n      let interactionPrompt = INTERACTION_PROMPT;\n      if ('interaction-prompt' in this[$a11y]) {\n        interactionPrompt = `. ${this[$a11y]['interaction-prompt']}`;\n      }\n      return super[$ariaLabel].replace(/\\.$/, '') + (this.cameraControls ? interactionPrompt : '');\n    }\n    async [$onResize](event) {\n      const controls = this[$controls];\n      const scene = this[$scene];\n      const oldFramedFoV = scene.adjustedFoV(scene.framedFoVDeg);\n      // The super of $onResize may update the scene's adjustedFoV, so we\n      // compare the before and after to calculate the proper zoom.\n      super[$onResize](event);\n      const fovRatio = scene.adjustedFoV(scene.framedFoVDeg) / oldFramedFoV;\n      const fov = controls.getFieldOfView() * (isFinite(fovRatio) ? fovRatio : 1);\n      controls.updateAspect(this[$scene].aspect);\n      this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n      await this.updateComplete;\n      this[$controls].setFieldOfView(fov);\n      this.jumpCameraToGoal();\n    }\n    [$onModelLoad]() {\n      super[$onModelLoad]();\n      if (this[$initialized]) {\n        this[$maintainThetaPhi] = true;\n      } else {\n        this[$initialized] = true;\n      }\n      this.requestUpdate('maxFieldOfView', this.maxFieldOfView);\n      this.requestUpdate('fieldOfView', this.fieldOfView);\n      this.requestUpdate('minCameraOrbit', this.minCameraOrbit);\n      this.requestUpdate('maxCameraOrbit', this.maxCameraOrbit);\n      this.requestUpdate('cameraOrbit', this.cameraOrbit);\n      this.requestUpdate('cameraTarget', this.cameraTarget);\n      this.jumpCameraToGoal();\n    }\n    [(_r = $cancelPrompts, _s = $onChange, _t = $onPointerChange, $updateA11y)]() {\n      if (typeof this.a11y === 'string') {\n        if (this.a11y.startsWith('{')) {\n          try {\n            this[$a11y] = JSON.parse(this.a11y);\n          } catch (error) {\n            console.warn('Error parsing a11y JSON:', error);\n          }\n        } else if (this.a11y.length > 0) {\n          console.warn('Error not supported format, should be a JSON string:', this.a11y);\n        } else {\n          this[$a11y] = {};\n        }\n      } else if (typeof this.a11y === 'object' && this.a11y != null) {\n        this[$a11y] = Object.assign({}, this.a11y);\n      } else {\n        this[$a11y] = {};\n      }\n      this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n    }\n  }\n  __decorate([property({\n    type: Boolean,\n    attribute: 'camera-controls'\n  })], ControlsModelViewerElement.prototype, \"cameraControls\", void 0);\n  __decorate([style({\n    intrinsics: cameraOrbitIntrinsics,\n    observeEffects: true,\n    updateHandler: $syncCameraOrbit\n  }), property({\n    type: String,\n    attribute: 'camera-orbit',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"cameraOrbit\", void 0);\n  __decorate([style({\n    intrinsics: cameraTargetIntrinsics,\n    observeEffects: true,\n    updateHandler: $syncCameraTarget\n  }), property({\n    type: String,\n    attribute: 'camera-target',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"cameraTarget\", void 0);\n  __decorate([style({\n    intrinsics: fieldOfViewIntrinsics,\n    observeEffects: true,\n    updateHandler: $syncFieldOfView\n  }), property({\n    type: String,\n    attribute: 'field-of-view',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"fieldOfView\", void 0);\n  __decorate([style({\n    intrinsics: minCameraOrbitIntrinsics,\n    updateHandler: $syncMinCameraOrbit\n  }), property({\n    type: String,\n    attribute: 'min-camera-orbit',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"minCameraOrbit\", void 0);\n  __decorate([style({\n    intrinsics: maxCameraOrbitIntrinsics,\n    updateHandler: $syncMaxCameraOrbit\n  }), property({\n    type: String,\n    attribute: 'max-camera-orbit',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"maxCameraOrbit\", void 0);\n  __decorate([style({\n    intrinsics: minFieldOfViewIntrinsics,\n    updateHandler: $syncMinFieldOfView\n  }), property({\n    type: String,\n    attribute: 'min-field-of-view',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"minFieldOfView\", void 0);\n  __decorate([style({\n    intrinsics: fieldOfViewIntrinsics,\n    updateHandler: $syncMaxFieldOfView\n  }), property({\n    type: String,\n    attribute: 'max-field-of-view',\n    hasChanged: () => true\n  })], ControlsModelViewerElement.prototype, \"maxFieldOfView\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'interaction-prompt-threshold'\n  })], ControlsModelViewerElement.prototype, \"interactionPromptThreshold\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'interaction-prompt'\n  })], ControlsModelViewerElement.prototype, \"interactionPrompt\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'interaction-prompt-style'\n  })], ControlsModelViewerElement.prototype, \"interactionPromptStyle\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'orbit-sensitivity'\n  })], ControlsModelViewerElement.prototype, \"orbitSensitivity\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'zoom-sensitivity'\n  })], ControlsModelViewerElement.prototype, \"zoomSensitivity\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'pan-sensitivity'\n  })], ControlsModelViewerElement.prototype, \"panSensitivity\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'touch-action'\n  })], ControlsModelViewerElement.prototype, \"touchAction\", void 0);\n  __decorate([property({\n    type: Boolean,\n    attribute: 'disable-zoom'\n  })], ControlsModelViewerElement.prototype, \"disableZoom\", void 0);\n  __decorate([property({\n    type: Boolean,\n    attribute: 'disable-pan'\n  })], ControlsModelViewerElement.prototype, \"disablePan\", void 0);\n  __decorate([property({\n    type: Boolean,\n    attribute: 'disable-tap'\n  })], ControlsModelViewerElement.prototype, \"disableTap\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'interpolation-decay'\n  })], ControlsModelViewerElement.prototype, \"interpolationDecay\", void 0);\n  __decorate([property()], ControlsModelViewerElement.prototype, \"a11y\", void 0);\n  return ControlsModelViewerElement;\n};\n//# sourceMappingURL=controls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}