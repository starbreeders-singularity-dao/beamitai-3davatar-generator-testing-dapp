{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\";\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  const mintNFT = async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask');\n      }\n\n      // Check network\n      const chainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n      if (chainId !== '0x13882') {\n        // 80002 in hex\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13882'\n          }]\n        });\n      }\n\n      // Get account\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const userAddress = accounts[0];\n\n      // Upload to IPFS\n      console.log('Starting IPFS upload...');\n      const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n      console.log('IPFS Upload complete:', tokenURI);\n\n      // Setup provider and contract\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // Generate tokenId (using counter approach)\n      const nonce = await provider.getTransactionCount(userAddress);\n      const tokenId = ethers.solidityPacked([\"address\", \"uint256\"], [userAddress, nonce]);\n      console.log('Minting with parameters:', {\n        to: userAddress,\n        uri: tokenURI,\n        tokenId: tokenId,\n        nonce: nonce\n      });\n\n      // Estimate gas first\n      const gasEstimate = await contract.mint.estimateGas(userAddress, tokenURI, tokenId, \"0x00\");\n      console.log('Estimated gas:', gasEstimate.toString());\n\n      // Add 20% buffer to gas estimate\n      const gasLimit = Math.floor(Number(gasEstimate) * 1.2);\n\n      // Send transaction\n      const tx = await contract.mint(userAddress, tokenURI, tokenId, \"0x00\", {\n        gasLimit: gasLimit\n      });\n      console.log('Transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('Minting successful!', receipt);\n      return receipt;\n    } catch (error) {\n      console.error('Detailed error:', {\n        message: error.message,\n        code: error.code,\n        data: error.data,\n        transaction: error.transaction,\n        error: error\n      });\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: mintNFT,\n    style: {\n      padding: '10px 20px',\n      backgroundColor: '#FF1493',\n      color: 'white',\n      border: 'none',\n      borderRadius: '5px',\n      cursor: 'pointer'\n    },\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["ethers","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","mintNFT","window","ethereum","Error","chainId","request","method","params","accounts","userAddress","console","log","tokenURI","provider","BrowserProvider","signer","getSigner","contract","Contract","nonce","getTransactionCount","tokenId","solidityPacked","to","uri","gasEstimate","mint","estimateGas","toString","gasLimit","Math","floor","Number","tx","hash","receipt","wait","error","message","code","data","transaction","onClick","style","padding","backgroundColor","color","border","borderRadius","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const mintNFT = async () => {\n        try {\n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask');\n            }\n\n            // Check network\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            if (chainId !== '0x13882') { // 80002 in hex\n                await window.ethereum.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: '0x13882' }],\n                });\n            }\n\n            // Get account\n            const accounts = await window.ethereum.request({ \n                method: 'eth_requestAccounts' \n            });\n            const userAddress = accounts[0];\n\n            // Upload to IPFS\n            console.log('Starting IPFS upload...');\n            const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n            console.log('IPFS Upload complete:', tokenURI);\n\n            // Setup provider and contract\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n\n            // Generate tokenId (using counter approach)\n            const nonce = await provider.getTransactionCount(userAddress);\n            const tokenId = ethers.solidityPacked(\n                [\"address\", \"uint256\"],\n                [userAddress, nonce]\n            );\n\n            console.log('Minting with parameters:', {\n                to: userAddress,\n                uri: tokenURI,\n                tokenId: tokenId,\n                nonce: nonce\n            });\n\n            // Estimate gas first\n            const gasEstimate = await contract.mint.estimateGas(\n                userAddress,\n                tokenURI,\n                tokenId,\n                \"0x00\"\n            );\n\n            console.log('Estimated gas:', gasEstimate.toString());\n\n            // Add 20% buffer to gas estimate\n            const gasLimit = Math.floor(Number(gasEstimate) * 1.2);\n\n            // Send transaction\n            const tx = await contract.mint(\n                userAddress,\n                tokenURI,\n                tokenId,\n                \"0x00\",\n                {\n                    gasLimit: gasLimit\n                }\n            );\n\n            console.log('Transaction sent:', tx.hash);\n            const receipt = await tx.wait();\n            console.log('Minting successful!', receipt);\n\n            return receipt;\n\n        } catch (error) {\n            console.error('Detailed error:', {\n                message: error.message,\n                code: error.code,\n                data: error.data,\n                transaction: error.transaction,\n                error: error\n            });\n            throw error;\n        }\n    };\n\n    return (\n        <button \n            onClick={mintNFT}\n            style={{\n                padding: '10px 20px',\n                backgroundColor: '#FF1493',\n                color: 'white',\n                border: 'none',\n                borderRadius: '5px',\n                cursor: 'pointer'\n            }}\n        >\n            Mint NFT\n        </button>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}