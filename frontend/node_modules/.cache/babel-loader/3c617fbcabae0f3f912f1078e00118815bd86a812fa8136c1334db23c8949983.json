{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  _s();\n  const [isMinting, setIsMinting] = useState(false);\n  const [error, setError] = useState(null);\n  const mintNFT = async () => {\n    try {\n      setIsMinting(true);\n      setError(null);\n      console.log('Starting mint process with:', {\n        glbUrl,\n        originalNFT,\n        contractAddress: CONTRACT_ADDRESS\n      });\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask');\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected account:', accounts[0]);\n      const provider = new BrowserProvider(window.ethereum);\n      console.log('Provider created');\n      const signer = await provider.getSigner();\n      console.log('Signer obtained:', await signer.getAddress());\n      const contract = new Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      console.log('Contract instance created');\n      console.log('Initiating mint transaction with params:', {\n        address: await signer.getAddress(),\n        uri: \"test-uri\",\n        tokenId: (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.tokenId) || \"test-token\",\n        chainId: (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.chainId) || 80002\n      });\n      const tx = await contract.mint(await signer.getAddress(), \"test-uri\", (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.tokenId) || \"test-token\", (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.chainId) || 80002);\n      console.log('Transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('Transaction confirmed:', receipt);\n      alert('NFT Minted Successfully! Transaction: ' + tx.hash);\n    } catch (error) {\n      console.error('Detailed minting error:', error);\n      setError(error.message || 'Unknown error occurred');\n      // Show error in UI instead of alert\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      disabled: isMinting,\n      style: {\n        padding: '10px 20px',\n        fontSize: '16px',\n        backgroundColor: '#4CAF50',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: isMinting ? 'not-allowed' : 'pointer',\n        opacity: isMinting ? 0.7 : 1\n      },\n      children: isMinting ? 'Minting...' : 'Mint NFT'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        color: 'red',\n        padding: '10px',\n        border: '1px solid red',\n        borderRadius: '4px'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTMinter, \"3UGxDMTsnlmQcMsByWVZWFNDLcQ=\");\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["useState","BrowserProvider","Contract","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","_s","isMinting","setIsMinting","error","setError","mintNFT","console","log","contractAddress","window","ethereum","Error","accounts","request","method","provider","signer","getSigner","getAddress","contract","address","uri","tokenId","chainId","tx","mint","hash","receipt","wait","alert","message","children","onClick","disabled","style","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","opacity","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const [isMinting, setIsMinting] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const mintNFT = async () => {\n        try {\n            setIsMinting(true);\n            setError(null);\n            console.log('Starting mint process with:', {\n                glbUrl,\n                originalNFT,\n                contractAddress: CONTRACT_ADDRESS\n            });\n            \n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask');\n            }\n            \n            // Request account access\n            const accounts = await window.ethereum.request({ \n                method: 'eth_requestAccounts' \n            });\n            console.log('Connected account:', accounts[0]);\n            \n            const provider = new BrowserProvider(window.ethereum);\n            console.log('Provider created');\n            \n            const signer = await provider.getSigner();\n            console.log('Signer obtained:', await signer.getAddress());\n            \n            const contract = new Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n            console.log('Contract instance created');\n            \n            console.log('Initiating mint transaction with params:', {\n                address: await signer.getAddress(),\n                uri: \"test-uri\",\n                tokenId: originalNFT?.tokenId || \"test-token\",\n                chainId: originalNFT?.chainId || 80002\n            });\n\n            const tx = await contract.mint(\n                await signer.getAddress(),\n                \"test-uri\",\n                originalNFT?.tokenId || \"test-token\",\n                originalNFT?.chainId || 80002\n            );\n            \n            console.log('Transaction sent:', tx.hash);\n            const receipt = await tx.wait();\n            console.log('Transaction confirmed:', receipt);\n            \n            alert('NFT Minted Successfully! Transaction: ' + tx.hash);\n            \n        } catch (error) {\n            console.error('Detailed minting error:', error);\n            setError(error.message || 'Unknown error occurred');\n            // Show error in UI instead of alert\n        } finally {\n            setIsMinting(false);\n        }\n    };\n    \n    return (\n        <div>\n            <button \n                onClick={mintNFT} \n                disabled={isMinting}\n                style={{\n                    padding: '10px 20px',\n                    fontSize: '16px',\n                    backgroundColor: '#4CAF50',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: isMinting ? 'not-allowed' : 'pointer',\n                    opacity: isMinting ? 0.7 : 1\n                }}\n            >\n                {isMinting ? 'Minting...' : 'Mint NFT'}\n            </button>\n            \n            {error && (\n                <div style={{\n                    marginTop: '10px',\n                    color: 'red',\n                    padding: '10px',\n                    border: '1px solid red',\n                    borderRadius: '4px'\n                }}>\n                    Error: {error}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}