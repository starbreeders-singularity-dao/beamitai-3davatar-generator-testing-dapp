{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a, _b, _c;\nimport { LinearSRGBColorSpace, SRGBColorSpace, Vector2 } from 'three';\nimport { $threeTexture } from './image.js';\nimport { Texture } from './texture.js';\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n// Defines what a texture will be used for.\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"Base\"] = 0] = \"Base\";\n  TextureUsage[TextureUsage[\"MetallicRoughness\"] = 1] = \"MetallicRoughness\";\n  TextureUsage[TextureUsage[\"Normal\"] = 2] = \"Normal\";\n  TextureUsage[TextureUsage[\"Occlusion\"] = 3] = \"Occlusion\";\n  TextureUsage[TextureUsage[\"Emissive\"] = 4] = \"Emissive\";\n  TextureUsage[TextureUsage[\"Clearcoat\"] = 5] = \"Clearcoat\";\n  TextureUsage[TextureUsage[\"ClearcoatRoughness\"] = 6] = \"ClearcoatRoughness\";\n  TextureUsage[TextureUsage[\"ClearcoatNormal\"] = 7] = \"ClearcoatNormal\";\n  TextureUsage[TextureUsage[\"SheenColor\"] = 8] = \"SheenColor\";\n  TextureUsage[TextureUsage[\"SheenRoughness\"] = 9] = \"SheenRoughness\";\n  TextureUsage[TextureUsage[\"Transmission\"] = 10] = \"Transmission\";\n  TextureUsage[TextureUsage[\"Thickness\"] = 11] = \"Thickness\";\n  TextureUsage[TextureUsage[\"Specular\"] = 12] = \"Specular\";\n  TextureUsage[TextureUsage[\"SpecularColor\"] = 13] = \"SpecularColor\";\n  TextureUsage[TextureUsage[\"Iridescence\"] = 14] = \"Iridescence\";\n  TextureUsage[TextureUsage[\"IridescenceThickness\"] = 15] = \"IridescenceThickness\";\n  TextureUsage[TextureUsage[\"Anisotropy\"] = 16] = \"Anisotropy\";\n})(TextureUsage || (TextureUsage = {}));\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo {\n  constructor(onUpdate, usage, threeTexture, material) {\n    this[_a] = null;\n    this[_b] = {\n      rotation: 0,\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    this[_c] = false;\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (threeTexture) {\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n      this[$texture] = new Texture(onUpdate, threeTexture);\n    }\n    this[$onUpdate] = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n  get texture() {\n    return this[$texture];\n  }\n  setTexture(texture) {\n    var _d, _e;\n    const threeTexture = texture != null ? texture.source[$threeTexture] : null;\n    const oldTexture = (_d = this[$texture]) === null || _d === void 0 ? void 0 : _d.source[$threeTexture];\n    if (oldTexture != null && oldTexture.isVideoTexture) {\n      this[$activeVideo] = false;\n    } else if ((_e = this[$texture]) === null || _e === void 0 ? void 0 : _e.source.animation) {\n      this[$texture].source.animation.removeEventListener('enterFrame', this[$onUpdate]);\n    }\n    this[$texture] = texture;\n    if (threeTexture != null && threeTexture.isVideoTexture) {\n      const element = threeTexture.image;\n      this[$activeVideo] = true;\n      if (element.requestVideoFrameCallback != null) {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          element.requestVideoFrameCallback(update);\n        };\n        element.requestVideoFrameCallback(update);\n      } else {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n      }\n    } else if ((texture === null || texture === void 0 ? void 0 : texture.source.animation) != null) {\n      texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n    }\n    let colorSpace = SRGBColorSpace;\n    if (this[$materials]) {\n      for (const material of this[$materials]) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            colorSpace = LinearSRGBColorSpace;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            colorSpace = LinearSRGBColorSpace;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            colorSpace = LinearSRGBColorSpace;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          case TextureUsage.Clearcoat:\n            material.clearcoatMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatRoughness:\n            material.clearcoatRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatNormal:\n            material.clearcoatNormalMap = threeTexture;\n            break;\n          case TextureUsage.SheenColor:\n            material.sheenColorMap = threeTexture;\n            break;\n          case TextureUsage.SheenRoughness:\n            material.sheenRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.Transmission:\n            material.transmissionMap = threeTexture;\n            break;\n          case TextureUsage.Thickness:\n            material.thicknessMap = threeTexture;\n            break;\n          case TextureUsage.Specular:\n            material.specularIntensityMap = threeTexture;\n            break;\n          case TextureUsage.SpecularColor:\n            material.specularColorMap = threeTexture;\n            break;\n          case TextureUsage.Iridescence:\n            material.iridescenceMap = threeTexture;\n            break;\n          case TextureUsage.IridescenceThickness:\n            material.iridescenceThicknessMap = threeTexture;\n            break;\n          case TextureUsage.Anisotropy:\n            material.anisotropyMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n    if (threeTexture) {\n      // Updates the colorSpace for the texture, affects all references.\n      threeTexture.colorSpace = colorSpace;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this[$onUpdate]();\n  }\n}\n_a = $texture, _b = $transform, _c = $activeVideo;\n//# sourceMappingURL=texture-info.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}