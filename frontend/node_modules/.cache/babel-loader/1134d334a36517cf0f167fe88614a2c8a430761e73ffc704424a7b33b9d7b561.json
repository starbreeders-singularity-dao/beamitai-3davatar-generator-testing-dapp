{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { AsciiEffect } from 'three-stdlib';\nfunction AsciiRenderer({\n  renderIndex = 1,\n  bgColor = 'black',\n  fgColor = 'white',\n  characters = ' .:-+*=%@#',\n  invert = true,\n  color = false,\n  resolution = 0.15\n}) {\n  // Reactive state\n  const {\n    size,\n    gl,\n    scene,\n    camera\n  } = useThree();\n\n  // Create effect\n  const effect = React.useMemo(() => {\n    const effect = new AsciiEffect(gl, characters, {\n      invert,\n      color,\n      resolution\n    });\n    effect.domElement.style.position = 'absolute';\n    effect.domElement.style.top = '0px';\n    effect.domElement.style.left = '0px';\n    effect.domElement.style.pointerEvents = 'none';\n    return effect;\n  }, [characters, invert, color, resolution]);\n\n  // Styling\n  React.useLayoutEffect(() => {\n    effect.domElement.style.color = fgColor;\n    effect.domElement.style.backgroundColor = bgColor;\n  }, [fgColor, bgColor]);\n\n  // Append on mount, remove on unmount\n  React.useEffect(() => {\n    gl.domElement.style.opacity = '0';\n    gl.domElement.parentNode.appendChild(effect.domElement);\n    return () => {\n      gl.domElement.style.opacity = '1';\n      gl.domElement.parentNode.removeChild(effect.domElement);\n    };\n  }, [effect]);\n\n  // Set size\n  React.useEffect(() => {\n    effect.setSize(size.width, size.height);\n  }, [effect, size]);\n\n  // Take over render-loop (that is what the index is for)\n  useFrame(state => {\n    effect.render(scene, camera);\n  }, renderIndex);\n\n  // return something to not break type signatures\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\nexport { AsciiRenderer };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}