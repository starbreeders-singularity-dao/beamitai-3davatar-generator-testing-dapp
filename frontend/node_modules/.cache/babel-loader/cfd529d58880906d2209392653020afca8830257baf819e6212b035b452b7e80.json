{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BoxGeometry, BufferGeometry, EventDispatcher, Line, Matrix4, Mesh, PerspectiveCamera, Quaternion, Vector3 } from 'three';\nimport { XREstimatedLight } from 'three/examples/jsm/webxr/XREstimatedLight.js';\nimport { $currentBackground, $currentEnvironmentMap } from '../features/environment.js';\nimport { assertIsArCandidate } from '../utilities.js';\nimport { Damper } from './Damper.js';\nimport { PlacementBox } from './PlacementBox.js';\nimport { ChangeSource } from './SmoothControls.js';\n// number of initial null pose XRFrames allowed before we post not-tracking\nconst INIT_FRAMES = 30;\n// AR shadow is not user-configurable. This is to pave the way for AR lighting\n// estimation, which will be used once available in WebXR.\nconst AR_SHADOW_INTENSITY = 0.8;\nconst ROTATION_RATE = 1.5;\n// Angle down (towards bottom of screen) from camera center ray to use for hit\n// testing against the floor. This makes placement faster and more intuitive\n// assuming the phone is in portrait mode. This seems to be a reasonable\n// assumption for the start of the session and UI will lack landscape mode to\n// encourage upright use.\nconst HIT_ANGLE_DEG = 20;\nconst SCALE_SNAP = 0.2;\n// For automatic dynamic viewport scaling, don't let the scale drop below this\n// limit.\nconst MIN_VIEWPORT_SCALE = 0.25;\n// Furthest away you can move an object (meters).\nconst MAX_DISTANCE = 10;\n// Damper decay in milliseconds for the headset - screen uses default.\nconst DECAY = 150;\n// Longer controller/hand indicator line (meters).\nconst MAX_LINE_LENGTH = 5;\n// Maximum dimension of rotation indicator box on controller (meters).\nconst BOX_SIZE = 0.1;\nexport const ARStatus = {\n  NOT_PRESENTING: 'not-presenting',\n  SESSION_STARTED: 'session-started',\n  OBJECT_PLACED: 'object-placed',\n  FAILED: 'failed'\n};\nexport const ARTracking = {\n  TRACKING: 'tracking',\n  NOT_TRACKING: 'not-tracking'\n};\nconst vector3 = new Vector3();\nconst quaternion = new Quaternion();\nconst matrix4 = new Matrix4();\nconst hitPosition = new Vector3();\nconst camera = new PerspectiveCamera(45, 1, 0.1, 100);\nconst lineGeometry = new BufferGeometry().setFromPoints([new Vector3(0, 0, 0), new Vector3(0, 0, -1)]);\nconst boxGeometry = new BoxGeometry();\nexport class ARRenderer extends EventDispatcher {\n  constructor(renderer) {\n    super();\n    this.renderer = renderer;\n    this.currentSession = null;\n    this.placeOnWall = false;\n    this.placementBox = null;\n    this.lastTick = null;\n    this.turntableRotation = null;\n    this.oldShadowIntensity = null;\n    this.frame = null;\n    this.initialHitSource = null;\n    this.transientHitTestSource = null;\n    this.inputSource = null;\n    this._presentedScene = null;\n    this.resolveCleanup = null;\n    this.exitWebXRButtonContainer = null;\n    this.overlay = null;\n    this.xrLight = null;\n    this.xrMode = null;\n    this.controller1 = null;\n    this.controller2 = null;\n    this.selectedController = null;\n    this.tracking = true;\n    this.frames = 0;\n    this.initialized = false;\n    this.oldTarget = new Vector3();\n    this.placementComplete = false;\n    this.isTranslating = false;\n    this.isRotating = false;\n    this.isTwoFingering = false;\n    this.lastDragPosition = new Vector3();\n    this.relativeOrientation = new Quaternion();\n    this.scaleLine = new Line(lineGeometry);\n    this.firstRatio = 0;\n    this.lastAngle = 0;\n    this.goalPosition = new Vector3();\n    this.goalYaw = 0;\n    this.goalScale = 1;\n    this.xDamper = new Damper();\n    this.yDamper = new Damper();\n    this.zDamper = new Damper();\n    this.yawDamper = new Damper();\n    this.pitchDamper = new Damper();\n    this.rollDamper = new Damper();\n    this.scaleDamper = new Damper();\n    this.onExitWebXRButtonContainerClick = () => this.stopPresenting();\n    this.onControllerSelectStart = event => {\n      const scene = this.presentedScene;\n      const controller = event.target;\n      if (this.placementBox.controllerIntersection(scene, controller) != null) {\n        if (this.selectedController != null) {\n          this.selectedController.userData.line.visible = false;\n          if (scene.canScale) {\n            this.isTwoFingering = true;\n            this.firstRatio = this.controllerSeparation() / scene.pivot.scale.x;\n            this.scaleLine.visible = true;\n          }\n        }\n        controller.attach(scene.pivot);\n        this.selectedController = controller;\n        scene.setShadowIntensity(0.01);\n      } else {\n        const otherController = controller === this.controller1 ? this.controller2 : this.controller1;\n        this.relativeOrientation.copy(controller.quaternion).invert().multiply(scene.pivot.getWorldQuaternion(quaternion));\n        otherController.userData.turning = false;\n        controller.userData.turning = true;\n        controller.userData.line.visible = false;\n      }\n    };\n    this.onControllerSelectEnd = event => {\n      const controller = event.target;\n      controller.userData.turning = false;\n      controller.userData.line.visible = true;\n      this.isTwoFingering = false;\n      this.scaleLine.visible = false;\n      if (this.selectedController != null && this.selectedController != controller) {\n        return;\n      }\n      const scene = this.presentedScene;\n      // drop on floor\n      scene.attach(scene.pivot);\n      this.selectedController = null;\n      this.goalYaw = Math.atan2(scene.pivot.matrix.elements[8], scene.pivot.matrix.elements[10]);\n      this.goalPosition.x = scene.pivot.position.x;\n      this.goalPosition.z = scene.pivot.position.z;\n    };\n    this.onUpdateScene = () => {\n      if (this.placementBox != null && this.isPresenting) {\n        this.placementBox.dispose();\n        this.placementBox = new PlacementBox(this.presentedScene, this.placeOnWall ? 'back' : 'bottom');\n      }\n    };\n    this.onSelectStart = event => {\n      const hitSource = this.transientHitTestSource;\n      if (hitSource == null) {\n        return;\n      }\n      const fingers = this.frame.getHitTestResultsForTransientInput(hitSource);\n      const scene = this.presentedScene;\n      const box = this.placementBox;\n      if (fingers.length === 1) {\n        this.inputSource = event.inputSource;\n        const {\n          axes\n        } = this.inputSource.gamepad;\n        const hitPosition = box.getHit(this.presentedScene, axes[0], axes[1]);\n        box.show = true;\n        if (hitPosition != null) {\n          this.isTranslating = true;\n          this.lastDragPosition.copy(hitPosition);\n        } else if (this.placeOnWall === false) {\n          this.isRotating = true;\n          this.lastAngle = axes[0] * ROTATION_RATE;\n        }\n      } else if (fingers.length === 2) {\n        box.show = true;\n        this.isTwoFingering = true;\n        const {\n          separation\n        } = this.fingerPolar(fingers);\n        this.firstRatio = separation / scene.pivot.scale.x;\n      }\n    };\n    this.onSelectEnd = () => {\n      this.isTranslating = false;\n      this.isRotating = false;\n      this.isTwoFingering = false;\n      this.inputSource = null;\n      this.goalPosition.y += this.placementBox.offsetHeight * this.presentedScene.scale.x;\n      this.placementBox.show = false;\n    };\n    this.threeRenderer = renderer.threeRenderer;\n    this.threeRenderer.xr.enabled = true;\n  }\n  async resolveARSession() {\n    assertIsArCandidate();\n    const session = await navigator.xr.requestSession('immersive-ar', {\n      requiredFeatures: ['hit-test'],\n      optionalFeatures: ['dom-overlay', 'light-estimation'],\n      domOverlay: this.overlay ? {\n        root: this.overlay\n      } : undefined\n    });\n    this.threeRenderer.xr.setReferenceSpaceType('local');\n    await this.threeRenderer.xr.setSession(session);\n    this.threeRenderer.xr.cameraAutoUpdate = false;\n    return session;\n  }\n  /**\n   * The currently presented scene, if any\n   */\n  get presentedScene() {\n    return this._presentedScene;\n  }\n  /**\n   * Resolves to true if the renderer has detected all the necessary qualities\n   * to support presentation in AR.\n   */\n  async supportsPresentation() {\n    try {\n      assertIsArCandidate();\n      return await navigator.xr.isSessionSupported('immersive-ar');\n    } catch (error) {\n      console.warn('Request to present in WebXR denied:');\n      console.warn(error);\n      console.warn('Falling back to next ar-mode');\n      return false;\n    }\n  }\n  /**\n   * Present a scene in AR\n   */\n  async present(scene, environmentEstimation = false) {\n    if (this.isPresenting) {\n      console.warn('Cannot present while a model is already presenting');\n    }\n    let waitForAnimationFrame = new Promise((resolve, _reject) => {\n      requestAnimationFrame(() => resolve());\n    });\n    scene.setHotspotsVisibility(false);\n    scene.queueRender();\n    // Render a frame to turn off the hotspots\n    await waitForAnimationFrame;\n    // This sets isPresenting to true\n    this._presentedScene = scene;\n    this.overlay = scene.element.shadowRoot.querySelector('div.default');\n    if (environmentEstimation === true) {\n      this.xrLight = new XREstimatedLight(this.threeRenderer);\n      this.xrLight.addEventListener('estimationstart', () => {\n        if (!this.isPresenting || this.xrLight == null) {\n          return;\n        }\n        const scene = this.presentedScene;\n        scene.add(this.xrLight);\n        scene.environment = this.xrLight.environment;\n      });\n    }\n    const currentSession = await this.resolveARSession();\n    currentSession.addEventListener('end', () => {\n      this.postSessionCleanup();\n    }, {\n      once: true\n    });\n    const exitButton = scene.element.shadowRoot.querySelector('.slot.exit-webxr-ar-button');\n    exitButton.classList.add('enabled');\n    exitButton.addEventListener('click', this.onExitWebXRButtonContainerClick);\n    this.exitWebXRButtonContainer = exitButton;\n    const viewerRefSpace = await currentSession.requestReferenceSpace('viewer');\n    this.xrMode = currentSession.interactionMode;\n    this.tracking = true;\n    this.frames = 0;\n    this.initialized = false;\n    this.turntableRotation = scene.yaw;\n    this.goalYaw = scene.yaw;\n    this.goalScale = 1;\n    scene.setBackground(null);\n    this.oldShadowIntensity = scene.shadowIntensity;\n    scene.setShadowIntensity(0.01); // invisible, but not changing the shader\n    this.oldTarget.copy(scene.getTarget());\n    scene.element.addEventListener('load', this.onUpdateScene);\n    const radians = HIT_ANGLE_DEG * Math.PI / 180;\n    const ray = this.placeOnWall === true ? undefined : new XRRay(new DOMPoint(0, 0, 0), {\n      x: 0,\n      y: -Math.sin(radians),\n      z: -Math.cos(radians)\n    });\n    currentSession.requestHitTestSource({\n      space: viewerRefSpace,\n      offsetRay: ray\n    }).then(hitTestSource => {\n      this.initialHitSource = hitTestSource;\n    });\n    if (this.xrMode !== 'screen-space') {\n      this.setupControllers();\n      this.xDamper.setDecayTime(DECAY);\n      this.yDamper.setDecayTime(DECAY);\n      this.zDamper.setDecayTime(DECAY);\n      this.yawDamper.setDecayTime(DECAY);\n      this.pitchDamper.setDecayTime(DECAY);\n      this.rollDamper.setDecayTime(DECAY);\n    }\n    this.currentSession = currentSession;\n    this.placementBox = new PlacementBox(scene, this.placeOnWall ? 'back' : 'bottom');\n    this.placementComplete = false;\n    this.lastTick = performance.now();\n    this.dispatchEvent({\n      type: 'status',\n      status: ARStatus.SESSION_STARTED\n    });\n  }\n  setupControllers() {\n    this.controller1 = this.threeRenderer.xr.getController(0);\n    this.controller1.addEventListener('selectstart', this.onControllerSelectStart);\n    this.controller1.addEventListener('selectend', this.onControllerSelectEnd);\n    this.controller2 = this.threeRenderer.xr.getController(1);\n    this.controller2.addEventListener('selectstart', this.onControllerSelectStart);\n    this.controller2.addEventListener('selectend', this.onControllerSelectEnd);\n    const scene = this.presentedScene;\n    scene.add(this.controller1);\n    scene.add(this.controller2);\n    if (!this.controller1.userData.line) {\n      const line = new Line(lineGeometry);\n      line.name = 'line';\n      line.scale.z = MAX_LINE_LENGTH;\n      this.controller1.userData.turning = false;\n      this.controller1.userData.line = line;\n      this.controller1.add(line);\n      this.controller2.userData.turning = false;\n      const line2 = line.clone();\n      this.controller2.userData.line = line2;\n      this.controller2.add(line2);\n      this.scaleLine.name = 'scale line';\n      this.scaleLine.visible = false;\n      this.controller1.add(this.scaleLine);\n      const {\n        size\n      } = scene;\n      const scale = BOX_SIZE / Math.max(size.x, size.y, size.z);\n      const box = new Mesh(boxGeometry);\n      box.name = 'box';\n      box.scale.copy(size).multiplyScalar(scale);\n      box.visible = false;\n      this.controller1.userData.box = box;\n      scene.add(box);\n      const box2 = box.clone();\n      this.controller2.userData.box = box2;\n      scene.add(box2);\n    }\n  }\n  hover(controller) {\n    // Do not highlight in mobile-ar\n    if (this.xrMode === 'screen-space' || this.selectedController == controller) {\n      return false;\n    }\n    const scene = this.presentedScene;\n    const intersection = this.placementBox.controllerIntersection(scene, controller);\n    controller.userData.box.visible = (intersection == null || controller.userData.turning) && !this.isTwoFingering;\n    controller.userData.line.scale.z = intersection == null ? MAX_LINE_LENGTH : intersection.distance;\n    return intersection != null;\n  }\n  controllerSeparation() {\n    return this.controller1.position.distanceTo(this.controller2.position);\n  }\n  /**\n   * If currently presenting a scene in AR, stops presentation and exits AR.\n   */\n  async stopPresenting() {\n    if (!this.isPresenting) {\n      return;\n    }\n    const cleanupPromise = new Promise(resolve => {\n      this.resolveCleanup = resolve;\n    });\n    try {\n      await this.currentSession.end();\n      await cleanupPromise;\n    } catch (error) {\n      console.warn('Error while trying to end WebXR AR session');\n      console.warn(error);\n      this.postSessionCleanup();\n    }\n  }\n  /**\n   * True if a scene is currently in the process of being presented in AR\n   */\n  get isPresenting() {\n    return this.presentedScene != null;\n  }\n  get target() {\n    return this.oldTarget;\n  }\n  updateTarget() {\n    const scene = this.presentedScene;\n    if (scene != null) {\n      const target = scene.getTarget();\n      this.oldTarget.copy(target);\n      if (this.placeOnWall) {\n        // Move the scene's target to the center of the back of the model's\n        // bounding box.\n        target.z = scene.boundingBox.min.z;\n      } else {\n        // Move the scene's target to the model's floor height.\n        target.y = scene.boundingBox.min.y;\n      }\n      scene.setTarget(target.x, target.y, target.z);\n    }\n  }\n  postSessionCleanup() {\n    const session = this.currentSession;\n    if (session != null) {\n      session.removeEventListener('selectstart', this.onSelectStart);\n      session.removeEventListener('selectend', this.onSelectEnd);\n      this.currentSession = null;\n    }\n    const scene = this.presentedScene;\n    this._presentedScene = null;\n    if (scene != null) {\n      const {\n        element\n      } = scene;\n      if (this.xrLight != null) {\n        scene.remove(this.xrLight);\n        this.xrLight.dispose();\n        this.xrLight = null;\n      }\n      scene.add(scene.pivot);\n      scene.pivot.quaternion.set(0, 0, 0, 1);\n      scene.pivot.position.set(0, 0, 0);\n      scene.pivot.scale.set(1, 1, 1);\n      scene.setShadowOffset(0);\n      const yaw = this.turntableRotation;\n      if (yaw != null) {\n        scene.yaw = yaw;\n      }\n      const intensity = this.oldShadowIntensity;\n      if (intensity != null) {\n        scene.setShadowIntensity(intensity);\n      }\n      scene.setEnvironmentAndSkybox(element[$currentEnvironmentMap], element[$currentBackground]);\n      const point = this.oldTarget;\n      scene.setTarget(point.x, point.y, point.z);\n      scene.xrCamera = null;\n      scene.element.removeEventListener('load', this.onUpdateScene);\n      scene.orientHotspots(0);\n      const {\n        width,\n        height\n      } = element.getBoundingClientRect();\n      scene.setSize(width, height);\n      requestAnimationFrame(() => {\n        scene.element.dispatchEvent(new CustomEvent('camera-change', {\n          detail: {\n            source: ChangeSource.NONE\n          }\n        }));\n      });\n    }\n    // Force the Renderer to update its size\n    this.renderer.height = 0;\n    const exitButton = this.exitWebXRButtonContainer;\n    if (exitButton != null) {\n      exitButton.classList.remove('enabled');\n      exitButton.removeEventListener('click', this.onExitWebXRButtonContainerClick);\n      this.exitWebXRButtonContainer = null;\n    }\n    const hitSource = this.transientHitTestSource;\n    if (hitSource != null) {\n      hitSource.cancel();\n      this.transientHitTestSource = null;\n    }\n    const hitSourceInitial = this.initialHitSource;\n    if (hitSourceInitial != null) {\n      hitSourceInitial.cancel();\n      this.initialHitSource = null;\n    }\n    if (this.placementBox != null) {\n      this.placementBox.dispose();\n      this.placementBox = null;\n    }\n    if (this.xrMode !== 'screen-space') {\n      if (this.controller1 != null) {\n        this.controller1.userData.turning = false;\n        this.controller1.userData.box.visible = false;\n        this.controller1.userData.line.visible = true;\n        this.controller1.removeEventListener('selectstart', this.onControllerSelectStart);\n        this.controller1.removeEventListener('selectend', this.onControllerSelectEnd);\n        this.controller1.removeFromParent();\n        this.controller1 = null;\n      }\n      if (this.controller2 != null) {\n        this.controller2.userData.turning = false;\n        this.controller2.userData.box.visible = false;\n        this.controller2.userData.line.visible = true;\n        this.controller2.removeEventListener('selectstart', this.onControllerSelectStart);\n        this.controller2.removeEventListener('selectend', this.onControllerSelectEnd);\n        this.controller2.removeFromParent();\n        this.controller2 = null;\n      }\n      this.selectedController = null;\n      this.scaleLine.visible = false;\n    }\n    this.isTranslating = false;\n    this.isRotating = false;\n    this.isTwoFingering = false;\n    this.lastTick = null;\n    this.turntableRotation = null;\n    this.oldShadowIntensity = null;\n    this.frame = null;\n    this.inputSource = null;\n    this.overlay = null;\n    if (this.resolveCleanup != null) {\n      this.resolveCleanup();\n    }\n    this.dispatchEvent({\n      type: 'status',\n      status: ARStatus.NOT_PRESENTING\n    });\n  }\n  updateView(view) {\n    const scene = this.presentedScene;\n    const xr = this.threeRenderer.xr;\n    xr.updateCamera(camera);\n    scene.xrCamera = xr.getCamera();\n    const {\n      elements\n    } = scene.getCamera().matrixWorld;\n    scene.orientHotspots(Math.atan2(elements[1], elements[5]));\n    if (!this.initialized) {\n      this.placeInitially();\n      this.initialized = true;\n    }\n    // Use automatic dynamic viewport scaling if supported.\n    if (view.requestViewportScale && view.recommendedViewportScale) {\n      const scale = view.recommendedViewportScale;\n      view.requestViewportScale(Math.max(scale, MIN_VIEWPORT_SCALE));\n    }\n    const layer = xr.getBaseLayer();\n    if (layer != null) {\n      const viewport = layer instanceof XRWebGLLayer ? layer.getViewport(view) : xr.getBinding().getViewSubImage(layer, view).viewport;\n      this.threeRenderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height);\n    }\n  }\n  placeInitially() {\n    const scene = this.presentedScene;\n    const {\n      pivot,\n      element\n    } = scene;\n    const {\n      position\n    } = pivot;\n    const xrCamera = scene.getCamera();\n    const {\n      width,\n      height\n    } = this.overlay.getBoundingClientRect();\n    scene.setSize(width, height);\n    xrCamera.projectionMatrixInverse.copy(xrCamera.projectionMatrix).invert();\n    const {\n      theta\n    } = element.getCameraOrbit();\n    // Orient model to match the 3D camera view\n    const cameraDirection = xrCamera.getWorldDirection(vector3);\n    scene.yaw = Math.atan2(-cameraDirection.x, -cameraDirection.z) - theta;\n    this.goalYaw = scene.yaw;\n    const radius = Math.max(1, 2 * scene.boundingSphere.radius);\n    position.copy(xrCamera.position).add(cameraDirection.multiplyScalar(radius));\n    this.updateTarget();\n    const target = scene.getTarget();\n    position.add(target).sub(this.oldTarget);\n    this.goalPosition.copy(position);\n    scene.setHotspotsVisibility(true);\n    if (this.xrMode === 'screen-space') {\n      const {\n        session\n      } = this.frame;\n      session.addEventListener('selectstart', this.onSelectStart);\n      session.addEventListener('selectend', this.onSelectEnd);\n      session.requestHitTestSourceForTransientInput({\n        profile: 'generic-touchscreen'\n      }).then(hitTestSource => {\n        this.transientHitTestSource = hitTestSource;\n      });\n    }\n  }\n  getTouchLocation() {\n    const {\n      axes\n    } = this.inputSource.gamepad;\n    let location = this.placementBox.getExpandedHit(this.presentedScene, axes[0], axes[1]);\n    if (location != null) {\n      vector3.copy(location).sub(this.presentedScene.getCamera().position);\n      if (vector3.length() > MAX_DISTANCE) return null;\n    }\n    return location;\n  }\n  getHitPoint(hitResult) {\n    const refSpace = this.threeRenderer.xr.getReferenceSpace();\n    const pose = hitResult.getPose(refSpace);\n    if (pose == null) {\n      return null;\n    }\n    const hitMatrix = matrix4.fromArray(pose.transform.matrix);\n    if (this.placeOnWall === true) {\n      // Orient the model to the wall's normal vector.\n      this.goalYaw = Math.atan2(hitMatrix.elements[4], hitMatrix.elements[6]);\n    }\n    // Check that the y-coordinate of the normal is large enough that the normal\n    // is pointing up for floor placement; opposite for wall placement.\n    return hitMatrix.elements[5] > 0.75 !== this.placeOnWall ? hitPosition.setFromMatrixPosition(hitMatrix) : null;\n  }\n  moveToFloor(frame) {\n    const hitSource = this.initialHitSource;\n    if (hitSource == null) {\n      return;\n    }\n    const hitTestResults = frame.getHitTestResults(hitSource);\n    if (hitTestResults.length == 0) {\n      return;\n    }\n    const hit = hitTestResults[0];\n    const hitPoint = this.getHitPoint(hit);\n    if (hitPoint == null) {\n      return;\n    }\n    this.placementBox.show = true;\n    // If the user is translating, let the finger hit-ray take precedence and\n    // ignore this hit result.\n    if (!this.isTranslating) {\n      if (this.placeOnWall) {\n        this.goalPosition.copy(hitPoint);\n      } else {\n        this.goalPosition.y = hitPoint.y;\n      }\n    }\n    hitSource.cancel();\n    this.initialHitSource = null;\n    this.dispatchEvent({\n      type: 'status',\n      status: ARStatus.OBJECT_PLACED\n    });\n  }\n  fingerPolar(fingers) {\n    const fingerOne = fingers[0].inputSource.gamepad.axes;\n    const fingerTwo = fingers[1].inputSource.gamepad.axes;\n    const deltaX = fingerTwo[0] - fingerOne[0];\n    const deltaY = fingerTwo[1] - fingerOne[1];\n    const angle = Math.atan2(deltaY, deltaX);\n    let deltaYaw = this.lastAngle - angle;\n    if (deltaYaw > Math.PI) {\n      deltaYaw -= 2 * Math.PI;\n    } else if (deltaYaw < -Math.PI) {\n      deltaYaw += 2 * Math.PI;\n    }\n    this.lastAngle = angle;\n    return {\n      separation: Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n      deltaYaw: deltaYaw\n    };\n  }\n  setScale(separation) {\n    const scale = separation / this.firstRatio;\n    this.goalScale = Math.abs(scale - 1) < SCALE_SNAP ? 1 : scale;\n  }\n  processInput(frame) {\n    const hitSource = this.transientHitTestSource;\n    if (hitSource == null) {\n      return;\n    }\n    if (!this.isTranslating && !this.isTwoFingering && !this.isRotating) {\n      return;\n    }\n    const fingers = frame.getHitTestResultsForTransientInput(hitSource);\n    const scene = this.presentedScene;\n    const scale = scene.pivot.scale.x;\n    // Rotating, translating and scaling are mutually exclusive operations; only\n    // one can happen at a time, but we can switch during a gesture.\n    if (this.isTwoFingering) {\n      if (fingers.length < 2) {\n        // If we lose the second finger, stop scaling (in fact, stop processing\n        // input altogether until a new gesture starts).\n        this.isTwoFingering = false;\n      } else {\n        const {\n          separation,\n          deltaYaw\n        } = this.fingerPolar(fingers);\n        if (this.placeOnWall === false) {\n          this.goalYaw += deltaYaw;\n        }\n        if (scene.canScale) {\n          this.setScale(separation);\n        }\n      }\n      return;\n    } else if (fingers.length === 2) {\n      // If we were rotating or translating and we get a second finger, switch\n      // to scaling instead.\n      this.isTranslating = false;\n      this.isRotating = false;\n      this.isTwoFingering = true;\n      const {\n        separation\n      } = this.fingerPolar(fingers);\n      this.firstRatio = separation / scale;\n      return;\n    }\n    if (this.isRotating) {\n      const angle = this.inputSource.gamepad.axes[0] * ROTATION_RATE;\n      this.goalYaw += angle - this.lastAngle;\n      this.lastAngle = angle;\n    } else if (this.isTranslating) {\n      fingers.forEach(finger => {\n        if (finger.inputSource !== this.inputSource) {\n          return;\n        }\n        let hit = null;\n        if (finger.results.length > 0) {\n          hit = this.getHitPoint(finger.results[0]);\n        }\n        if (hit == null) {\n          hit = this.getTouchLocation();\n        }\n        if (hit == null) {\n          return;\n        }\n        this.goalPosition.sub(this.lastDragPosition);\n        if (this.placeOnWall === false) {\n          const offset = hit.y - this.lastDragPosition.y;\n          // When a lower floor is found, keep the model at the same height, but\n          // drop the placement box to the floor. The model falls on select end.\n          if (offset < 0) {\n            this.placementBox.offsetHeight = offset / scale;\n            this.presentedScene.setShadowOffset(offset);\n            // Interpolate hit ray up to drag plane\n            const cameraPosition = vector3.copy(scene.getCamera().position);\n            const alpha = -offset / (cameraPosition.y - hit.y);\n            cameraPosition.multiplyScalar(alpha);\n            hit.multiplyScalar(1 - alpha).add(cameraPosition);\n          }\n        }\n        this.goalPosition.add(hit);\n        this.lastDragPosition.copy(hit);\n      });\n    }\n  }\n  moveScene(delta) {\n    const scene = this.presentedScene;\n    const {\n      pivot\n    } = scene;\n    const box = this.placementBox;\n    box.updateOpacity(delta);\n    if (this.controller1) {\n      if (this.controller1.userData.turning) {\n        pivot.quaternion.copy(this.controller1.quaternion).multiply(this.relativeOrientation);\n        if (this.selectedController && this.selectedController === this.controller2) {\n          pivot.quaternion.premultiply(quaternion.copy(this.controller2.quaternion).invert());\n        }\n      }\n      this.controller1.userData.box.position.copy(this.controller1.position);\n      pivot.getWorldQuaternion(this.controller1.userData.box.quaternion);\n    }\n    if (this.controller2) {\n      if (this.controller2.userData.turning) {\n        pivot.quaternion.copy(this.controller2.quaternion).multiply(this.relativeOrientation);\n        if (this.selectedController && this.selectedController === this.controller1) {\n          pivot.quaternion.premultiply(quaternion.copy(this.controller1.quaternion).invert());\n        }\n      }\n      this.controller2.userData.box.position.copy(this.controller2.position);\n      pivot.getWorldQuaternion(this.controller2.userData.box.quaternion);\n    }\n    if (this.controller1 && this.controller2 && this.isTwoFingering) {\n      const dist = this.controllerSeparation();\n      this.setScale(dist);\n      this.scaleLine.scale.z = -dist;\n      this.scaleLine.lookAt(this.controller2.position);\n    }\n    const oldScale = scene.pivot.scale.x;\n    if (this.goalScale !== oldScale) {\n      const newScale = this.scaleDamper.update(oldScale, this.goalScale, delta, 1);\n      scene.pivot.scale.set(newScale, newScale, newScale);\n    }\n    if (pivot.parent !== scene) {\n      return; // attached to controller instead\n    }\n    const {\n      position\n    } = pivot;\n    const boundingRadius = scene.boundingSphere.radius;\n    const goal = this.goalPosition;\n    let source = ChangeSource.NONE;\n    if (!goal.equals(position)) {\n      source = ChangeSource.USER_INTERACTION;\n      let {\n        x,\n        y,\n        z\n      } = position;\n      x = this.xDamper.update(x, goal.x, delta, boundingRadius);\n      y = this.yDamper.update(y, goal.y, delta, boundingRadius);\n      z = this.zDamper.update(z, goal.z, delta, boundingRadius);\n      position.set(x, y, z);\n      if (this.xrMode === 'screen-space' && !this.isTranslating) {\n        const offset = goal.y - y;\n        if (this.placementComplete && this.placeOnWall === false) {\n          box.offsetHeight = offset / scene.pivot.scale.x;\n          scene.setShadowOffset(offset);\n        } else if (offset === 0) {\n          this.placementComplete = true;\n          box.show = false;\n          scene.setShadowIntensity(AR_SHADOW_INTENSITY);\n        }\n      }\n      if (this.xrMode !== 'screen-space' && goal.equals(position)) {\n        scene.setShadowIntensity(AR_SHADOW_INTENSITY);\n      }\n    }\n    scene.updateTarget(delta);\n    // yaw must be updated last, since this also updates the shadow position.\n    quaternion.setFromAxisAngle(vector3.set(0, 1, 0), this.goalYaw);\n    const angle = scene.pivot.quaternion.angleTo(quaternion);\n    const angleStep = angle - this.yawDamper.update(angle, 0, delta, Math.PI);\n    scene.pivot.quaternion.rotateTowards(quaternion, angleStep);\n    // camera changes on every frame - user-interaction only if touching the\n    // screen, plus damping time.\n    scene.element.dispatchEvent(new CustomEvent('camera-change', {\n      detail: {\n        source\n      }\n    }));\n  }\n  /**\n   * Only public to make it testable.\n   */\n  onWebXRFrame(time, frame) {\n    if (this.xrMode !== 'screen-space') {\n      const over1 = this.hover(this.controller1);\n      const over2 = this.hover(this.controller2);\n      this.placementBox.show = (over1 || over2) && !this.isTwoFingering;\n    }\n    this.frame = frame;\n    ++this.frames;\n    const refSpace = this.threeRenderer.xr.getReferenceSpace();\n    const pose = frame.getViewerPose(refSpace);\n    if (pose == null && this.tracking === true && this.frames > INIT_FRAMES) {\n      this.tracking = false;\n      this.dispatchEvent({\n        type: 'tracking',\n        status: ARTracking.NOT_TRACKING\n      });\n    }\n    const scene = this.presentedScene;\n    if (pose == null || scene == null || !scene.element.loaded) {\n      this.threeRenderer.clear();\n      return;\n    }\n    if (this.tracking === false) {\n      this.tracking = true;\n      this.dispatchEvent({\n        type: 'tracking',\n        status: ARTracking.TRACKING\n      });\n    }\n    // WebXR may return multiple views, i.e. for headset AR. This\n    // isn't really supported at this point, but make a best-effort\n    // attempt to render other views also, using the first view\n    // as the main viewpoint.\n    let isFirstView = true;\n    for (const view of pose.views) {\n      this.updateView(view);\n      if (isFirstView) {\n        this.moveToFloor(frame);\n        this.processInput(frame);\n        const delta = time - this.lastTick;\n        this.moveScene(delta);\n        this.renderer.preRender(scene, time, delta);\n        this.lastTick = time;\n        scene.renderShadow(this.threeRenderer);\n      }\n      this.threeRenderer.render(scene, scene.getCamera());\n      isFirstView = false;\n    }\n  }\n}\n//# sourceMappingURL=ARRenderer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}