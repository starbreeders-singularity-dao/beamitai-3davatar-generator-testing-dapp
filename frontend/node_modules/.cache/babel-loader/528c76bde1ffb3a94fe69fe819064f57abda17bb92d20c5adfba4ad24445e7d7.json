{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_MULTIPLE_ERRORS } from './error_codes.js';\n/**\n * Base class for Web3 errors.\n */\nexport class BaseWeb3Error extends Error {\n  /**\n   * @deprecated Use the `cause` property instead.\n   */\n  get innerError() {\n    // eslint-disable-next-line no-use-before-define\n    if (this.cause instanceof MultipleErrors) {\n      return this.cause.errors;\n    }\n    return this.cause;\n  }\n  /**\n   * @deprecated Use the `cause` property instead.\n   */\n  set innerError(cause) {\n    if (Array.isArray(cause)) {\n      // eslint-disable-next-line no-use-before-define\n      this.cause = new MultipleErrors(cause);\n    } else {\n      this.cause = cause;\n    }\n  }\n  constructor(msg, cause) {\n    super(msg);\n    if (Array.isArray(cause)) {\n      // eslint-disable-next-line no-use-before-define\n      this.cause = new MultipleErrors(cause);\n    } else {\n      this.cause = cause;\n    }\n    this.name = this.constructor.name;\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(new.target.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n  static convertToString(value, unquotValue = false) {\n    // Using \"null\" value intentionally for validation\n    // eslint-disable-next-line no-null/no-null\n    if (value === null || value === undefined) return 'undefined';\n    const result = JSON.stringify(value, (_, v) => typeof v === 'bigint' ? v.toString() : v);\n    return unquotValue && ['bigint', 'string'].includes(typeof value) ? result.replace(/['\\\\\"]+/g, '') : result;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      cause: this.cause,\n      // deprecated\n      innerError: this.cause\n    };\n  }\n}\nexport class MultipleErrors extends BaseWeb3Error {\n  constructor(errors) {\n    super(`Multiple errors occurred: [${errors.map(e => e.message).join('], [')}]`);\n    this.code = ERR_MULTIPLE_ERRORS;\n    this.errors = errors;\n  }\n}\nexport class InvalidValueError extends BaseWeb3Error {\n  constructor(value, msg) {\n    super(`Invalid value given \"${BaseWeb3Error.convertToString(value, true)}\". Error: ${msg}.`);\n    this.name = this.constructor.name;\n  }\n}\n//# sourceMappingURL=web3_error_base.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}