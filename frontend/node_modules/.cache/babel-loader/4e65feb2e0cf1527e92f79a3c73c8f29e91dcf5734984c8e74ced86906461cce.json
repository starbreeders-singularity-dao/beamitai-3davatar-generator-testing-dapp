{"ast":null,"code":"import { Vector3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from \"three\";\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nclass VertexTangentsHelper extends LineSegments {\n  constructor(object, size = 1, color = 65535) {\n    const geometry = new BufferGeometry();\n    const nTangents = object.geometry.attributes.tangent.count;\n    const positions = new Float32BufferAttribute(nTangents * 2 * 3, 3);\n    geometry.setAttribute(\"position\", positions);\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size;\n    this.type = \"VertexTangentsHelper\";\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n  update() {\n    this.object.updateMatrixWorld(true);\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n    const objGeometry = this.object.geometry;\n    const objPos = objGeometry.attributes.position;\n    const objTan = objGeometry.attributes.tangent;\n    let idx = 0;\n    for (let j = 0, jl = objPos.count; j < jl; j++) {\n      _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n      _v2.fromBufferAttribute(objTan, j);\n      _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1);\n      position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n      idx = idx + 1;\n      position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n      idx = idx + 1;\n    }\n    position.needsUpdate = true;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nexport { VertexTangentsHelper };\n//# sourceMappingURL=VertexTangentsHelper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}