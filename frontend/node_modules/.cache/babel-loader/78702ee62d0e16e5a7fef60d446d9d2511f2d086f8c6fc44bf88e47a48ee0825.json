{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Contract } from 'web3-eth-contract';\nimport { ENSRegistryAbi } from './abi/ens/ENSRegistry.js';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { registryAddresses } from './config.js';\nimport { namehash } from './utils.js';\nexport class Registry {\n  constructor(context, customRegistryAddress) {\n    this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);\n    this.context = context;\n  }\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.contract.methods.owner(namehash(name)).call();\n        return result;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.ttl(namehash(name)).call();\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const promise = this.contract.methods.recordExists(namehash(name)).call();\n        return promise;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.resolver(namehash(name)).call().then(address => {\n          // address type is unknown, not sure why\n          if (typeof address === 'string') {\n            const contract = new Contract(PublicResolverAbi, address, this.context);\n            // TODO: set contract provider needs to be added when ens current provider\n            return contract;\n          }\n          throw new Error();\n        });\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  get events() {\n    return this.contract.events;\n  }\n}\n//# sourceMappingURL=registry.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}