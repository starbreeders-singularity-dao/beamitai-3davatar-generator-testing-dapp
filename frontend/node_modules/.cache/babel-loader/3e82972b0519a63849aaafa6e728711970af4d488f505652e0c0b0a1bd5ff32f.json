{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\";\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AMOY_NETWORK = {\n  chainId: '0x13882',\n  chainName: 'Polygon Amoy Testnet',\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n  blockExplorerUrls: ['https://amoy.polygonscan.com/']\n};\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  const switchToAmoy = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: AMOY_NETWORK.chainId\n        }]\n      });\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [AMOY_NETWORK]\n          });\n        } catch (addError) {\n          throw new Error('Failed to add Amoy network');\n        }\n      } else {\n        throw switchError;\n      }\n    }\n  };\n  const mintNFT = async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask');\n      }\n      await switchToAmoy();\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      console.log('Starting IPFS upload...');\n      const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n      console.log('IPFS Upload complete:', tokenURI);\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      const userAddress = await signer.getAddress();\n\n      // Generate tokenId as bytes32\n      const timestamp = Date.now().toString();\n      const tokenId = ethers.solidityPackedKeccak256([\"address\", \"uint256\"], [userAddress, timestamp]);\n      console.log('Minting with params:', {\n        to: userAddress,\n        uri: tokenURI,\n        tokenId: tokenId,\n        contract: CONTRACT_ADDRESS\n      });\n\n      // Call mint with proper bytes parameter\n      const tx = await contract.mint(userAddress, tokenURI, tokenId, ethers.hexlify(new Uint8Array(0)),\n      // Empty bytes as \"0x00\"\n      {\n        gasLimit: 300000\n      });\n      console.log('Transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('NFT minted successfully:', receipt);\n      return receipt;\n    } catch (error) {\n      console.error('Minting error details:', {\n        message: error.message,\n        code: error.code,\n        data: error.data,\n        transaction: error.transaction,\n        receipt: error.receipt\n      });\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      style: {\n        padding: '10px 20px',\n        backgroundColor: '#FF1493',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["ethers","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","AMOY_NETWORK","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","NFTMinter","glbUrl","originalNFT","switchToAmoy","window","ethereum","request","method","params","switchError","code","addError","Error","mintNFT","provider","BrowserProvider","signer","getSigner","console","log","tokenURI","contract","Contract","userAddress","getAddress","timestamp","Date","now","toString","tokenId","solidityPackedKeccak256","to","uri","tx","mint","hexlify","Uint8Array","gasLimit","hash","receipt","wait","error","message","data","transaction","children","onClick","style","padding","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst AMOY_NETWORK = {\n    chainId: '0x13882',\n    chainName: 'Polygon Amoy Testnet',\n    nativeCurrency: {\n        name: 'MATIC',\n        symbol: 'MATIC',\n        decimals: 18\n    },\n    rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n    blockExplorerUrls: ['https://amoy.polygonscan.com/']\n};\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const switchToAmoy = async () => {\n        try {\n            await window.ethereum.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: AMOY_NETWORK.chainId }],\n            });\n        } catch (switchError) {\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [AMOY_NETWORK],\n                    });\n                } catch (addError) {\n                    throw new Error('Failed to add Amoy network');\n                }\n            } else {\n                throw switchError;\n            }\n        }\n    };\n\n    const mintNFT = async () => {\n        try {\n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask');\n            }\n\n            await switchToAmoy();\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            \n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            \n            console.log('Starting IPFS upload...');\n            const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n            console.log('IPFS Upload complete:', tokenURI);\n\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n\n            const userAddress = await signer.getAddress();\n            \n            // Generate tokenId as bytes32\n            const timestamp = Date.now().toString();\n            const tokenId = ethers.solidityPackedKeccak256(\n                [\"address\", \"uint256\"],\n                [userAddress, timestamp]\n            );\n\n            console.log('Minting with params:', {\n                to: userAddress,\n                uri: tokenURI,\n                tokenId: tokenId,\n                contract: CONTRACT_ADDRESS\n            });\n\n            // Call mint with proper bytes parameter\n            const tx = await contract.mint(\n                userAddress,\n                tokenURI,\n                tokenId,\n                ethers.hexlify(new Uint8Array(0)),  // Empty bytes as \"0x00\"\n                {\n                    gasLimit: 300000\n                }\n            );\n            \n            console.log('Transaction sent:', tx.hash);\n            const receipt = await tx.wait();\n            console.log('NFT minted successfully:', receipt);\n\n            return receipt;\n\n        } catch (error) {\n            console.error('Minting error details:', {\n                message: error.message,\n                code: error.code,\n                data: error.data,\n                transaction: error.transaction,\n                receipt: error.receipt\n            });\n            throw error;\n        }\n    };\n\n    return (\n        <div>\n            <button \n                onClick={mintNFT}\n                style={{\n                    padding: '10px 20px',\n                    backgroundColor: '#FF1493',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '5px',\n                    cursor: 'pointer'\n                }}\n            >\n                Mint NFT\n            </button>\n        </div>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}