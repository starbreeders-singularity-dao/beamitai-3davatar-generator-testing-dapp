{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { uint8ArrayConcat } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { decodeParamFromAbiParameter, encodeNumber, encodeParamFromAbiParameter } from './index.js';\nimport { extractArrayType, isDynamic, WORD_SIZE } from '../utils.js';\nimport { decodeNumber } from './number.js';\nimport { encodeDynamicParams } from './utils.js';\nexport function encodeArray(param, values) {\n  if (!Array.isArray(values)) {\n    throw new AbiError('Expected value to be array', {\n      abi: param,\n      values\n    });\n  }\n  const {\n    size,\n    param: arrayItemParam\n  } = extractArrayType(param);\n  const encodedParams = values.map(v => encodeParamFromAbiParameter(arrayItemParam, v));\n  const dynamic = size === -1;\n  const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;\n  if (!dynamic && values.length !== size) {\n    throw new AbiError(\"Given arguments count doesn't match array length\", {\n      arrayLength: size,\n      argumentsLength: values.length\n    });\n  }\n  if (dynamic || dynamicItems) {\n    const encodingResult = encodeDynamicParams(encodedParams);\n    if (dynamic) {\n      const encodedLength = encodeNumber({\n        type: 'uint256',\n        name: ''\n      }, encodedParams.length).encoded;\n      return {\n        dynamic: true,\n        encoded: encodedParams.length > 0 ? uint8ArrayConcat(encodedLength, encodingResult) : encodedLength\n      };\n    }\n    return {\n      dynamic: true,\n      encoded: encodingResult\n    };\n  }\n  return {\n    dynamic: false,\n    encoded: uint8ArrayConcat(...encodedParams.map(p => p.encoded))\n  };\n}\nexport function decodeArray(param, bytes) {\n  // eslint-disable-next-line prefer-const\n  let {\n    size,\n    param: arrayItemParam\n  } = extractArrayType(param);\n  const dynamic = size === -1;\n  let consumed = 0;\n  const result = [];\n  let remaining = bytes;\n  // dynamic array, we need to decode length\n  if (dynamic) {\n    const lengthResult = decodeNumber({\n      type: 'uint32',\n      name: ''\n    }, bytes);\n    size = Number(lengthResult.result);\n    consumed = lengthResult.consumed;\n    remaining = lengthResult.encoded;\n  }\n  const hasDynamicChild = isDynamic(arrayItemParam);\n  if (hasDynamicChild) {\n    // known length but dynamic child, each child is actually head element with encoded offset\n    for (let i = 0; i < size; i += 1) {\n      const offsetResult = decodeNumber({\n        type: 'uint32',\n        name: ''\n      }, remaining.subarray(i * WORD_SIZE));\n      consumed += offsetResult.consumed;\n      const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, remaining.subarray(Number(offsetResult.result)));\n      consumed += decodedChildResult.consumed;\n      result.push(decodedChildResult.result);\n    }\n    return {\n      result,\n      encoded: remaining.subarray(consumed),\n      consumed\n    };\n  }\n  for (let i = 0; i < size; i += 1) {\n    // decode static params\n    const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, bytes.subarray(consumed));\n    consumed += decodedChildResult.consumed;\n    result.push(decodedChildResult.result);\n  }\n  return {\n    result,\n    encoded: bytes.subarray(consumed),\n    consumed\n  };\n}\n//# sourceMappingURL=array.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}