{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n  };\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: selectedNFT\n        })\n      });\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: downloadData.filename\n        })\n      });\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('GLB status response:', data);\n      if (data.status === 'ready' && data.signedUrl) {\n        console.log('GLB file found:', {\n          url: data.signedUrl,\n          fileName: data.fileName\n        });\n        setGlbUrl(data.signedUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n        console.log('States updated:', {\n          glbUrl: data.signedUrl,\n          glbFileName: data.fileName,\n          glbStatus: 'ready',\n          uploadStatus: '3D Avatar Ready!'\n        });\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n    }\n  };\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px',\n          marginLeft: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"wallet-button\",\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"wallet-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: polygonIcon,\n          alt: \"Polygon Icon\",\n          style: {\n            width: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Your Avatar Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), selectedNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedNFT,\n            alt: \"Selected NFT\",\n            className: \"selected-nft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"nft-button\",\n            onClick: handleGenerateFullBodyImage,\n            children: loading ? 'Generating...' : 'Create Full Body Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), showNFTGrid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Please select an image to create your avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-gallery\",\n          children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: nft.image_url,\n              alt: nft.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCreateAvatar(nft.image_url),\n              className: \"nft-button\",\n              children: \"Choose PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pink-text\",\n          children: \"Please connect your MetaMask wallet to view your NFTs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-body-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"pink-text\",\n            children: \"Your Full Body Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-image\",\n          children: uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"model-container\",\n            children: glbStatus === 'ready' && glbUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: uploadStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"model-viewer\", {\n                src: glbUrl,\n                alt: \"3D Avatar\",\n                \"auto-rotate\": true,\n                \"camera-controls\": true,\n                style: {\n                  width: '600px',\n                  height: '600px',\n                  backgroundColor: '#1a1a1a'\n                },\n                onLoad: () => console.log('GLB model loaded successfully'),\n                onError: error => console.error('Model viewer error:', error)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 23\n              }, this), glbFileName && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"glb-filename\",\n                children: [\"GLB File: \", glbFileName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleMintNFT,\n                className: \"nft-button mint-button\",\n                style: {\n                  marginTop: '20px'\n                },\n                children: \"Mint NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Processing your avatar... Please wait.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fullBodyImageUrl,\n              alt: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackButton,\n                className: \"nft-button\",\n                children: \"Back to NFT Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBeamIt,\n                className: \"nft-button beam-button\",\n                children: \"Beam It!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-message\",\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yc6858jXRb1sfyC5W711m0aKjLk=\");\n_c = App;\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n`;\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","logo","polygonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","account","setAccount","nfts","setNfts","loading","setLoading","statusMessage","setStatusMessage","fullBodyImageUrl","setFullBodyImageUrl","showNFTGrid","setShowNFTGrid","glbUrl","setGlbUrl","glbStatus","setGlbStatus","uploadStatus","setUploadStatus","showMintButton","setShowMintButton","glbFileName","setGlbFileName","fetchNFTs","connectWallet","window","ethereum","accounts","request","method","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","status","data","json","handleCreateAvatar","imageUrl","handleBackButton","handleGenerateFullBodyImage","downloadResponse","body","JSON","stringify","errorText","text","downloadData","generateResponse","filename","imagePath","handleBeamIt","split","pop","fileName","checkGlbStatus","signedUrl","url","interval","setInterval","clearInterval","handleMintNFT","className","children","src","alt","style","maxWidth","marginLeft","_jsxFileName","lineNumber","columnNumber","position","top","right","display","alignItems","gap","onClick","width","map","nft","index","image_url","name","height","backgroundColor","onLoad","onError","marginTop","_c","styles","styleSheet","document","createElement","innerText","head","appendChild","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n  };\n\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: selectedNFT\n        }),\n      });\n\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: downloadData.filename \n        }),\n      });\n\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n  \n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      \n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          fileName: filename \n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n  \n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n      \n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      console.log('GLB status response:', data);\n      \n      if (data.status === 'ready' && data.signedUrl) {\n        console.log('GLB file found:', {\n          url: data.signedUrl,\n          fileName: data.fileName\n        });\n        setGlbUrl(data.signedUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n        console.log('States updated:', {\n          glbUrl: data.signedUrl,\n          glbFileName: data.fileName,\n          glbStatus: 'ready',\n          uploadStatus: '3D Avatar Ready!'\n        });\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px', marginLeft: '20px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20, display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <button onClick={connectWallet} className=\"wallet-button\">\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet} className=\"wallet-button\">Disconnect</button>}\n          <img src={polygonIcon} alt=\"Polygon Icon\" style={{ width: '30px' }} />\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        <div className=\"avatar-selection\">\n          <h2 className=\"pink-text\">Your Avatar Selection</h2>\n          {selectedNFT && (\n            <div>\n              <img src={selectedNFT} alt=\"Selected NFT\" className=\"selected-nft\" />\n              <button className=\"nft-button\" onClick={handleGenerateFullBodyImage}>\n                {loading ? 'Generating...' : 'Create Full Body Image'}\n              </button>\n              <p className=\"status-message\">{statusMessage}</p>\n              {loading && <div className=\"loading-dots\">...</div>}\n            </div>\n          )}\n        </div>\n        \n        {showNFTGrid ? (\n          <div className=\"nft-gallery-container\">\n            <h2 className=\"pink-text\">Please select an image to create your avatar</h2>\n            {account ? (\n              <div className=\"nft-gallery\">\n                {nfts.map((nft, index) => (\n                  <div key={index} className=\"nft-item\">\n                    <img src={nft.image_url} alt={nft.name} style={{ width: '100px' }} />\n                    <p>{nft.name}</p>\n                    <button onClick={() => handleCreateAvatar(nft.image_url)} className=\"nft-button\">Choose PFP</button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"pink-text\">Please connect your MetaMask wallet to view your NFTs.</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"full-body-container\">\n            <div className=\"full-body-header\">\n              <h2 className=\"pink-text\">Your Full Body Image</h2>\n            </div>\n            \n            <div className=\"full-body-image\">\n              {uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? (\n                <div className=\"model-container\">\n                  {glbStatus === 'ready' && glbUrl ? (\n                    <>\n                      <p>{uploadStatus}</p>\n                      <model-viewer\n                        src={glbUrl}\n                        alt=\"3D Avatar\"\n                        auto-rotate\n                        camera-controls\n                        style={{ width: '600px', height: '600px', backgroundColor: '#1a1a1a' }}\n                        onLoad={() => console.log('GLB model loaded successfully')}\n                        onError={(error) => console.error('Model viewer error:', error)}\n                      ></model-viewer>\n                      {glbFileName && (\n                        <p className=\"glb-filename\">\n                          GLB File: {glbFileName}\n                        </p>\n                      )}\n                      <button \n                        onClick={handleMintNFT} \n                        className=\"nft-button mint-button\"\n                        style={{ marginTop: '20px' }}\n                      >\n                        Mint NFT\n                      </button>\n                    </>\n                  ) : (\n                    <p>Processing your avatar... Please wait.</p>\n                  )}\n                </div>\n              ) : (\n                <>\n                  <h2>Full Body</h2>\n                  <img src={fullBodyImageUrl} alt=\"Full Body\" />\n                  <div className=\"button-group\">\n                    <button onClick={handleBackButton} className=\"nft-button\">Back to NFT Selection</button>\n                    <button onClick={handleBeamIt} className=\"nft-button beam-button\">Beam It!</button>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            {uploadStatus && <p className=\"status-message\">{uploadStatus}</p>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n`;\n\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}