{"ast":null,"code":"import { Mesh, AnimationMixer, AnimationClip } from \"three\";\nclass MorphAnimMesh extends Mesh {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.type = \"MorphAnimMesh\";\n    this.mixer = new AnimationMixer(this);\n    this.activeAction = null;\n  }\n  setDirectionForward() {\n    this.mixer.timeScale = 1;\n  }\n  setDirectionBackward() {\n    this.mixer.timeScale = -1;\n  }\n  playAnimation(label, fps) {\n    if (this.activeAction) {\n      this.activeAction.stop();\n      this.activeAction = null;\n    }\n    const clip = AnimationClip.findByName(this, label);\n    if (clip) {\n      const action = this.mixer.clipAction(clip);\n      action.timeScale = clip.tracks.length * fps / clip.duration;\n      this.activeAction = action.play();\n    } else {\n      throw new Error(\"THREE.MorphAnimMesh: animations[\" + label + \"] undefined in .playAnimation()\");\n    }\n  }\n  updateAnimation(delta) {\n    this.mixer.update(delta);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.mixer = new AnimationMixer(this);\n    return this;\n  }\n}\nexport { MorphAnimMesh };\n//# sourceMappingURL=MorphAnimMesh.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}