{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { MOUSE, Vector3, Vector2, Quaternion } from \"three\";\nimport { EventDispatcher } from \"./EventDispatcher.js\";\nclass TrackballControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"screen\", {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    });\n    __publicField(this, \"rotateSpeed\", 1);\n    __publicField(this, \"zoomSpeed\", 1.2);\n    __publicField(this, \"panSpeed\", 0.3);\n    __publicField(this, \"noRotate\", false);\n    __publicField(this, \"noZoom\", false);\n    __publicField(this, \"noPan\", false);\n    __publicField(this, \"staticMoving\", false);\n    __publicField(this, \"dynamicDampingFactor\", 0.2);\n    __publicField(this, \"minDistance\", 0);\n    __publicField(this, \"maxDistance\", Infinity);\n    __publicField(this, \"keys\", [\"KeyA\", \"KeyS\", \"KeyD\"\n    /*D*/]);\n    __publicField(this, \"mouseButtons\", {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    });\n    __publicField(this, \"object\");\n    __publicField(this, \"domElement\");\n    __publicField(this, \"cursorZoom\", false);\n    __publicField(this, \"target\", new Vector3());\n    __publicField(this, \"mousePosition\", new Vector2());\n    // internals\n    __publicField(this, \"STATE\", {\n      NONE: -1,\n      ROTATE: 0,\n      ZOOM: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_ZOOM_PAN: 4\n    });\n    __publicField(this, \"EPS\", 1e-6);\n    __publicField(this, \"lastZoom\", 1);\n    __publicField(this, \"lastPosition\", new Vector3());\n    __publicField(this, \"cursorVector\", new Vector3());\n    __publicField(this, \"targetVector\", new Vector3());\n    __publicField(this, \"_state\", this.STATE.NONE);\n    __publicField(this, \"_keyState\", this.STATE.NONE);\n    __publicField(this, \"_eye\", new Vector3());\n    __publicField(this, \"_movePrev\", new Vector2());\n    __publicField(this, \"_moveCurr\", new Vector2());\n    __publicField(this, \"_lastAxis\", new Vector3());\n    __publicField(this, \"_lastAngle\", 0);\n    __publicField(this, \"_zoomStart\", new Vector2());\n    __publicField(this, \"_zoomEnd\", new Vector2());\n    __publicField(this, \"_touchZoomDistanceStart\", 0);\n    __publicField(this, \"_touchZoomDistanceEnd\", 0);\n    __publicField(this, \"_panStart\", new Vector2());\n    __publicField(this, \"_panEnd\", new Vector2());\n    __publicField(this, \"target0\");\n    __publicField(this, \"position0\");\n    __publicField(this, \"up0\");\n    __publicField(this, \"zoom0\");\n    // events\n    __publicField(this, \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(this, \"startEvent\", {\n      type: \"start\"\n    });\n    __publicField(this, \"endEvent\", {\n      type: \"end\"\n    });\n    __publicField(this, \"onScreenVector\", new Vector2());\n    __publicField(this, \"getMouseOnScreen\", (pageX, pageY) => {\n      this.onScreenVector.set((pageX - this.screen.left) / this.screen.width, (pageY - this.screen.top) / this.screen.height);\n      return this.onScreenVector;\n    });\n    __publicField(this, \"onCircleVector\", new Vector2());\n    __publicField(this, \"getMouseOnCircle\", (pageX, pageY) => {\n      this.onCircleVector.set((pageX - this.screen.width * 0.5 - this.screen.left) / (this.screen.width * 0.5), (this.screen.height + 2 * (this.screen.top - pageY)) / this.screen.width\n      // screen.width intentional\n      );\n      return this.onCircleVector;\n    });\n    __publicField(this, \"axis\", new Vector3());\n    __publicField(this, \"quaternion\", new Quaternion());\n    __publicField(this, \"eyeDirection\", new Vector3());\n    __publicField(this, \"objectUpDirection\", new Vector3());\n    __publicField(this, \"objectSidewaysDirection\", new Vector3());\n    __publicField(this, \"moveDirection\", new Vector3());\n    __publicField(this, \"angle\", 0);\n    __publicField(this, \"rotateCamera\", () => {\n      this.moveDirection.set(this._moveCurr.x - this._movePrev.x, this._moveCurr.y - this._movePrev.y, 0);\n      this.angle = this.moveDirection.length();\n      if (this.angle) {\n        this._eye.copy(this.object.position).sub(this.target);\n        this.eyeDirection.copy(this._eye).normalize();\n        this.objectUpDirection.copy(this.object.up).normalize();\n        this.objectSidewaysDirection.crossVectors(this.objectUpDirection, this.eyeDirection).normalize();\n        this.objectUpDirection.setLength(this._moveCurr.y - this._movePrev.y);\n        this.objectSidewaysDirection.setLength(this._moveCurr.x - this._movePrev.x);\n        this.moveDirection.copy(this.objectUpDirection.add(this.objectSidewaysDirection));\n        this.axis.crossVectors(this.moveDirection, this._eye).normalize();\n        this.angle *= this.rotateSpeed;\n        this.quaternion.setFromAxisAngle(this.axis, this.angle);\n        this._eye.applyQuaternion(this.quaternion);\n        this.object.up.applyQuaternion(this.quaternion);\n        this._lastAxis.copy(this.axis);\n        this._lastAngle = this.angle;\n      } else if (!this.staticMoving && this._lastAngle) {\n        this._lastAngle *= Math.sqrt(1 - this.dynamicDampingFactor);\n        this._eye.copy(this.object.position).sub(this.target);\n        this.quaternion.setFromAxisAngle(this._lastAxis, this._lastAngle);\n        this._eye.applyQuaternion(this.quaternion);\n        this.object.up.applyQuaternion(this.quaternion);\n      }\n      this._movePrev.copy(this._moveCurr);\n    });\n    __publicField(this, \"zoomCamera\", () => {\n      let factor;\n      if (this._state === this.STATE.TOUCH_ZOOM_PAN) {\n        factor = this._touchZoomDistanceStart / this._touchZoomDistanceEnd;\n        this._touchZoomDistanceStart = this._touchZoomDistanceEnd;\n        if (this.object.isPerspectiveCamera) {\n          this._eye.multiplyScalar(factor);\n        } else if (this.object.isOrthographicCamera) {\n          this.object.zoom /= factor;\n          this.object.updateProjectionMatrix();\n        } else {\n          console.warn(\"THREE.TrackballControls: Unsupported camera type\");\n        }\n      } else {\n        factor = 1 + (this._zoomEnd.y - this._zoomStart.y) * this.zoomSpeed;\n        if (Math.abs(factor - 1) > this.EPS && factor > 0) {\n          if (this.object.isPerspectiveCamera) {\n            if (factor > 1 && this._eye.length() >= this.maxDistance - this.EPS) {\n              factor = 1;\n            }\n            this._eye.multiplyScalar(factor);\n          } else if (this.object.isOrthographicCamera) {\n            if (factor > 1 && this.object.zoom < this.maxDistance * this.maxDistance) {\n              factor = 1;\n            }\n            this.object.zoom /= factor;\n          } else {\n            console.warn(\"THREE.TrackballControls: Unsupported camera type\");\n          }\n        }\n        if (this.staticMoving) {\n          this._zoomStart.copy(this._zoomEnd);\n        } else {\n          this._zoomStart.y += (this._zoomEnd.y - this._zoomStart.y) * this.dynamicDampingFactor;\n        }\n        if (this.cursorZoom) {\n          this.targetVector.copy(this.target).project(this.object);\n          let worldPos = this.cursorVector.set(this.mousePosition.x, this.mousePosition.y, this.targetVector.z).unproject(this.object);\n          this.target.lerpVectors(worldPos, this.target, factor);\n        }\n        if (this.object.isOrthographicCamera) {\n          this.object.updateProjectionMatrix();\n        }\n      }\n    });\n    __publicField(this, \"mouseChange\", new Vector2());\n    __publicField(this, \"objectUp\", new Vector3());\n    __publicField(this, \"pan\", new Vector3());\n    __publicField(this, \"panCamera\", () => {\n      if (!this.domElement) return;\n      this.mouseChange.copy(this._panEnd).sub(this._panStart);\n      if (this.mouseChange.lengthSq() > this.EPS) {\n        if (this.object.isOrthographicCamera) {\n          const orthoObject = this.object;\n          const scale_x = (orthoObject.right - orthoObject.left) / this.object.zoom;\n          const scale_y = (orthoObject.top - orthoObject.bottom) / this.object.zoom;\n          this.mouseChange.x *= scale_x;\n          this.mouseChange.y *= scale_y;\n        } else {\n          this.mouseChange.multiplyScalar(this._eye.length() * this.panSpeed);\n        }\n        this.pan.copy(this._eye).cross(this.object.up).setLength(this.mouseChange.x);\n        this.pan.add(this.objectUp.copy(this.object.up).setLength(this.mouseChange.y));\n        this.object.position.add(this.pan);\n        this.target.add(this.pan);\n        if (this.staticMoving) {\n          this._panStart.copy(this._panEnd);\n        } else {\n          this._panStart.add(this.mouseChange.subVectors(this._panEnd, this._panStart).multiplyScalar(this.dynamicDampingFactor));\n        }\n      }\n    });\n    __publicField(this, \"checkDistances\", () => {\n      if (!this.noZoom || !this.noPan) {\n        if (this._eye.lengthSq() > this.maxDistance * this.maxDistance) {\n          this.object.position.addVectors(this.target, this._eye.setLength(this.maxDistance));\n          this._zoomStart.copy(this._zoomEnd);\n        }\n        if (this._eye.lengthSq() < this.minDistance * this.minDistance) {\n          this.object.position.addVectors(this.target, this._eye.setLength(this.minDistance));\n          this._zoomStart.copy(this._zoomEnd);\n        }\n      }\n    });\n    __publicField(this, \"handleResize\", () => {\n      if (!this.domElement) return;\n      const box = this.domElement.getBoundingClientRect();\n      const d = this.domElement.ownerDocument.documentElement;\n      this.screen.left = box.left + window.pageXOffset - d.clientLeft;\n      this.screen.top = box.top + window.pageYOffset - d.clientTop;\n      this.screen.width = box.width;\n      this.screen.height = box.height;\n    });\n    __publicField(this, \"update\", () => {\n      this._eye.subVectors(this.object.position, this.target);\n      if (!this.noRotate) {\n        this.rotateCamera();\n      }\n      if (!this.noZoom) {\n        this.zoomCamera();\n      }\n      if (!this.noPan) {\n        this.panCamera();\n      }\n      this.object.position.addVectors(this.target, this._eye);\n      if (this.object.isPerspectiveCamera) {\n        this.checkDistances();\n        this.object.lookAt(this.target);\n        if (this.lastPosition.distanceToSquared(this.object.position) > this.EPS) {\n          this.dispatchEvent(this.changeEvent);\n          this.lastPosition.copy(this.object.position);\n        }\n      } else if (this.object.isOrthographicCamera) {\n        this.object.lookAt(this.target);\n        if (this.lastPosition.distanceToSquared(this.object.position) > this.EPS || this.lastZoom !== this.object.zoom) {\n          this.dispatchEvent(this.changeEvent);\n          this.lastPosition.copy(this.object.position);\n          this.lastZoom = this.object.zoom;\n        }\n      } else {\n        console.warn(\"THREE.TrackballControls: Unsupported camera type\");\n      }\n    });\n    __publicField(this, \"reset\", () => {\n      this._state = this.STATE.NONE;\n      this._keyState = this.STATE.NONE;\n      this.target.copy(this.target0);\n      this.object.position.copy(this.position0);\n      this.object.up.copy(this.up0);\n      this.object.zoom = this.zoom0;\n      this.object.updateProjectionMatrix();\n      this._eye.subVectors(this.object.position, this.target);\n      this.object.lookAt(this.target);\n      this.dispatchEvent(this.changeEvent);\n      this.lastPosition.copy(this.object.position);\n      this.lastZoom = this.object.zoom;\n    });\n    __publicField(this, \"keydown\", event => {\n      if (this.enabled === false) return;\n      window.removeEventListener(\"keydown\", this.keydown);\n      if (this._keyState !== this.STATE.NONE) {\n        return;\n      } else if (event.code === this.keys[this.STATE.ROTATE] && !this.noRotate) {\n        this._keyState = this.STATE.ROTATE;\n      } else if (event.code === this.keys[this.STATE.ZOOM] && !this.noZoom) {\n        this._keyState = this.STATE.ZOOM;\n      } else if (event.code === this.keys[this.STATE.PAN] && !this.noPan) {\n        this._keyState = this.STATE.PAN;\n      }\n    });\n    __publicField(this, \"onPointerDown\", event => {\n      if (this.enabled === false) return;\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseDown(event);\n          break;\n      }\n    });\n    __publicField(this, \"onPointerMove\", event => {\n      if (this.enabled === false) return;\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseMove(event);\n          break;\n      }\n    });\n    __publicField(this, \"onPointerUp\", event => {\n      if (this.enabled === false) return;\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseUp();\n          break;\n      }\n    });\n    __publicField(this, \"keyup\", () => {\n      if (this.enabled === false) return;\n      this._keyState = this.STATE.NONE;\n      window.addEventListener(\"keydown\", this.keydown);\n    });\n    __publicField(this, \"onMouseDown\", event => {\n      if (!this.domElement) return;\n      if (this._state === this.STATE.NONE) {\n        switch (event.button) {\n          case this.mouseButtons.LEFT:\n            this._state = this.STATE.ROTATE;\n            break;\n          case this.mouseButtons.MIDDLE:\n            this._state = this.STATE.ZOOM;\n            break;\n          case this.mouseButtons.RIGHT:\n            this._state = this.STATE.PAN;\n            break;\n        }\n      }\n      const state = this._keyState !== this.STATE.NONE ? this._keyState : this._state;\n      if (state === this.STATE.ROTATE && !this.noRotate) {\n        this._moveCurr.copy(this.getMouseOnCircle(event.pageX, event.pageY));\n        this._movePrev.copy(this._moveCurr);\n      } else if (state === this.STATE.ZOOM && !this.noZoom) {\n        this._zoomStart.copy(this.getMouseOnScreen(event.pageX, event.pageY));\n        this._zoomEnd.copy(this._zoomStart);\n      } else if (state === this.STATE.PAN && !this.noPan) {\n        this._panStart.copy(this.getMouseOnScreen(event.pageX, event.pageY));\n        this._panEnd.copy(this._panStart);\n      }\n      this.domElement.ownerDocument.addEventListener(\"pointermove\", this.onPointerMove);\n      this.domElement.ownerDocument.addEventListener(\"pointerup\", this.onPointerUp);\n      this.dispatchEvent(this.startEvent);\n    });\n    __publicField(this, \"onMouseMove\", event => {\n      if (this.enabled === false) return;\n      const state = this._keyState !== this.STATE.NONE ? this._keyState : this._state;\n      if (state === this.STATE.ROTATE && !this.noRotate) {\n        this._movePrev.copy(this._moveCurr);\n        this._moveCurr.copy(this.getMouseOnCircle(event.pageX, event.pageY));\n      } else if (state === this.STATE.ZOOM && !this.noZoom) {\n        this._zoomEnd.copy(this.getMouseOnScreen(event.pageX, event.pageY));\n      } else if (state === this.STATE.PAN && !this.noPan) {\n        this._panEnd.copy(this.getMouseOnScreen(event.pageX, event.pageY));\n      }\n    });\n    __publicField(this, \"onMouseUp\", () => {\n      if (!this.domElement) return;\n      if (this.enabled === false) return;\n      this._state = this.STATE.NONE;\n      this.domElement.ownerDocument.removeEventListener(\"pointermove\", this.onPointerMove);\n      this.domElement.ownerDocument.removeEventListener(\"pointerup\", this.onPointerUp);\n      this.dispatchEvent(this.endEvent);\n    });\n    __publicField(this, \"mousewheel\", event => {\n      if (this.enabled === false) return;\n      if (this.noZoom === true) return;\n      event.preventDefault();\n      switch (event.deltaMode) {\n        case 2:\n          this._zoomStart.y -= event.deltaY * 0.025;\n          break;\n        case 1:\n          this._zoomStart.y -= event.deltaY * 0.01;\n          break;\n        default:\n          this._zoomStart.y -= event.deltaY * 25e-5;\n          break;\n      }\n      this.mousePosition.x = event.offsetX / this.screen.width * 2 - 1;\n      this.mousePosition.y = -(event.offsetY / this.screen.height) * 2 + 1;\n      this.dispatchEvent(this.startEvent);\n      this.dispatchEvent(this.endEvent);\n    });\n    __publicField(this, \"touchstart\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          this._state = this.STATE.TOUCH_ROTATE;\n          this._moveCurr.copy(this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          this._movePrev.copy(this._moveCurr);\n          break;\n        default:\n          this._state = this.STATE.TOUCH_ZOOM_PAN;\n          const dx = event.touches[0].pageX - event.touches[1].pageX;\n          const dy = event.touches[0].pageY - event.touches[1].pageY;\n          this._touchZoomDistanceEnd = this._touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);\n          const x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n          const y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n          this._panStart.copy(this.getMouseOnScreen(x, y));\n          this._panEnd.copy(this._panStart);\n          break;\n      }\n      this.dispatchEvent(this.startEvent);\n    });\n    __publicField(this, \"touchmove\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          this._movePrev.copy(this._moveCurr);\n          this._moveCurr.copy(this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          break;\n        default:\n          const dx = event.touches[0].pageX - event.touches[1].pageX;\n          const dy = event.touches[0].pageY - event.touches[1].pageY;\n          this._touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);\n          const x = (event.touches[0].pageX + event.touches[1].pageX) / 2;\n          const y = (event.touches[0].pageY + event.touches[1].pageY) / 2;\n          this._panEnd.copy(this.getMouseOnScreen(x, y));\n          break;\n      }\n    });\n    __publicField(this, \"touchend\", event => {\n      if (this.enabled === false) return;\n      switch (event.touches.length) {\n        case 0:\n          this._state = this.STATE.NONE;\n          break;\n        case 1:\n          this._state = this.STATE.TOUCH_ROTATE;\n          this._moveCurr.copy(this.getMouseOnCircle(event.touches[0].pageX, event.touches[0].pageY));\n          this._movePrev.copy(this._moveCurr);\n          break;\n      }\n      this.dispatchEvent(this.endEvent);\n    });\n    __publicField(this, \"contextmenu\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n    });\n    // https://github.com/mrdoob/three.js/issues/20575\n    __publicField(this, \"connect\", domElement => {\n      if (domElement === document) {\n        console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      this.domElement = domElement;\n      this.domElement.addEventListener(\"contextmenu\", this.contextmenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"wheel\", this.mousewheel);\n      this.domElement.addEventListener(\"touchstart\", this.touchstart);\n      this.domElement.addEventListener(\"touchend\", this.touchend);\n      this.domElement.addEventListener(\"touchmove\", this.touchmove);\n      this.domElement.ownerDocument.addEventListener(\"pointermove\", this.onPointerMove);\n      this.domElement.ownerDocument.addEventListener(\"pointerup\", this.onPointerUp);\n      window.addEventListener(\"keydown\", this.keydown);\n      window.addEventListener(\"keyup\", this.keyup);\n      this.handleResize();\n    });\n    __publicField(this, \"dispose\", () => {\n      if (!this.domElement) return;\n      this.domElement.removeEventListener(\"contextmenu\", this.contextmenu);\n      this.domElement.removeEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.removeEventListener(\"wheel\", this.mousewheel);\n      this.domElement.removeEventListener(\"touchstart\", this.touchstart);\n      this.domElement.removeEventListener(\"touchend\", this.touchend);\n      this.domElement.removeEventListener(\"touchmove\", this.touchmove);\n      this.domElement.ownerDocument.removeEventListener(\"pointermove\", this.onPointerMove);\n      this.domElement.ownerDocument.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"keydown\", this.keydown);\n      window.removeEventListener(\"keyup\", this.keyup);\n    });\n    this.object = object;\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.up0 = this.object.up.clone();\n    this.zoom0 = this.object.zoom;\n    if (domElement !== void 0) this.connect(domElement);\n    this.update();\n  }\n}\nexport { TrackballControls };\n//# sourceMappingURL=TrackballControls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}