{"ast":null,"code":"/* @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Mesh, MeshBasicMaterial, SphereGeometry, Vector3 } from 'three';\nexport class GroundedSkybox extends Mesh {\n  constructor() {\n    super(undefined, new MeshBasicMaterial({\n      depthWrite: false\n    }));\n    this.height = 0;\n    this.radius = 0;\n    this.resolution = 0;\n    this.userData.noHit = true;\n  }\n  get map() {\n    return this.material.map;\n  }\n  set map(skybox) {\n    this.material.map = skybox;\n  }\n  isUsable() {\n    return this.height > 0 && this.radius > 0 && this.geometry != null && this.map != null;\n  }\n  updateGeometry(height = this.height, radius = this.radius, resolution = 128) {\n    if (height != this.height || radius != this.radius || resolution != this.resolution) {\n      this.height = height;\n      this.radius = radius;\n      this.resolution = resolution;\n      if (height > 0 && radius > 0) {\n        this.geometry.dispose();\n        this.geometry = makeGeometry(height, radius, resolution);\n      }\n    }\n  }\n}\nfunction makeGeometry(height, radius, resolution) {\n  const geometry = new SphereGeometry(radius, 2 * resolution, resolution);\n  geometry.scale(1, 1, -1);\n  const pos = geometry.getAttribute('position');\n  const tmp = new Vector3();\n  for (let i = 0; i < pos.count; ++i) {\n    tmp.fromBufferAttribute(pos, i);\n    if (tmp.y < 0) {\n      // Smooth out the transition from flat floor to sphere:\n      const y1 = -height * 3 / 2;\n      const f = tmp.y < y1 ? -height / tmp.y : 1 - tmp.y * tmp.y / (3 * y1 * y1);\n      tmp.multiplyScalar(f);\n      tmp.toArray(pos.array, 3 * i);\n    }\n  }\n  pos.needsUpdate = true;\n  return geometry;\n}\n//# sourceMappingURL=GroundedSkybox.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}