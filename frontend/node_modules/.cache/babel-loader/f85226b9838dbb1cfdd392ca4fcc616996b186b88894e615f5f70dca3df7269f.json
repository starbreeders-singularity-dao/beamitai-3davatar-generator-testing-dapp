{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { InvalidBytesError, InvalidNumberError } from 'web3-errors';\nimport { VALID_ETH_BASE_TYPES } from './constants.js';\nimport { isAbiParameterSchema } from './validation/abi.js';\nimport { isHexStrict } from './validation/string.js';\nimport { Web3ValidatorError } from './errors.js';\nconst extraTypes = ['hex', 'number', 'blockNumber', 'blockNumberOrTag', 'filter', 'bloom'];\nexport const parseBaseType = type => {\n  // Remove all empty spaces to avoid any parsing issue.\n  let strippedType = type.replace(/ /, '');\n  let baseTypeSize;\n  let isArray = false;\n  let arraySizes = [];\n  if (type.includes('[')) {\n    // Extract the array type\n    strippedType = strippedType.slice(0, strippedType.indexOf('['));\n    // Extract array indexes\n    arraySizes = [...type.matchAll(/(?:\\[(\\d*)\\])/g)].map(match => parseInt(match[1], 10)).map(size => Number.isNaN(size) ? -1 : size);\n    isArray = arraySizes.length > 0;\n  }\n  if (VALID_ETH_BASE_TYPES.includes(strippedType)) {\n    return {\n      baseType: strippedType,\n      isArray,\n      baseTypeSize,\n      arraySizes\n    };\n  }\n  if (strippedType.startsWith('int')) {\n    baseTypeSize = parseInt(strippedType.substring(3), 10);\n    strippedType = 'int';\n  } else if (strippedType.startsWith('uint')) {\n    baseTypeSize = parseInt(type.substring(4), 10);\n    strippedType = 'uint';\n  } else if (strippedType.startsWith('bytes')) {\n    baseTypeSize = parseInt(strippedType.substring(5), 10);\n    strippedType = 'bytes';\n  } else {\n    return {\n      baseType: undefined,\n      isArray: false,\n      baseTypeSize: undefined,\n      arraySizes\n    };\n  }\n  return {\n    baseType: strippedType,\n    isArray,\n    baseTypeSize,\n    arraySizes\n  };\n};\nconst convertEthType = (type, parentSchema = {}) => {\n  const typePropertyPresent = Object.keys(parentSchema).includes('type');\n  if (typePropertyPresent) {\n    throw new Web3ValidatorError([{\n      keyword: 'eth',\n      message: 'Either \"eth\" or \"type\" can be presented in schema',\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  const {\n    baseType,\n    baseTypeSize\n  } = parseBaseType(type);\n  if (!baseType && !extraTypes.includes(type)) {\n    throw new Web3ValidatorError([{\n      keyword: 'eth',\n      message: `Eth data type \"${type}\" is not valid`,\n      params: {\n        eth: type\n      },\n      instancePath: '',\n      schemaPath: ''\n    }]);\n  }\n  if (baseType) {\n    if (baseType === 'tuple') {\n      throw new Error('\"tuple\" type is not implemented directly.');\n    }\n    return {\n      format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ''}`,\n      required: true\n    };\n  }\n  if (type) {\n    return {\n      format: type,\n      required: true\n    };\n  }\n  return {};\n};\nexport const abiSchemaToJsonSchema = (abis, level = '/0') => {\n  const schema = {\n    type: 'array',\n    items: [],\n    maxItems: abis.length,\n    minItems: abis.length\n  };\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if (isAbiParameterSchema(abi)) {\n      abiType = abi.type;\n      abiName = abi.name || `${level}/${index}`;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      abiName = `${level}/${index}`;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[0] && typeof abi[0] === 'string' && abi[0].startsWith('tuple') && !Array.isArray(abi[0]) && abi[1] && Array.isArray(abi[1])) {\n        // eslint-disable-next-line prefer-destructuring\n        abiType = abi[0];\n        abiName = `${level}/${index}`;\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiName = `${level}/${index}`;\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = parseBaseType(abiType);\n    let childSchema;\n    let lastSchema = schema;\n    for (let i = arraySizes.length - 1; i > 0; i -= 1) {\n      childSchema = {\n        type: 'array',\n        $id: abiName,\n        items: [],\n        maxItems: arraySizes[i],\n        minItems: arraySizes[i]\n      };\n      if (arraySizes[i] < 0) {\n        delete childSchema.maxItems;\n        delete childSchema.minItems;\n      }\n      // lastSchema.items is a Schema, concat with 'childSchema'\n      if (!Array.isArray(lastSchema.items)) {\n        lastSchema.items = [lastSchema.items, childSchema];\n      } // lastSchema.items is an empty Scheme array, set it to 'childSchema'\n      else if (lastSchema.items.length === 0) {\n        lastSchema.items = [childSchema];\n      } // lastSchema.items is a non-empty Scheme array, append 'childSchema'\n      else {\n        lastSchema.items.push(childSchema);\n      }\n      lastSchema = childSchema;\n    }\n    if (baseType === 'tuple' && !isArray) {\n      const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);\n      nestedTuple.$id = abiName;\n      lastSchema.items.push(nestedTuple);\n    } else if (baseType === 'tuple' && isArray) {\n      const arraySize = arraySizes[0];\n      const item = Object.assign({\n        type: 'array',\n        $id: abiName,\n        items: abiSchemaToJsonSchema(abiComponents, abiName)\n      }, arraySize >= 0 && {\n        minItems: arraySize,\n        maxItems: arraySize\n      });\n      lastSchema.items.push(item);\n    } else if (isArray) {\n      const arraySize = arraySizes[0];\n      const item = Object.assign({\n        type: 'array',\n        $id: abiName,\n        items: convertEthType(abiType)\n      }, arraySize >= 0 && {\n        minItems: arraySize,\n        maxItems: arraySize\n      });\n      lastSchema.items.push(item);\n    } else if (Array.isArray(lastSchema.items)) {\n      // Array of non-tuple items\n      lastSchema.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    } else {\n      // Nested object\n      lastSchema.items.push(Object.assign({\n        $id: abiName\n      }, convertEthType(abiType)));\n    }\n    lastSchema = schema;\n  }\n  return schema;\n};\nexport const ethAbiToJsonSchema = abis => abiSchemaToJsonSchema(abis);\nexport const fetchArrayElement = (data, level) => {\n  if (level === 1) {\n    return data;\n  }\n  return fetchArrayElement(data[0], level - 1);\n};\nexport const transformJsonDataToAbiFormat = (abis, data, transformedData) => {\n  const newData = [];\n  for (const [index, abi] of abis.entries()) {\n    // eslint-disable-next-line no-nested-ternary\n    let abiType;\n    let abiName;\n    let abiComponents = [];\n    // If it's a complete Abi Parameter\n    // e.g. {name: 'a', type: 'uint'}\n    if (isAbiParameterSchema(abi)) {\n      abiType = abi.type;\n      abiName = abi.name;\n      abiComponents = abi.components;\n      // If its short form string value e.g. ['uint']\n    } else if (typeof abi === 'string') {\n      abiType = abi;\n      // If it's provided in short form of tuple e.g. [['uint', 'string']]\n    } else if (Array.isArray(abi)) {\n      // If its custom tuple e.g. ['tuple[2]', ['uint', 'string']]\n      if (abi[1] && Array.isArray(abi[1])) {\n        abiType = abi[0];\n        abiComponents = abi[1];\n      } else {\n        abiType = 'tuple';\n        abiComponents = abi;\n      }\n    }\n    const {\n      baseType,\n      isArray,\n      arraySizes\n    } = parseBaseType(abiType);\n    const dataItem = Array.isArray(data) ? data[index] : data[abiName];\n    if (baseType === 'tuple' && !isArray) {\n      newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));\n    } else if (baseType === 'tuple' && isArray) {\n      const tupleData = [];\n      for (const tupleItem of dataItem) {\n        // Nested array\n        if (arraySizes.length > 1) {\n          const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);\n          const nestedData = [];\n          for (const nestedItem of nestedItems) {\n            nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));\n          }\n          tupleData.push(nestedData);\n        } else {\n          tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));\n        }\n      }\n      newData.push(tupleData);\n    } else {\n      newData.push(dataItem);\n    }\n  }\n  // Have to reassign before pushing to transformedData\n  // eslint-disable-next-line no-param-reassign\n  transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];\n  transformedData.push(...newData);\n  return transformedData;\n};\n/**\n * Code points to int\n */\nexport const codePointToInt = codePoint => {\n  if (codePoint >= 48 && codePoint <= 57) {\n    /* ['0'..'9'] -> [0..9] */\n    return codePoint - 48;\n  }\n  if (codePoint >= 65 && codePoint <= 70) {\n    /* ['A'..'F'] -> [10..15] */\n    return codePoint - 55;\n  }\n  if (codePoint >= 97 && codePoint <= 102) {\n    /* ['a'..'f'] -> [10..15] */\n    return codePoint - 87;\n  }\n  throw new Error(`Invalid code point: ${codePoint}`);\n};\n/**\n * Converts value to it's number representation\n */\nexport const hexToNumber = value => {\n  if (!isHexStrict(value)) {\n    throw new Error('Invalid hex string');\n  }\n  const [negative, hexValue] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n  const num = BigInt(hexValue);\n  if (num > Number.MAX_SAFE_INTEGER) {\n    return negative ? -num : num;\n  }\n  if (num < Number.MIN_SAFE_INTEGER) {\n    return num;\n  }\n  return negative ? -1 * Number(num) : Number(num);\n};\n/**\n * Converts value to it's hex representation\n */\nexport const numberToHex = value => {\n  if ((typeof value === 'number' || typeof value === 'bigint') && value < 0) {\n    return `-0x${value.toString(16).slice(1)}`;\n  }\n  if ((typeof value === 'number' || typeof value === 'bigint') && value >= 0) {\n    return `0x${value.toString(16)}`;\n  }\n  if (typeof value === 'string' && isHexStrict(value)) {\n    const [negative, hex] = value.startsWith('-') ? [true, value.slice(1)] : [false, value];\n    const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];\n    return `${negative ? '-' : ''}0x${hexValue.replace(/^0+/, '').toLowerCase()}`;\n  }\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return numberToHex(BigInt(value));\n  }\n  throw new InvalidNumberError(value);\n};\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n */\nexport const padLeft = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return value.padStart(characterAmount, sign);\n  }\n  const hex = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n  const [prefix, hexValue] = hex.startsWith('-') ? ['-0x', hex.slice(3)] : ['0x', hex.slice(2)];\n  return `${prefix}${hexValue.padStart(characterAmount, sign)}`;\n};\nexport function uint8ArrayToHexString(uint8Array) {\n  let hexString = '0x';\n  for (const e of uint8Array) {\n    const hex = e.toString(16);\n    hexString += hex.length === 1 ? `0${hex}` : hex;\n  }\n  return hexString;\n}\n// for optimized technique for hex to bytes conversion\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102\n};\nfunction charCodeToBase16(char) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;\n  if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);\n  if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);\n  return undefined;\n}\nexport function hexToUint8Array(hex) {\n  let offset = 0;\n  if (hex.startsWith('0') && (hex[1] === 'x' || hex[1] === 'X')) {\n    offset = 2;\n  }\n  if (hex.length % 2 !== 0) {\n    throw new InvalidBytesError(`hex string has odd length: ${hex}`);\n  }\n  const length = (hex.length - offset) / 2;\n  const bytes = new Uint8Array(length);\n  for (let index = 0, j = offset; index < length; index += 1) {\n    // eslint-disable-next-line no-plusplus\n    const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++));\n    // eslint-disable-next-line no-plusplus\n    const nibbleRight = charCodeToBase16(hex.charCodeAt(j++));\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new InvalidBytesError(`Invalid byte sequence (\"${hex[j - 2]}${hex[j - 1]}\" in \"${hex}\").`);\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight;\n  }\n  return bytes;\n}\n// @TODO: Remove this function and its usages once all sub dependencies uses version 1.3.3 or above of @noble/hashes\nexport function ensureIfUint8Array(data) {\n  var _a;\n  if (!(data instanceof Uint8Array) && ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {\n    return Uint8Array.from(data);\n  }\n  return data;\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}