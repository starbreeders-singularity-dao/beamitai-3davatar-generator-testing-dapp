{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconsole.log('Starting NFT.Storage setup...');\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found');\n}\nconst client = new NFTStorage({\n  token: NFT_STORAGE_KEY.trim()\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // First get the GLB file\n    console.log('Fetching GLB from:', glbUrl);\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Upload to IPFS\n    console.log('Uploading to IPFS...');\n    const cid = await client.storeBlob(glbBlob);\n    console.log('File uploaded to IPFS:', cid);\n\n    // Create and upload metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: `ipfs://${cid}`,\n      animation_url: `ipfs://${cid}`,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n    console.log('Uploading metadata...');\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataCid = await client.storeBlob(metadataBlob);\n    console.log('Metadata uploaded:', metadataCid);\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('Upload error:', {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","Error","client","token","trim","uploadToIPFS","glbUrl","originalNFT","response","fetch","ok","status","glbBlob","blob","size","type","cid","storeBlob","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","value","tokenId","chainId","metadataBlob","Blob","JSON","stringify","metadataCid","error","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\nconsole.log('Starting NFT.Storage setup...');\n\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found');\n}\n\nconst client = new NFTStorage({ token: NFT_STORAGE_KEY.trim() });\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n        \n        // First get the GLB file\n        console.log('Fetching GLB from:', glbUrl);\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Upload to IPFS\n        console.log('Uploading to IPFS...');\n        const cid = await client.storeBlob(glbBlob);\n        console.log('File uploaded to IPFS:', cid);\n\n        // Create and upload metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: `ipfs://${cid}`,\n            animation_url: `ipfs://${cid}`,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n\n        console.log('Uploading metadata...');\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { \n            type: 'application/json' \n        });\n        const metadataCid = await client.storeBlob(metadataBlob);\n        console.log('Metadata uploaded:', metadataCid);\n\n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('Upload error:', {\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        });\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AAExC,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAE7DC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAE5C,IAAI,CAACL,eAAe,EAAE;EAClB,MAAM,IAAIM,KAAK,CAAC,+BAA+B,CAAC;AACpD;AAEA,MAAMC,MAAM,GAAG,IAAIR,UAAU,CAAC;EAAES,KAAK,EAAER,eAAe,CAACS,IAAI,CAAC;AAAE,CAAC,CAAC;AAEhE,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAR,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACAD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,MAAM,CAAC;IACzC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,CAAC;IACpC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,wBAAwBO,QAAQ,CAACG,MAAM,EAAE,CAAC;IAC9D;IACA,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrCd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;MAC7Bc,IAAI,EAAEF,OAAO,CAACE,IAAI;MAClBC,IAAI,EAAEH,OAAO,CAACG;IAClB,CAAC,CAAC;;IAEF;IACAhB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMgB,GAAG,GAAG,MAAMd,MAAM,CAACe,SAAS,CAACL,OAAO,CAAC;IAC3Cb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEgB,GAAG,CAAC;;IAE1C;IACA,MAAME,QAAQ,GAAG;MACbC,IAAI,EAAE,qBAAqBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACvCC,WAAW,EAAE,oCAAoC;MACjDC,KAAK,EAAE,UAAUP,GAAG,EAAE;MACtBQ,aAAa,EAAE,UAAUR,GAAG,EAAE;MAC9BS,UAAU,EAAE,CACR;QACIC,UAAU,EAAE,iBAAiB;QAC7BC,KAAK,EAAEpB,WAAW,CAACqB;MACvB,CAAC,EACD;QACIF,UAAU,EAAE,mBAAmB;QAC/BC,KAAK,EAAEpB,WAAW,CAACsB;MACvB,CAAC;IAET,CAAC;IAED9B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAM8B,YAAY,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE;MACtDH,IAAI,EAAE;IACV,CAAC,CAAC;IACF,MAAMmB,WAAW,GAAG,MAAMhC,MAAM,CAACe,SAAS,CAACa,YAAY,CAAC;IACxD/B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkC,WAAW,CAAC;IAE9C,OAAO,UAAUA,WAAW,EAAE;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZpC,OAAO,CAACoC,KAAK,CAAC,eAAe,EAAE;MAC3BC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBjB,IAAI,EAAEgB,KAAK,CAAChB,IAAI;MAChBkB,KAAK,EAAEF,KAAK,CAACE;IACjB,CAAC,CAAC;IACF,MAAMF,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}