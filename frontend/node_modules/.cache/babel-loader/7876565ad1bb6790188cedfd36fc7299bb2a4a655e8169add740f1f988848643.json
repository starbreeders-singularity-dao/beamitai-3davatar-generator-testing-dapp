{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n  const [modelViewerError, setModelViewerError] = useState(null);\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n  };\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: selectedNFT\n        })\n      });\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: downloadData.filename\n        })\n      });\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('GLB status response:', data);\n      if (data.status === 'ready' && data.fileName) {\n        console.log('GLB file found:', {\n          fileName: data.fileName\n        });\n        const proxyUrl = `http://localhost:5001/proxy/glb/${data.fileName}`;\n        setGlbUrl(proxyUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n        console.log('States updated with proxy URL:', {\n          glbUrl: proxyUrl,\n          glbFileName: data.fileName,\n          glbStatus: 'ready',\n          uploadStatus: '3D Avatar Ready!'\n        });\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n    }\n  };\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n  useEffect(() => {\n    console.log('3D Model State Update:', {\n      glbStatus,\n      glbUrl,\n      glbFileName,\n      uploadStatus,\n      modelViewerError\n    });\n  }, [glbStatus, glbUrl, glbFileName, uploadStatus, modelViewerError]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px',\n          marginLeft: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"wallet-button\",\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"wallet-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: polygonIcon,\n          alt: \"Polygon Icon\",\n          style: {\n            width: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Your Avatar Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), selectedNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedNFT,\n            alt: \"Selected NFT\",\n            className: \"selected-nft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"nft-button\",\n            onClick: handleGenerateFullBodyImage,\n            children: loading ? 'Generating...' : 'Create Full Body Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), showNFTGrid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Please select an image to create your avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-gallery\",\n          children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: nft.image_url,\n              alt: nft.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCreateAvatar(nft.image_url),\n              className: \"nft-button\",\n              children: \"Choose PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pink-text\",\n          children: \"Please connect your MetaMask wallet to view your NFTs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-body-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"pink-text\",\n            children: \"Your Full Body Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-image\",\n          children: uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"model-container\",\n            children: glbStatus === 'ready' && glbUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: uploadStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"model-viewer-container\",\n                children: [uploadStatus === 'Processing your 3D Avatar...' && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading\",\n                  children: \"Processing...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 27\n                }, this), glbStatus === 'ready' && glbUrl && /*#__PURE__*/_jsxDEV(\"model-viewer\", {\n                  src: glbUrl,\n                  alt: \"3D Avatar\",\n                  \"auto-rotate\": true,\n                  \"camera-controls\": true,\n                  \"camera-orbit\": \"0deg 75deg 2.5m\",\n                  \"min-camera-orbit\": \"auto auto 1.5m\",\n                  \"max-camera-orbit\": \"auto auto 4m\",\n                  \"camera-target\": \"0m -0.2m 0m\",\n                  bounds: \"tight\",\n                  \"field-of-view\": \"30deg\",\n                  \"environment-image\": \"neutral\",\n                  \"shadow-intensity\": \"1\",\n                  exposure: \"1\",\n                  \"shadow-softness\": \"1\",\n                  \"interaction-prompt\": \"auto\",\n                  \"auto-rotate-delay\": \"0\",\n                  \"rotation-per-second\": \"30deg\",\n                  \"min-field-of-view\": \"25deg\",\n                  \"max-field-of-view\": \"45deg\",\n                  \"interpolation-decay\": \"200\",\n                  loading: \"eager\",\n                  reveal: \"auto\",\n                  style: {\n                    width: '600px',\n                    height: '600px',\n                    backgroundColor: '#000000',\n                    transform: 'translateY(-15%)'\n                  },\n                  onLoad: () => {\n                    console.log('Model viewer loaded successfully');\n                    console.log('Model source:', glbUrl);\n                    setModelViewerError(null);\n                    const modelViewer = document.querySelector('model-viewer');\n                    console.log('Model loaded:', modelViewer.loaded);\n                    console.log('Model dimensions:', modelViewer.getBoundingClientRect());\n                  },\n                  onError: error => {\n                    console.error('Model viewer error:', error);\n                    console.error('Failed URL:', glbUrl);\n                    console.error('Error details:', {\n                      type: error.type,\n                      detail: error.detail,\n                      message: error.message\n                    });\n                    setModelViewerError(error.detail);\n                  },\n                  onProgress: event => {\n                    const progress = event.detail.totalProgress * 100;\n                    console.log('Loading progress:', {\n                      progress: progress.toFixed(2) + '%',\n                      loaded: event.detail.loaded,\n                      total: event.detail.total\n                    });\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 27\n                }, this), modelViewerError && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"error-message\",\n                  children: [\"Error loading 3D model: \", modelViewerError]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 23\n              }, this), glbFileName && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"glb-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"glb-filename\",\n                  children: [\"GLB File: \", glbFileName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"glb-url\",\n                  children: [\"URL: \", glbUrl]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleMintNFT,\n                className: \"nft-button mint-button\",\n                style: {\n                  marginTop: '20px'\n                },\n                children: \"Mint NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Processing your avatar... Please wait.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fullBodyImageUrl,\n              alt: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackButton,\n                className: \"nft-button\",\n                children: \"Back to NFT Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBeamIt,\n                className: \"nft-button beam-button\",\n                children: \"Beam It!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-message\",\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qegyWvhetzNNuOvu1MhL88sv2xw=\");\n_c = App;\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n\n.glb-filename {\n  margin-top: 10px;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.model-viewer-container {\n  position: relative;\n  width: 600px;\n  height: 600px;\n  margin: 0 auto;\n}\n\n.error-message {\n  color: #ff4444;\n  background: rgba(255, 0, 0, 0.1);\n  padding: 10px;\n  margin-top: 10px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.glb-info {\n  margin: 15px 0;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n.glb-filename {\n  font-family: monospace;\n  margin: 5px 0;\n}\n\n.glb-url {\n  font-family: monospace;\n  font-size: 0.8em;\n  word-break: break-all;\n  margin: 5px 0;\n  color: #666;\n}\n`;\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","logo","polygonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","account","setAccount","nfts","setNfts","loading","setLoading","statusMessage","setStatusMessage","fullBodyImageUrl","setFullBodyImageUrl","showNFTGrid","setShowNFTGrid","glbUrl","setGlbUrl","glbStatus","setGlbStatus","uploadStatus","setUploadStatus","showMintButton","setShowMintButton","glbFileName","setGlbFileName","modelViewerError","setModelViewerError","fetchNFTs","connectWallet","window","ethereum","accounts","request","method","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","status","data","json","handleCreateAvatar","imageUrl","handleBackButton","handleGenerateFullBodyImage","downloadResponse","body","JSON","stringify","errorText","text","downloadData","generateResponse","filename","imagePath","handleBeamIt","split","pop","fileName","checkGlbStatus","proxyUrl","interval","setInterval","clearInterval","handleMintNFT","className","children","src","alt","style","maxWidth","marginLeft","_jsxFileName","lineNumber","columnNumber","position","top","right","display","alignItems","gap","onClick","width","map","nft","index","image_url","name","bounds","exposure","reveal","height","backgroundColor","transform","onLoad","modelViewer","document","querySelector","loaded","getBoundingClientRect","onError","type","detail","message","onProgress","event","progress","totalProgress","toFixed","total","marginTop","_c","styles","styleSheet","createElement","innerText","head","appendChild","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n  const [modelViewerError, setModelViewerError] = useState(null);\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n  };\n\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: selectedNFT\n        }),\n      });\n\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: downloadData.filename \n        }),\n      });\n\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n  \n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      \n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          fileName: filename \n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n  \n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n      \n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      console.log('GLB status response:', data);\n      \n      if (data.status === 'ready' && data.fileName) {\n        console.log('GLB file found:', {\n          fileName: data.fileName\n        });\n        const proxyUrl = `http://localhost:5001/proxy/glb/${data.fileName}`;\n        setGlbUrl(proxyUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n        console.log('States updated with proxy URL:', {\n          glbUrl: proxyUrl,\n          glbFileName: data.fileName,\n          glbStatus: 'ready',\n          uploadStatus: '3D Avatar Ready!'\n        });\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n\n  useEffect(() => {\n    console.log('3D Model State Update:', {\n      glbStatus,\n      glbUrl,\n      glbFileName,\n      uploadStatus,\n      modelViewerError\n    });\n  }, [glbStatus, glbUrl, glbFileName, uploadStatus, modelViewerError]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px', marginLeft: '20px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20, display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <button onClick={connectWallet} className=\"wallet-button\">\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet} className=\"wallet-button\">Disconnect</button>}\n          <img src={polygonIcon} alt=\"Polygon Icon\" style={{ width: '30px' }} />\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        <div className=\"avatar-selection\">\n          <h2 className=\"pink-text\">Your Avatar Selection</h2>\n          {selectedNFT && (\n            <div>\n              <img src={selectedNFT} alt=\"Selected NFT\" className=\"selected-nft\" />\n              <button className=\"nft-button\" onClick={handleGenerateFullBodyImage}>\n                {loading ? 'Generating...' : 'Create Full Body Image'}\n              </button>\n              <p className=\"status-message\">{statusMessage}</p>\n              {loading && <div className=\"loading-dots\">...</div>}\n            </div>\n          )}\n        </div>\n        \n        {showNFTGrid ? (\n          <div className=\"nft-gallery-container\">\n            <h2 className=\"pink-text\">Please select an image to create your avatar</h2>\n            {account ? (\n              <div className=\"nft-gallery\">\n                {nfts.map((nft, index) => (\n                  <div key={index} className=\"nft-item\">\n                    <img src={nft.image_url} alt={nft.name} style={{ width: '100px' }} />\n                    <p>{nft.name}</p>\n                    <button onClick={() => handleCreateAvatar(nft.image_url)} className=\"nft-button\">Choose PFP</button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"pink-text\">Please connect your MetaMask wallet to view your NFTs.</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"full-body-container\">\n            <div className=\"full-body-header\">\n              <h2 className=\"pink-text\">Your Full Body Image</h2>\n            </div>\n            \n            <div className=\"full-body-image\">\n              {uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? (\n                <div className=\"model-container\">\n                  {glbStatus === 'ready' && glbUrl ? (\n                    <>\n                      <p>{uploadStatus}</p>\n                      <div className=\"model-viewer-container\">\n                        {uploadStatus === 'Processing your 3D Avatar...' && (\n                          <div className=\"loading\">Processing...</div>\n                        )}\n                        {glbStatus === 'ready' && glbUrl && (\n                          <model-viewer\n                            src={glbUrl}\n                            alt=\"3D Avatar\"\n                            auto-rotate\n                            camera-controls\n                            camera-orbit=\"0deg 75deg 2.5m\"\n                            min-camera-orbit=\"auto auto 1.5m\"\n                            max-camera-orbit=\"auto auto 4m\"\n                            camera-target=\"0m -0.2m 0m\"\n                            bounds=\"tight\"\n                            field-of-view=\"30deg\"\n                            environment-image=\"neutral\"\n                            shadow-intensity=\"1\"\n                            exposure=\"1\"\n                            shadow-softness=\"1\"\n                            interaction-prompt=\"auto\"\n                            auto-rotate-delay=\"0\"\n                            rotation-per-second=\"30deg\"\n                            min-field-of-view=\"25deg\"\n                            max-field-of-view=\"45deg\"\n                            interpolation-decay=\"200\"\n                            loading=\"eager\"\n                            reveal=\"auto\"\n                            style={{\n                              width: '600px', \n                              height: '600px', \n                              backgroundColor: '#000000',\n                              transform: 'translateY(-15%)'\n                            }}\n                            onLoad={() => {\n                              console.log('Model viewer loaded successfully');\n                              console.log('Model source:', glbUrl);\n                              setModelViewerError(null);\n                              const modelViewer = document.querySelector('model-viewer');\n                              console.log('Model loaded:', modelViewer.loaded);\n                              console.log('Model dimensions:', modelViewer.getBoundingClientRect());\n                            }}\n                            onError={(error) => {\n                              console.error('Model viewer error:', error);\n                              console.error('Failed URL:', glbUrl);\n                              console.error('Error details:', {\n                                type: error.type,\n                                detail: error.detail,\n                                message: error.message\n                              });\n                              setModelViewerError(error.detail);\n                            }}\n                            onProgress={(event) => {\n                              const progress = event.detail.totalProgress * 100;\n                              console.log('Loading progress:', {\n                                progress: progress.toFixed(2) + '%',\n                                loaded: event.detail.loaded,\n                                total: event.detail.total\n                              });\n                            }}\n                          ></model-viewer>\n                        )}\n                        {modelViewerError && (\n                          <div className=\"error-message\">\n                            Error loading 3D model: {modelViewerError}\n                          </div>\n                        )}\n                      </div>\n                      {glbFileName && (\n                        <div className=\"glb-info\">\n                          <p className=\"glb-filename\">GLB File: {glbFileName}</p>\n                          <p className=\"glb-url\">URL: {glbUrl}</p>\n                        </div>\n                      )}\n                      <button \n                        onClick={handleMintNFT} \n                        className=\"nft-button mint-button\"\n                        style={{ marginTop: '20px' }}\n                      >\n                        Mint NFT\n                      </button>\n                    </>\n                  ) : (\n                    <p>Processing your avatar... Please wait.</p>\n                  )}\n                </div>\n              ) : (\n                <>\n                  <h2>Full Body</h2>\n                  <img src={fullBodyImageUrl} alt=\"Full Body\" />\n                  <div className=\"button-group\">\n                    <button onClick={handleBackButton} className=\"nft-button\">Back to NFT Selection</button>\n                    <button onClick={handleBeamIt} className=\"nft-button beam-button\">Beam It!</button>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            {uploadStatus && <p className=\"status-message\">{uploadStatus}</p>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n\n.glb-filename {\n  margin-top: 10px;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.model-viewer-container {\n  position: relative;\n  width: 600px;\n  height: 600px;\n  margin: 0 auto;\n}\n\n.error-message {\n  color: #ff4444;\n  background: rgba(255, 0, 0, 0.1);\n  padding: 10px;\n  margin-top: 10px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.glb-info {\n  margin: 15px 0;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n.glb-filename {\n  font-family: monospace;\n  margin: 5px 0;\n}\n\n.glb-url {\n  font-family: monospace;\n  font-size: 0.8em;\n  word-break: break-all;\n  margin: 5px 0;\n  color: #666;\n}\n`;\n\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}