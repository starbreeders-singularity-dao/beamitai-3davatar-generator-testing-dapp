{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { encodeErrorSignature } from './api/errors_api.js';\nimport { decodeParameters } from './api/parameters_api.js';\nimport { jsonInterfaceMethodToString } from './utils.js';\nexport const decodeContractErrorData = (errorsAbi, error) => {\n  if (error === null || error === void 0 ? void 0 : error.data) {\n    let errorName;\n    let errorSignature;\n    let errorArgs;\n    try {\n      const errorSha = error.data.slice(0, 10);\n      const errorAbi = errorsAbi.find(abi => encodeErrorSignature(abi).startsWith(errorSha));\n      if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {\n        errorName = errorAbi.name;\n        errorSignature = jsonInterfaceMethodToString(errorAbi);\n        // decode abi.inputs according to EIP-838\n        errorArgs = decodeParameters([...errorAbi.inputs], error.data.substring(10));\n      } else if (error.data.startsWith('0x08c379a0')) {\n        // If ABI was not provided, check for the 2 famous errors: 'Error(string)' or 'Panic(uint256)'\n        errorName = 'Error';\n        errorSignature = 'Error(string)';\n        // decode abi.inputs according to EIP-838\n        errorArgs = decodeParameters([{\n          name: 'message',\n          type: 'string'\n        }], error.data.substring(10));\n      } else if (error.data.startsWith('0x4e487b71')) {\n        errorName = 'Panic';\n        errorSignature = 'Panic(uint256)';\n        // decode abi.inputs according to EIP-838\n        errorArgs = decodeParameters([{\n          name: 'code',\n          type: 'uint256'\n        }], error.data.substring(10));\n      } else {\n        console.error('No matching error abi found for error data', error.data);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    if (errorName) {\n      error.setDecodedProperties(errorName, errorSignature, errorArgs);\n    }\n  }\n};\n//# sourceMappingURL=decode_contract_error_data.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}