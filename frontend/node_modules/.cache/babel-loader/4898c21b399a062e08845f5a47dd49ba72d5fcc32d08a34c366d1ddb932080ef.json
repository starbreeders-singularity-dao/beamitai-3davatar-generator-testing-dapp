{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { WebGLRenderTarget, NearestFilter, MeshDepthMaterial, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Color } from \"three\";\nimport { BokehShader } from \"../shaders/BokehShader.js\";\nclass BokehPass extends Pass {\n  constructor(scene, camera, params) {\n    super();\n    __publicField(this, \"scene\");\n    __publicField(this, \"camera\");\n    __publicField(this, \"renderTargetDepth\");\n    __publicField(this, \"materialDepth\");\n    __publicField(this, \"materialBokeh\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"_oldClearColor\");\n    __publicField(this, \"uniforms\");\n    this.scene = scene;\n    this.camera = camera;\n    const focus = params.focus !== void 0 ? params.focus : 1;\n    const aspect = params.aspect !== void 0 ? params.aspect : camera.aspect;\n    const aperture = params.aperture !== void 0 ? params.aperture : 0.025;\n    const maxblur = params.maxblur !== void 0 ? params.maxblur : 1;\n    const width = params.width || window.innerWidth || 1;\n    const height = params.height || window.innerHeight || 1;\n    this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.renderTargetDepth.texture.name = \"BokehPass.depth\";\n    this.materialDepth = new MeshDepthMaterial();\n    this.materialDepth.depthPacking = RGBADepthPacking;\n    this.materialDepth.blending = NoBlending;\n    if (BokehShader === void 0) {\n      console.error(\"BokehPass relies on BokehShader\");\n    }\n    const bokehShader = BokehShader;\n    const bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n    bokehUniforms[\"tDepth\"].value = this.renderTargetDepth.texture;\n    bokehUniforms[\"focus\"].value = focus;\n    bokehUniforms[\"aspect\"].value = aspect;\n    bokehUniforms[\"aperture\"].value = aperture;\n    bokehUniforms[\"maxblur\"].value = maxblur;\n    bokehUniforms[\"nearClip\"].value = camera.near;\n    bokehUniforms[\"farClip\"].value = camera.far;\n    this.materialBokeh = new ShaderMaterial({\n      defines: Object.assign({}, bokehShader.defines),\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader\n    });\n    this.uniforms = bokehUniforms;\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialBokeh);\n    this._oldClearColor = new Color();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(16777215);\n    renderer.setClearAlpha(1);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.uniforms[\"tColor\"].value = readBuffer.texture;\n    this.uniforms[\"nearClip\"].value = this.camera.near;\n    this.uniforms[\"farClip\"].value = this.camera.far;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport { BokehPass };\n//# sourceMappingURL=BokehPass.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}