{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\";\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AMOY_NETWORK = {\n  chainId: '0x13882',\n  // 80002 in hex\n  chainName: 'Polygon Amoy Testnet',\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n  blockExplorerUrls: ['https://amoy.polygonscan.com/']\n};\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  const switchToAmoy = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: AMOY_NETWORK.chainId\n        }]\n      });\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [AMOY_NETWORK]\n          });\n        } catch (addError) {\n          throw new Error('Failed to add Amoy network to MetaMask');\n        }\n      } else {\n        throw switchError;\n      }\n    }\n  };\n  const mintNFT = async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask to mint NFTs!');\n      }\n      await switchToAmoy();\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const network = await provider.getNetwork();\n      if (network.chainId !== 80002n) {\n        throw new Error('Please switch to Polygon Amoy Testnet');\n      }\n      console.log('Starting IPFS upload...');\n      const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n      console.log('IPFS Upload complete:', tokenURI);\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // Get user's address\n      const userAddress = await signer.getAddress();\n      console.log('Minting to address:', userAddress);\n\n      // Debug available functions\n      console.log('Contract ABI:', CONTRACT_ABI);\n\n      // Try to find the minting function\n      const mintFunction = CONTRACT_ABI.find(item => item.type === 'function' && (item.name === 'mint' || item.name === 'safeMint' || item.name.includes('mint')));\n      console.log('Found mint function:', mintFunction);\n      if (!mintFunction) {\n        throw new Error('No minting function found in contract ABI');\n      }\n\n      // Use the found function name\n      const tx = await contract[mintFunction.name](userAddress, tokenURI, {\n        gasLimit: 500000\n      });\n      console.log('Minting transaction sent:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('NFT minted successfully:', receipt);\n    } catch (error) {\n      console.error('Minting error:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      style: {\n        padding: '10px 20px',\n        backgroundColor: '#FF1493',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer'\n      },\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["ethers","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","AMOY_NETWORK","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","NFTMinter","glbUrl","originalNFT","switchToAmoy","window","ethereum","request","method","params","switchError","code","addError","Error","mintNFT","provider","BrowserProvider","signer","getSigner","network","getNetwork","console","log","tokenURI","contract","Contract","userAddress","getAddress","mintFunction","find","item","type","includes","tx","gasLimit","hash","receipt","wait","error","children","onClick","style","padding","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst AMOY_NETWORK = {\n    chainId: '0x13882', // 80002 in hex\n    chainName: 'Polygon Amoy Testnet',\n    nativeCurrency: {\n        name: 'MATIC',\n        symbol: 'MATIC',\n        decimals: 18\n    },\n    rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n    blockExplorerUrls: ['https://amoy.polygonscan.com/']\n};\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const switchToAmoy = async () => {\n        try {\n            await window.ethereum.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: AMOY_NETWORK.chainId }],\n            });\n        } catch (switchError) {\n            if (switchError.code === 4902) {\n                try {\n                    await window.ethereum.request({\n                        method: 'wallet_addEthereumChain',\n                        params: [AMOY_NETWORK],\n                    });\n                } catch (addError) {\n                    throw new Error('Failed to add Amoy network to MetaMask');\n                }\n            } else {\n                throw switchError;\n            }\n        }\n    };\n\n    const mintNFT = async () => {\n        try {\n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask to mint NFTs!');\n            }\n\n            await switchToAmoy();\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            \n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            \n            const network = await provider.getNetwork();\n            if (network.chainId !== 80002n) {\n                throw new Error('Please switch to Polygon Amoy Testnet');\n            }\n\n            console.log('Starting IPFS upload...');\n            const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n            console.log('IPFS Upload complete:', tokenURI);\n\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n\n            // Get user's address\n            const userAddress = await signer.getAddress();\n            console.log('Minting to address:', userAddress);\n\n            // Debug available functions\n            console.log('Contract ABI:', CONTRACT_ABI);\n            \n            // Try to find the minting function\n            const mintFunction = CONTRACT_ABI.find(item => \n                item.type === 'function' && \n                (item.name === 'mint' || item.name === 'safeMint' || item.name.includes('mint'))\n            );\n            \n            console.log('Found mint function:', mintFunction);\n\n            if (!mintFunction) {\n                throw new Error('No minting function found in contract ABI');\n            }\n\n            // Use the found function name\n            const tx = await contract[mintFunction.name](userAddress, tokenURI, {\n                gasLimit: 500000\n            });\n            \n            console.log('Minting transaction sent:', tx.hash);\n            const receipt = await tx.wait();\n            console.log('NFT minted successfully:', receipt);\n\n        } catch (error) {\n            console.error('Minting error:', error);\n            throw error;\n        }\n    };\n\n    return (\n        <div>\n            <button \n                onClick={mintNFT}\n                style={{\n                    padding: '10px 20px',\n                    backgroundColor: '#FF1493',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '5px',\n                    cursor: 'pointer'\n                }}\n            >\n                Mint NFT\n            </button>\n        </div>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,2BAA2B;AAC1E,SAASC,YAAY,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,SAAS;EAAE;EACpBC,SAAS,EAAE,sBAAsB;EACjCC,cAAc,EAAE;IACZC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,QAAQ,EAAE;EACd,CAAC;EACDC,OAAO,EAAE,CAAC,sCAAsC,CAAC;EACjDC,iBAAiB,EAAE,CAAC,+BAA+B;AACvD,CAAC;AAED,MAAMC,SAAS,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EAC3C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAC1BC,MAAM,EAAE,4BAA4B;QACpCC,MAAM,EAAE,CAAC;UAAEhB,OAAO,EAAED,YAAY,CAACC;QAAQ,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC,CAAC,OAAOiB,WAAW,EAAE;MAClB,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;QAC3B,IAAI;UACA,MAAMN,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;YAC1BC,MAAM,EAAE,yBAAyB;YACjCC,MAAM,EAAE,CAACjB,YAAY;UACzB,CAAC,CAAC;QACN,CAAC,CAAC,OAAOoB,QAAQ,EAAE;UACf,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;QAC7D;MACJ,CAAC,MAAM;QACH,MAAMH,WAAW;MACrB;IACJ;EACJ,CAAC;EAED,MAAMI,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI;MACA,IAAI,CAACT,MAAM,CAACC,QAAQ,EAAE;QAClB,MAAM,IAAIO,KAAK,CAAC,uCAAuC,CAAC;MAC5D;MAEA,MAAMT,YAAY,CAAC,CAAC;MACpB,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAEhE,MAAMO,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,eAAe,CAACX,MAAM,CAACC,QAAQ,CAAC;MAC5D,MAAMW,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;MAEzC,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAAC,CAAC;MAC3C,IAAID,OAAO,CAAC1B,OAAO,KAAK,MAAM,EAAE;QAC5B,MAAM,IAAIoB,KAAK,CAAC,uCAAuC,CAAC;MAC5D;MAEAQ,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,MAAMC,QAAQ,GAAG,MAAMlC,YAAY,CAACa,MAAM,EAAEC,WAAW,CAAC;MACxDkB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEC,QAAQ,CAAC;MAE9C,MAAMC,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAQ,CAChCtC,gBAAgB,EAChBC,YAAY,EACZ6B,MACJ,CAAC;;MAED;MACA,MAAMS,WAAW,GAAG,MAAMT,MAAM,CAACU,UAAU,CAAC,CAAC;MAC7CN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEI,WAAW,CAAC;;MAE/C;MACAL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAElC,YAAY,CAAC;;MAE1C;MACA,MAAMwC,YAAY,GAAGxC,YAAY,CAACyC,IAAI,CAACC,IAAI,IACvCA,IAAI,CAACC,IAAI,KAAK,UAAU,KACvBD,IAAI,CAAClC,IAAI,KAAK,MAAM,IAAIkC,IAAI,CAAClC,IAAI,KAAK,UAAU,IAAIkC,IAAI,CAAClC,IAAI,CAACoC,QAAQ,CAAC,MAAM,CAAC,CACnF,CAAC;MAEDX,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEM,YAAY,CAAC;MAEjD,IAAI,CAACA,YAAY,EAAE;QACf,MAAM,IAAIf,KAAK,CAAC,2CAA2C,CAAC;MAChE;;MAEA;MACA,MAAMoB,EAAE,GAAG,MAAMT,QAAQ,CAACI,YAAY,CAAChC,IAAI,CAAC,CAAC8B,WAAW,EAAEH,QAAQ,EAAE;QAChEW,QAAQ,EAAE;MACd,CAAC,CAAC;MAEFb,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEW,EAAE,CAACE,IAAI,CAAC;MACjD,MAAMC,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAI,CAAC,CAAC;MAC/BhB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEc,OAAO,CAAC;IAEpD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZjB,OAAO,CAACiB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,oBACI/C,OAAA;IAAAgD,QAAA,eACIhD,OAAA;MACIiD,OAAO,EAAE1B,OAAQ;MACjB2B,KAAK,EAAE;QACHC,OAAO,EAAE,WAAW;QACpBC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,MAAM;QACdC,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE;MACZ,CAAE;MAAAR,QAAA,EACL;IAED;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACC,EAAA,GArGInD,SAAS;AAuGf,eAAeA,SAAS;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}