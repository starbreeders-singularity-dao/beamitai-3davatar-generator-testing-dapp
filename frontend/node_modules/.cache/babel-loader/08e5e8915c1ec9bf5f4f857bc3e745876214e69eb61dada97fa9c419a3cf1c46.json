{"ast":null,"code":"/**\n * NFT.Storage Upload Handler with proper collection management\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://preserve.nft.storage/api/v1';\n\n// Validation\nif (!(NFT_STORAGE_KEY !== null && NFT_STORAGE_KEY !== void 0 && NFT_STORAGE_KEY.trim())) {\n  throw new Error('NFT.Storage API key is required');\n}\n\n/**\n * Validates API configuration and collection setup\n * @returns {Promise<string>} Collection ID\n */\nconst ensureCollection = async () => {\n  let collectionId = localStorage.getItem('beamitCollectionId');\n  if (!collectionId) {\n    console.log('No collection found, creating new collection...');\n    const response = await fetch(`${API_BASE}/collection/create_collection`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        collectionName: \"BeamitAIAvatars\",\n        contractAddress: \"undefined\",\n        chainID: \"80002\",\n        network: \"polygon\"\n      })\n    });\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Failed to create collection: ${JSON.stringify(error)}`);\n    }\n    const {\n      collectionID\n    } = await response.json();\n    localStorage.setItem('beamitCollectionId', collectionID);\n    collectionId = collectionID;\n    console.log('Created new collection:', collectionID);\n  }\n  return collectionId;\n};\n\n/**\n * Uploads content to IPFS via NFT.Storage\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // Ensure we have a valid collection\n    const collectionId = await ensureCollection();\n    console.log('Using collection ID:', collectionId);\n\n    // Fetch GLB\n    const glbResponse = await fetch(glbUrl);\n    if (!glbResponse.ok) {\n      throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n    }\n    const glbBlob = await glbResponse.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Create CSV content\n    const tokenId = Date.now().toString();\n    const csvContent = `tokenID,cid\\n${tokenId},pending_${tokenId}`;\n\n    // Prepare upload\n    const formData = new FormData();\n    formData.append('collectionID', collectionId);\n    formData.append('file', new Blob([csvContent], {\n      type: 'text/csv'\n    }), 'token.csv');\n\n    // Upload to NFT.Storage\n    const uploadResponse = await fetch(`${API_BASE}/collection/add_tokens`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n        'Accept': 'application/json'\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload failed:', {\n        status: uploadResponse.status,\n        error\n      });\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const result = await uploadResponse.json();\n    console.log('Upload successful:', result);\n    return `ipfs://${result.cid || tokenId}`;\n  } catch (error) {\n    console.error('Upload process failed:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","API_BASE","trim","Error","ensureCollection","collectionId","localStorage","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","collectionName","contractAddress","chainID","network","ok","error","json","collectionID","setItem","uploadToIPFS","glbUrl","originalNFT","glbResponse","status","glbBlob","blob","size","type","tokenId","Date","now","toString","csvContent","formData","FormData","append","Blob","uploadResponse","result","cid","name","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["/**\n * NFT.Storage Upload Handler with proper collection management\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://preserve.nft.storage/api/v1';\n\n// Validation\nif (!NFT_STORAGE_KEY?.trim()) {\n    throw new Error('NFT.Storage API key is required');\n}\n\n/**\n * Validates API configuration and collection setup\n * @returns {Promise<string>} Collection ID\n */\nconst ensureCollection = async () => {\n    let collectionId = localStorage.getItem('beamitCollectionId');\n    \n    if (!collectionId) {\n        console.log('No collection found, creating new collection...');\n        \n        const response = await fetch(`${API_BASE}/collection/create_collection`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                collectionName: \"BeamitAIAvatars\",\n                contractAddress: \"undefined\",\n                chainID: \"80002\",\n                network: \"polygon\"\n            })\n        });\n\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(`Failed to create collection: ${JSON.stringify(error)}`);\n        }\n\n        const { collectionID } = await response.json();\n        localStorage.setItem('beamitCollectionId', collectionID);\n        collectionId = collectionID;\n        console.log('Created new collection:', collectionID);\n    }\n\n    return collectionId;\n};\n\n/**\n * Uploads content to IPFS via NFT.Storage\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // Ensure we have a valid collection\n        const collectionId = await ensureCollection();\n        console.log('Using collection ID:', collectionId);\n\n        // Fetch GLB\n        const glbResponse = await fetch(glbUrl);\n        if (!glbResponse.ok) {\n            throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n        }\n        \n        const glbBlob = await glbResponse.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Create CSV content\n        const tokenId = Date.now().toString();\n        const csvContent = `tokenID,cid\\n${tokenId},pending_${tokenId}`;\n        \n        // Prepare upload\n        const formData = new FormData();\n        formData.append('collectionID', collectionId);\n        formData.append('file', new Blob([csvContent], { type: 'text/csv' }), 'token.csv');\n\n        // Upload to NFT.Storage\n        const uploadResponse = await fetch(`${API_BASE}/collection/add_tokens`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`,\n                'Accept': 'application/json'\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload failed:', {\n                status: uploadResponse.status,\n                error\n            });\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const result = await uploadResponse.json();\n        console.log('Upload successful:', result);\n\n        return `ipfs://${result.cid || tokenId}`;\n\n    } catch (error) {\n        console.error('Upload process failed:', {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        });\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}