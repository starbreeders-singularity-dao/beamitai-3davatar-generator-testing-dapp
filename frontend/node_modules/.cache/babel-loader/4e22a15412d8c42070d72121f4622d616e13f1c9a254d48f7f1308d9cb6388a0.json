{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\";\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  const mintNFT = async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask');\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const userAddress = accounts[0];\n\n      // Upload to IPFS first\n      console.log('Starting IPFS upload...');\n      const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n      console.log('IPFS Upload complete:', tokenURI);\n\n      // Create provider and contract instance\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n\n      // Generate deterministic tokenId\n      const tokenIdBigInt = BigInt(Date.now());\n      const tokenIdHex = ethers.toBeHex(tokenIdBigInt, 32); // Ensure 32 bytes length\n\n      // Debug log\n      console.log('Minting parameters:', {\n        to: userAddress,\n        uri: tokenURI,\n        tokenId: tokenIdHex\n      });\n\n      // Mint NFT\n      const tx = await contract.mint(userAddress, tokenURI, tokenIdHex, ethers.toBeHex(\"0\"),\n      // Empty bytes as hex\n      {\n        gasLimit: ethers.toBeHex(300000)\n      });\n      console.log('Transaction hash:', tx.hash);\n      const receipt = await tx.wait();\n      console.log('Minting successful:', receipt);\n      return receipt;\n    } catch (error) {\n      console.error('Minting failed:', {\n        error: error,\n        message: error.message,\n        code: error.code\n      });\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: mintNFT,\n    style: {\n      padding: '10px 20px',\n      backgroundColor: '#FF1493',\n      color: 'white',\n      border: 'none',\n      borderRadius: '5px',\n      cursor: 'pointer'\n    },\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["ethers","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","mintNFT","window","ethereum","Error","accounts","request","method","userAddress","console","log","tokenURI","provider","BrowserProvider","signer","getSigner","contract","Contract","tokenIdBigInt","BigInt","Date","now","tokenIdHex","toBeHex","to","uri","tokenId","tx","mint","gasLimit","hash","receipt","wait","error","message","code","onClick","style","padding","backgroundColor","color","border","borderRadius","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const mintNFT = async () => {\n        try {\n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask');\n            }\n\n            // Request account access\n            const accounts = await window.ethereum.request({ \n                method: 'eth_requestAccounts' \n            });\n            const userAddress = accounts[0];\n\n            // Upload to IPFS first\n            console.log('Starting IPFS upload...');\n            const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n            console.log('IPFS Upload complete:', tokenURI);\n\n            // Create provider and contract instance\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n\n            // Generate deterministic tokenId\n            const tokenIdBigInt = BigInt(Date.now());\n            const tokenIdHex = ethers.toBeHex(tokenIdBigInt, 32); // Ensure 32 bytes length\n\n            // Debug log\n            console.log('Minting parameters:', {\n                to: userAddress,\n                uri: tokenURI,\n                tokenId: tokenIdHex\n            });\n\n            // Mint NFT\n            const tx = await contract.mint(\n                userAddress,\n                tokenURI,\n                tokenIdHex,\n                ethers.toBeHex(\"0\"), // Empty bytes as hex\n                {\n                    gasLimit: ethers.toBeHex(300000)\n                }\n            );\n\n            console.log('Transaction hash:', tx.hash);\n            const receipt = await tx.wait();\n            console.log('Minting successful:', receipt);\n\n            return receipt;\n\n        } catch (error) {\n            console.error('Minting failed:', {\n                error: error,\n                message: error.message,\n                code: error.code\n            });\n            throw error;\n        }\n    };\n\n    return (\n        <button \n            onClick={mintNFT}\n            style={{\n                padding: '10px 20px',\n                backgroundColor: '#FF1493',\n                color: 'white',\n                border: 'none',\n                borderRadius: '5px',\n                cursor: 'pointer'\n            }}\n        >\n            Mint NFT\n        </button>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}