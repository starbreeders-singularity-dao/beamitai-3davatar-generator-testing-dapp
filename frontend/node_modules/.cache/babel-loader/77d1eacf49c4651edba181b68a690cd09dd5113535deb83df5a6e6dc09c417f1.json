{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2, _process$env$REACT_AP3;\nimport { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// Add more detailed logging\nconsole.log('Environment variables:', {\n  hasKey: !!process.env.REACT_APP_NFT_STORAGE_KEY,\n  keyLength: (_process$env$REACT_AP = process.env.REACT_APP_NFT_STORAGE_KEY) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.length,\n  keyStart: (_process$env$REACT_AP2 = process.env.REACT_APP_NFT_STORAGE_KEY) === null || _process$env$REACT_AP2 === void 0 ? void 0 : _process$env$REACT_AP2.substring(0, 5),\n  keyEnd: (_process$env$REACT_AP3 = process.env.REACT_APP_NFT_STORAGE_KEY) === null || _process$env$REACT_AP3 === void 0 ? void 0 : _process$env$REACT_AP3.substring(-5)\n});\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found in environment variables');\n}\n\n// Make sure there's no whitespace\nconst cleanKey = NFT_STORAGE_KEY.trim();\nconsole.log('Using NFT.Storage key:', {\n  length: cleanKey.length,\n  start: cleanKey.substring(0, 5),\n  end: cleanKey.substring(-5)\n});\nconst client = new NFTStorage({\n  token: cleanKey\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting IPFS upload process...');\n    console.log('Downloading GLB file...');\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB file: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n\n    // Upload GLB to IPFS\n    console.log('Uploading GLB to IPFS...', {\n      blobSize: glbBlob.size,\n      blobType: glbBlob.type\n    });\n    const glbCid = await client.storeBlob(glbBlob);\n    console.log('GLB uploaded to IPFS:', glbCid);\n    const glbIpfsUrl = `ipfs://${glbCid}`;\n\n    // Create metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: glbIpfsUrl,\n      animation_url: glbIpfsUrl,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n\n    // Upload metadata to IPFS\n    console.log('Uploading metadata to IPFS...');\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataCid = await client.storeBlob(metadataBlob);\n    console.log('Upload complete:', {\n      glbCid,\n      metadataCid\n    });\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('IPFS upload error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","hasKey","keyLength","_process$env$REACT_AP","length","keyStart","_process$env$REACT_AP2","substring","keyEnd","_process$env$REACT_AP3","Error","cleanKey","trim","start","end","client","token","uploadToIPFS","glbUrl","originalNFT","response","fetch","ok","status","glbBlob","blob","blobSize","size","blobType","type","glbCid","storeBlob","glbIpfsUrl","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","value","tokenId","chainId","metadataBlob","Blob","JSON","stringify","metadataCid","error"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// Add more detailed logging\nconsole.log('Environment variables:', {\n    hasKey: !!process.env.REACT_APP_NFT_STORAGE_KEY,\n    keyLength: process.env.REACT_APP_NFT_STORAGE_KEY?.length,\n    keyStart: process.env.REACT_APP_NFT_STORAGE_KEY?.substring(0, 5),\n    keyEnd: process.env.REACT_APP_NFT_STORAGE_KEY?.substring(-5)\n});\n\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found in environment variables');\n}\n\n// Make sure there's no whitespace\nconst cleanKey = NFT_STORAGE_KEY.trim();\n\nconsole.log('Using NFT.Storage key:', {\n    length: cleanKey.length,\n    start: cleanKey.substring(0, 5),\n    end: cleanKey.substring(-5)\n});\n\nconst client = new NFTStorage({ token: cleanKey });\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting IPFS upload process...');\n        \n        console.log('Downloading GLB file...');\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB file: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        \n        // Upload GLB to IPFS\n        console.log('Uploading GLB to IPFS...', {\n            blobSize: glbBlob.size,\n            blobType: glbBlob.type\n        });\n        \n        const glbCid = await client.storeBlob(glbBlob);\n        console.log('GLB uploaded to IPFS:', glbCid);\n        \n        const glbIpfsUrl = `ipfs://${glbCid}`;\n        \n        // Create metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: glbIpfsUrl,\n            animation_url: glbIpfsUrl,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n        \n        // Upload metadata to IPFS\n        console.log('Uploading metadata to IPFS...');\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { \n            type: 'application/json' \n        });\n        const metadataCid = await client.storeBlob(metadataBlob);\n        \n        console.log('Upload complete:', {\n            glbCid,\n            metadataCid\n        });\n        \n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('IPFS upload error:', error);\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}