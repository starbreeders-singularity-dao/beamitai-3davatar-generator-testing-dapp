{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Vector3, Mesh, SphereGeometry, MeshBasicMaterial, BufferGeometry, Float32BufferAttribute, Line, LineBasicMaterial, InstancedMesh } from \"three\";\nconst _o = new Object3D();\nconst _v = new Vector3();\nclass RaycasterHelper extends Object3D {\n  constructor(raycaster, numberOfHitsToVisualize = 20) {\n    super();\n    __publicField(this, \"raycaster\");\n    __publicField(this, \"hits\");\n    __publicField(this, \"origin\");\n    __publicField(this, \"near\");\n    __publicField(this, \"far\");\n    __publicField(this, \"nearToFar\");\n    __publicField(this, \"originToNear\");\n    __publicField(this, \"hitPoints\");\n    __publicField(this, \"colors\", {\n      near: 16777215,\n      far: 16777215,\n      originToNear: 3355443,\n      nearToFar: 16777215,\n      origin: [978050, 16711771]\n    });\n    __publicField(this, \"setColors\", colors => {\n      const _colors = {\n        ...this.colors,\n        ...colors\n      };\n      this.near.material.color.set(_colors.near);\n      this.far.material.color.set(_colors.far);\n      this.nearToFar.material.color.set(_colors.nearToFar);\n      this.originToNear.material.color.set(_colors.originToNear);\n    });\n    __publicField(this, \"update\", () => {\n      var _a;\n      const origin = this.raycaster.ray.origin;\n      const direction = this.raycaster.ray.direction;\n      this.origin.position.copy(origin);\n      this.near.position.copy(origin).add(direction.clone().multiplyScalar(this.raycaster.near));\n      this.far.position.copy(origin).add(direction.clone().multiplyScalar(this.raycaster.far));\n      this.far.lookAt(origin);\n      this.near.lookAt(origin);\n      let pos = this.nearToFar.geometry.getAttribute(\"position\");\n      pos.set([...this.near.position.toArray(), ...this.far.position.toArray()]);\n      pos.needsUpdate = true;\n      pos = this.originToNear.geometry.getAttribute(\"position\");\n      pos.set([...origin.toArray(), ...this.near.position.toArray()]);\n      pos.needsUpdate = true;\n      for (let i = 0; i < this.numberOfHitsToVisualize; i++) {\n        const hit = (_a = this.hits) == null ? void 0 : _a[i];\n        if (hit) {\n          const {\n            point\n          } = hit;\n          _o.position.copy(point);\n          _o.scale.setScalar(1);\n        } else {\n          _o.scale.setScalar(0);\n        }\n        _o.updateMatrix();\n        this.hitPoints.setMatrixAt(i, _o.matrix);\n      }\n      this.hitPoints.instanceMatrix.needsUpdate = true;\n      this.origin.material.color.set(this.hits.length > 0 ? this.colors.origin[0] : this.colors.origin[1]);\n    });\n    __publicField(this, \"dispose\", () => {\n      this.origin.geometry.dispose();\n      this.origin.material.dispose();\n      this.near.geometry.dispose();\n      this.near.material.dispose();\n      this.far.geometry.dispose();\n      this.far.material.dispose();\n      this.nearToFar.geometry.dispose();\n      this.nearToFar.material.dispose();\n      this.originToNear.geometry.dispose();\n      this.originToNear.material.dispose();\n      this.hitPoints.dispose();\n    });\n    this.numberOfHitsToVisualize = numberOfHitsToVisualize;\n    this.raycaster = raycaster;\n    this.hits = [];\n    this.origin = new Mesh(new SphereGeometry(0.04, 32), new MeshBasicMaterial());\n    this.origin.name = \"RaycasterHelper_origin\";\n    this.origin.raycast = () => null;\n    const size = 0.1;\n    let geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n    this.near = new Line(geometry, new LineBasicMaterial());\n    this.near.name = \"RaycasterHelper_near\";\n    this.near.raycast = () => null;\n    this.far = new Line(geometry, new LineBasicMaterial());\n    this.far.name = \"RaycasterHelper_far\";\n    this.far.raycast = () => null;\n    this.nearToFar = new Line(new BufferGeometry(), new LineBasicMaterial());\n    this.nearToFar.name = \"RaycasterHelper_nearToFar\";\n    this.nearToFar.raycast = () => null;\n    this.nearToFar.geometry.setFromPoints([_v, _v]);\n    this.originToNear = new Line(this.nearToFar.geometry.clone(), new LineBasicMaterial());\n    this.originToNear.name = \"RaycasterHelper_originToNear\";\n    this.originToNear.raycast = () => null;\n    this.hitPoints = new InstancedMesh(new SphereGeometry(0.04), new MeshBasicMaterial(), this.numberOfHitsToVisualize);\n    this.hitPoints.name = \"RaycasterHelper_hits\";\n    this.hitPoints.raycast = () => null;\n    this.add(this.nearToFar);\n    this.add(this.originToNear);\n    this.add(this.near);\n    this.add(this.far);\n    this.add(this.origin);\n    this.add(this.hitPoints);\n    this.setColors();\n  }\n}\nexport { RaycasterHelper };\n//# sourceMappingURL=RaycasterHelper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}