{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            throw new Error(\"THREE.RGBELoader: Read Error: \" + (msg || \"\"));\n          case rgbe_write_error:\n            throw new Error(\"THREE.RGBELoader: Write Error: \" + (msg || \"\"));\n          case rgbe_format_error:\n            throw new Error(\"THREE.RGBELoader: Bad File Format: \" + (msg || \"\"));\n          default:\n          case rgbe_memory_error:\n            throw new Error(\"THREE.RGBELoader: Memory Error: \" + (msg || \"\"));\n        }\n      },\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = \"\\n\",\n      fgets = function (buffer2, lineLimit, consume) {\n        const chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        let p = buffer2.pos,\n          i = -1,\n          len = 0,\n          s = \"\",\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          if (false !== consume) buffer2.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      RGBE_ReadHeader = function (buffer2) {\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          header = {\n            valid: 0,\n            string: \"\",\n            comments: \"\",\n            programtype: \"RGBE\",\n            format: \"\",\n            gamma: 1,\n            exposure: 1,\n            width: 0,\n            height: 0\n          };\n        let line, match;\n        if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n          rgbe_error(rgbe_read_error, \"no header found\");\n        }\n        if (!(match = line.match(magic_token_re))) {\n          rgbe_error(rgbe_format_error, \"bad initial token\");\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + \"\\n\";\n        while (true) {\n          line = fgets(buffer2);\n          if (false === line) break;\n          header.string += line + \"\\n\";\n          if (\"#\" === line.charAt(0)) {\n            header.comments += line + \"\\n\";\n            continue;\n          }\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1];\n          }\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          rgbe_error(rgbe_format_error, \"missing format specifier\");\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          rgbe_error(rgbe_format_error, \"missing image size specifier\");\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer2, w2, h2) {\n        const scanline_width = w2;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 ||\n        // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n          return new Uint8Array(buffer2);\n        }\n        if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n          rgbe_error(rgbe_format_error, \"wrong scanline width\");\n        }\n        const data_rgba = new Uint8Array(4 * w2 * h2);\n        if (!data_rgba.length) {\n          rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n        }\n        let offset = 0,\n          pos = 0;\n        const ptr_end = 4 * scanline_width;\n        const rgbeStart = new Uint8Array(4);\n        const scanline_buffer = new Uint8Array(ptr_end);\n        let num_scanlines = h2;\n        while (num_scanlines > 0 && pos < buffer2.byteLength) {\n          if (pos + 4 > buffer2.byteLength) {\n            rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer2[pos++];\n          rgbeStart[1] = buffer2[pos++];\n          rgbeStart[2] = buffer2[pos++];\n          rgbeStart[3] = buffer2[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n          }\n          let ptr = 0,\n            count;\n          while (ptr < ptr_end && pos < buffer2.byteLength) {\n            count = buffer2[pos++];\n            const isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              rgbe_error(rgbe_format_error, \"bad scanline data\");\n            }\n            if (isEncodedRun) {\n              const byteValue = buffer2[pos++];\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n            } else {\n              scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n          const l = scanline_width;\n          for (let i = 0; i < l; i++) {\n            let off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    const w = rgbe_header_info.width,\n      h = rgbe_header_info.height,\n      image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n    let data, type;\n    let numElements;\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4;\n        const floatArray = new Float32Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n        }\n        data = floatArray;\n        type = FloatType;\n        break;\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4;\n        const halfArray = new Uint16Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n        }\n        data = halfArray;\n        type = HalfFloatType;\n        break;\n      default:\n        throw new Error(\"THREE.RGBELoader: Unsupported type: \" + this.type);\n    }\n    return {\n      width: w,\n      height: h,\n      data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { RGBELoader };\n//# sourceMappingURL=RGBELoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}