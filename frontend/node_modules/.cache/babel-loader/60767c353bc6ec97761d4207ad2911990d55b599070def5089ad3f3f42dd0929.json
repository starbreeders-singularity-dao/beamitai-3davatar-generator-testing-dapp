{"ast":null,"code":"/**\n * NFT.Storage Upload Handler\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://api.nft.storage'; // Updated base URL\nconst CONTRACT_ADDRESS = \"0x28571421e389f0553b5c261dc33f7b22bbb1b0e3\"; // From your BeamitAIGen1.js\n\n/**\n * Uploads content to IPFS via NFT.Storage\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // Fetch GLB\n    const glbResponse = await fetch(glbUrl);\n    if (!glbResponse.ok) {\n      throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n    }\n    const glbBlob = await glbResponse.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Create JSON data according to docs\n    const tokenId = Date.now().toString();\n    const tokenData = [{\n      tokenID: tokenId,\n      cid: `pending_${tokenId}`\n    }];\n\n    // Create form data\n    const formData = new FormData();\n    formData.append('contractAddress', CONTRACT_ADDRESS);\n    formData.append('chain', 'polygon'); // or 'ethereum' based on your needs\n    formData.append('file', new Blob([JSON.stringify(tokenData)], {\n      type: 'application/json'\n    }), 'tokens.json');\n\n    // Upload to NFT.Storage\n    const uploadResponse = await fetch(`${API_BASE}/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload failed:', error);\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const result = await uploadResponse.json();\n    console.log('Upload successful:', result);\n    return `ipfs://${result.cid || tokenId}`;\n  } catch (error) {\n    console.error('Upload process failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","API_BASE","CONTRACT_ADDRESS","uploadToIPFS","glbUrl","originalNFT","console","log","glbResponse","fetch","ok","Error","status","glbBlob","blob","size","type","tokenId","Date","now","toString","tokenData","tokenID","cid","formData","FormData","append","Blob","JSON","stringify","uploadResponse","method","headers","trim","body","error","json","result"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["/**\n * NFT.Storage Upload Handler\n */\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconst API_BASE = 'https://api.nft.storage';  // Updated base URL\nconst CONTRACT_ADDRESS = \"0x28571421e389f0553b5c261dc33f7b22bbb1b0e3\"; // From your BeamitAIGen1.js\n\n/**\n * Uploads content to IPFS via NFT.Storage\n */\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // Fetch GLB\n        const glbResponse = await fetch(glbUrl);\n        if (!glbResponse.ok) {\n            throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n        }\n        \n        const glbBlob = await glbResponse.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Create JSON data according to docs\n        const tokenId = Date.now().toString();\n        const tokenData = [{\n            tokenID: tokenId,\n            cid: `pending_${tokenId}`\n        }];\n\n        // Create form data\n        const formData = new FormData();\n        formData.append('contractAddress', CONTRACT_ADDRESS);\n        formData.append('chain', 'polygon');  // or 'ethereum' based on your needs\n        formData.append('file', new Blob([JSON.stringify(tokenData)], { \n            type: 'application/json' \n        }), 'tokens.json');\n\n        // Upload to NFT.Storage\n        const uploadResponse = await fetch(`${API_BASE}/upload`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY.trim()}`\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload failed:', error);\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const result = await uploadResponse.json();\n        console.log('Upload successful:', result);\n\n        return `ipfs://${result.cid || tokenId}`;\n\n    } catch (error) {\n        console.error('Upload process failed:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAC7D,MAAMC,QAAQ,GAAG,yBAAyB,CAAC,CAAE;AAC7C,MAAMC,gBAAgB,GAAG,4CAA4C,CAAC,CAAC;;AAEvE;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,MAAMC,WAAW,GAAG,MAAMC,KAAK,CAACL,MAAM,CAAC;IACvC,IAAI,CAACI,WAAW,CAACE,EAAE,EAAE;MACjB,MAAM,IAAIC,KAAK,CAAC,wBAAwBH,WAAW,CAACI,MAAM,EAAE,CAAC;IACjE;IAEA,MAAMC,OAAO,GAAG,MAAML,WAAW,CAACM,IAAI,CAAC,CAAC;IACxCR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;MAC7BQ,IAAI,EAAEF,OAAO,CAACE,IAAI;MAClBC,IAAI,EAAEH,OAAO,CAACG;IAClB,CAAC,CAAC;;IAEF;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACrC,MAAMC,SAAS,GAAG,CAAC;MACfC,OAAO,EAAEL,OAAO;MAChBM,GAAG,EAAE,WAAWN,OAAO;IAC3B,CAAC,CAAC;;IAEF;IACA,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAExB,gBAAgB,CAAC;IACpDsB,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAE;IACtCF,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,CAAC,EAAE;MAC1DL,IAAI,EAAE;IACV,CAAC,CAAC,EAAE,aAAa,CAAC;;IAElB;IACA,MAAMc,cAAc,GAAG,MAAMrB,KAAK,CAAC,GAAGR,QAAQ,SAAS,EAAE;MACrD8B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUnC,eAAe,CAACoC,IAAI,CAAC,CAAC;MACrD,CAAC;MACDC,IAAI,EAAEV;IACV,CAAC,CAAC;IAEF,IAAI,CAACM,cAAc,CAACpB,EAAE,EAAE;MACpB,MAAMyB,KAAK,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;MACzC9B,OAAO,CAAC6B,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAM,IAAIxB,KAAK,CAAC,kBAAkBiB,IAAI,CAACC,SAAS,CAACM,KAAK,CAAC,EAAE,CAAC;IAC9D;IAEA,MAAME,MAAM,GAAG,MAAMP,cAAc,CAACM,IAAI,CAAC,CAAC;IAC1C9B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE8B,MAAM,CAAC;IAEzC,OAAO,UAAUA,MAAM,CAACd,GAAG,IAAIN,OAAO,EAAE;EAE5C,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACZ7B,OAAO,CAAC6B,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}