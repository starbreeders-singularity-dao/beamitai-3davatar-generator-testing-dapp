{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconsole.log('NFT Storage Key length:', NFT_STORAGE_KEY === null || NFT_STORAGE_KEY === void 0 ? void 0 : NFT_STORAGE_KEY.length);\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found in environment variables');\n}\nconst client = new NFTStorage({\n  token: NFT_STORAGE_KEY\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Downloading GLB file...');\n    const response = await fetch(glbUrl);\n    const glbBlob = await response.blob();\n\n    // Upload GLB to IPFS\n    console.log('Uploading GLB to IPFS...');\n    const glbCid = await client.storeBlob(glbBlob);\n    const glbIpfsUrl = `ipfs://${glbCid}`;\n\n    // Create metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: glbIpfsUrl,\n      animation_url: glbIpfsUrl,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n\n    // Upload metadata to IPFS\n    console.log('Uploading metadata to IPFS...');\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataCid = await client.storeBlob(metadataBlob);\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('IPFS upload error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","length","Error","client","token","uploadToIPFS","glbUrl","originalNFT","response","fetch","glbBlob","blob","glbCid","storeBlob","glbIpfsUrl","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","value","tokenId","chainId","metadataBlob","Blob","JSON","stringify","type","metadataCid","error"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\nconsole.log('NFT Storage Key length:', NFT_STORAGE_KEY?.length);\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found in environment variables');\n}\n\nconst client = new NFTStorage({ token: NFT_STORAGE_KEY });\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Downloading GLB file...');\n        const response = await fetch(glbUrl);\n        const glbBlob = await response.blob();\n        \n        // Upload GLB to IPFS\n        console.log('Uploading GLB to IPFS...');\n        const glbCid = await client.storeBlob(glbBlob);\n        const glbIpfsUrl = `ipfs://${glbCid}`;\n        \n        // Create metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: glbIpfsUrl,\n            animation_url: glbIpfsUrl,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n        \n        // Upload metadata to IPFS\n        console.log('Uploading metadata to IPFS...');\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { type: 'application/json' });\n        const metadataCid = await client.storeBlob(metadataBlob);\n        \n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('IPFS upload error:', error);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AAExC,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAE7DC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEM,MAAM,CAAC;AAC/D,IAAI,CAACN,eAAe,EAAE;EAClB,MAAM,IAAIO,KAAK,CAAC,wDAAwD,CAAC;AAC7E;AAEA,MAAMC,MAAM,GAAG,IAAIT,UAAU,CAAC;EAAEU,KAAK,EAAET;AAAgB,CAAC,CAAC;AAEzD,OAAO,MAAMU,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAR,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACH,MAAM,CAAC;IACpC,MAAMI,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAErC;IACAZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,MAAMY,MAAM,GAAG,MAAMT,MAAM,CAACU,SAAS,CAACH,OAAO,CAAC;IAC9C,MAAMI,UAAU,GAAG,UAAUF,MAAM,EAAE;;IAErC;IACA,MAAMG,QAAQ,GAAG;MACbC,IAAI,EAAE,qBAAqBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACvCC,WAAW,EAAE,oCAAoC;MACjDC,KAAK,EAAEN,UAAU;MACjBO,aAAa,EAAEP,UAAU;MACzBQ,UAAU,EAAE,CACR;QACIC,UAAU,EAAE,iBAAiB;QAC7BC,KAAK,EAAEjB,WAAW,CAACkB;MACvB,CAAC,EACD;QACIF,UAAU,EAAE,mBAAmB;QAC/BC,KAAK,EAAEjB,WAAW,CAACmB;MACvB,CAAC;IAET,CAAC;;IAED;IACA3B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAM2B,YAAY,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE;MAAEgB,IAAI,EAAE;IAAmB,CAAC,CAAC;IACvF,MAAMC,WAAW,GAAG,MAAM7B,MAAM,CAACU,SAAS,CAACc,YAAY,CAAC;IAExD,OAAO,UAAUK,WAAW,EAAE;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZlC,OAAO,CAACkC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}