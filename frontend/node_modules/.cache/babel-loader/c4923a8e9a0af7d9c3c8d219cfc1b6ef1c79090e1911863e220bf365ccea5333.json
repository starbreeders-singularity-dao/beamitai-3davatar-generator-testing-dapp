{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BaseWeb3Error, MultipleErrors } from '../web3_error_base.js';\nimport { ERR_INVALID_RESPONSE, ERR_RESPONSE } from '../error_codes.js';\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `json_rpc.ts`\nconst isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && (\n// eslint-disable-next-line no-null/no-null\nresponse.result === undefined || response.result === null) &&\n// JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\nconst buildErrorMessage = response => isResponseWithError(response) ? response.error.message : '';\nexport class ResponseError extends BaseWeb3Error {\n  constructor(response, message, request, statusCode) {\n    var _a;\n    super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response) ? response.map(r => buildErrorMessage(r)).join(',') : buildErrorMessage(response)}`);\n    this.code = ERR_RESPONSE;\n    if (!message) {\n      this.data = Array.isArray(response) ? response.map(r => {\n        var _a;\n        return (_a = r.error) === null || _a === void 0 ? void 0 : _a.data;\n      }) : (_a = response === null || response === void 0 ? void 0 : response.error) === null || _a === void 0 ? void 0 : _a.data;\n    }\n    this.statusCode = statusCode;\n    this.request = request;\n    let errorOrErrors;\n    if (`error` in response) {\n      errorOrErrors = response.error;\n    } else if (response instanceof Array) {\n      errorOrErrors = response.filter(r => r.error).map(r => r.error);\n    }\n    if (Array.isArray(errorOrErrors) && errorOrErrors.length > 0) {\n      this.cause = new MultipleErrors(errorOrErrors);\n    } else {\n      this.cause = errorOrErrors;\n    }\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      data: this.data,\n      request: this.request,\n      statusCode: this.statusCode\n    });\n  }\n}\nexport class InvalidResponseError extends ResponseError {\n  constructor(result, request) {\n    super(result, undefined, request);\n    this.code = ERR_INVALID_RESPONSE;\n    let errorOrErrors;\n    if (`error` in result) {\n      errorOrErrors = result.error;\n    } else if (result instanceof Array) {\n      errorOrErrors = result.map(r => r.error);\n    }\n    if (Array.isArray(errorOrErrors)) {\n      this.cause = new MultipleErrors(errorOrErrors);\n    } else {\n      this.cause = errorOrErrors;\n    }\n  }\n}\n//# sourceMappingURL=response_errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}