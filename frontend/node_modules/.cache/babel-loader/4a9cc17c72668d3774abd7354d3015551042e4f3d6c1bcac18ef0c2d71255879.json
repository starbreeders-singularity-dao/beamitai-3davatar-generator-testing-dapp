{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3BaseProvider } from 'web3-types';\nimport { EventEmitter } from 'eventemitter3';\nimport { EIP1193ProviderRpcError } from 'web3-errors';\nimport { toPayload } from './json_rpc.js';\n/**\n * This is an abstract class, which extends {@link Web3BaseProvider} class. This class is used to implement a provider that adheres to the EIP-1193 standard for Ethereum providers.\n */\nexport class Eip1193Provider extends Web3BaseProvider {\n  constructor() {\n    super(...arguments);\n    this._eventEmitter = new EventEmitter();\n    this._chainId = '';\n    this._accounts = [];\n  }\n  _getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      const data = yield this.request(toPayload({\n        method: 'eth_chainId',\n        params: []\n      }));\n      return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : '';\n    });\n  }\n  _getAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      const data = yield this.request(toPayload({\n        method: 'eth_accounts',\n        params: []\n      }));\n      return (_a = data === null || data === void 0 ? void 0 : data.result) !== null && _a !== void 0 ? _a : [];\n    });\n  }\n  _onConnect() {\n    Promise.all([this._getChainId().then(chainId => {\n      if (chainId !== this._chainId) {\n        this._chainId = chainId;\n        this._eventEmitter.emit('chainChanged', this._chainId);\n      }\n    }).catch(err => {\n      // todo: add error handler\n      console.error(err);\n    }), this._getAccounts().then(accounts => {\n      if (!(this._accounts.length === accounts.length && accounts.every(v => accounts.includes(v)))) {\n        this._accounts = accounts;\n        this._onAccountsChanged();\n      }\n    }).catch(err => {\n      // todo: add error handler\n      // eslint-disable-next-line no-console\n      console.error(err);\n    })]).then(() => this._eventEmitter.emit('connect', {\n      chainId: this._chainId\n    })).catch(err => {\n      // todo: add error handler\n      // eslint-disable-next-line no-console\n      console.error(err);\n    });\n  }\n  // todo this must be ProvideRpcError with a message too\n  _onDisconnect(code, data) {\n    this._eventEmitter.emit('disconnect', new EIP1193ProviderRpcError(code, data));\n  }\n  _onAccountsChanged() {\n    // get chainId and safe to local\n    this._eventEmitter.emit('accountsChanged', this._accounts);\n  }\n}\n//# sourceMappingURL=web3_eip1193_provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}