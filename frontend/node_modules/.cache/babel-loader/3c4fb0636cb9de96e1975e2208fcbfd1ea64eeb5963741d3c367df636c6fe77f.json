{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_RAW_TX_UNDEFINED, ERR_TX, ERR_TX_BLOCK_TIMEOUT, ERR_TX_CONTRACT_NOT_STORED, ERR_TX_CHAIN_ID_MISMATCH, ERR_TX_DATA_AND_INPUT, ERR_TX_GAS_MISMATCH, ERR_TX_CHAIN_MISMATCH, ERR_TX_HARDFORK_MISMATCH, ERR_TX_INVALID_CALL, ERR_TX_INVALID_CHAIN_INFO, ERR_TX_INVALID_FEE_MARKET_GAS, ERR_TX_INVALID_FEE_MARKET_GAS_PRICE, ERR_TX_INVALID_LEGACY_FEE_MARKET, ERR_TX_INVALID_LEGACY_GAS, ERR_TX_INVALID_NONCE_OR_CHAIN_ID, ERR_TX_INVALID_OBJECT, ERR_TX_INVALID_SENDER, ERR_TX_INVALID_RECEIVER, ERR_TX_LOCAL_WALLET_NOT_AVAILABLE, ERR_TX_MISSING_CHAIN_INFO, ERR_TX_MISSING_CUSTOM_CHAIN, ERR_TX_MISSING_CUSTOM_CHAIN_ID, ERR_TX_MISSING_GAS, ERR_TX_NO_CONTRACT_ADDRESS, ERR_TX_NOT_FOUND, ERR_TX_OUT_OF_GAS, ERR_TX_POLLING_TIMEOUT, ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER, ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL, ERR_TX_REVERT_INSTRUCTION, ERR_TX_REVERT_TRANSACTION, ERR_TX_REVERT_WITHOUT_REASON, ERR_TX_SEND_TIMEOUT, ERR_TX_SIGNING, ERR_TX_UNABLE_TO_POPULATE_NONCE, ERR_TX_UNSUPPORTED_EIP_1559, ERR_TX_UNSUPPORTED_TYPE, ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR, ERR_TX_INVALID_PROPERTIES_FOR_TYPE, ERR_TX_MISSING_GAS_INNER_ERROR, ERR_TX_GAS_MISMATCH_INNER_ERROR } from '../error_codes.js';\nimport { InvalidValueError, BaseWeb3Error } from '../web3_error_base.js';\nexport class TransactionError extends BaseWeb3Error {\n  constructor(message, receipt) {\n    super(message);\n    this.receipt = receipt;\n    this.code = ERR_TX;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n}\nexport class RevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature) {\n    super(`Your request got reverted with the following reason string: ${reason}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.code = ERR_TX_REVERT_INSTRUCTION;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature\n    });\n  }\n}\nexport class TransactionRevertInstructionError extends BaseWeb3Error {\n  constructor(reason, signature, receipt, data) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`);\n    this.reason = reason;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n}\n/**\n * This error is used when a transaction to a smart contract fails and\n * a custom user error (https://blog.soliditylang.org/2021/04/21/custom-errors/)\n * is able to be parsed from the revert reason\n */\nexport class TransactionRevertWithCustomError extends TransactionRevertInstructionError {\n  constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {\n    super(reason);\n    this.reason = reason;\n    this.customErrorName = customErrorName;\n    this.customErrorDecodedSignature = customErrorDecodedSignature;\n    this.customErrorArguments = customErrorArguments;\n    this.signature = signature;\n    this.receipt = receipt;\n    this.data = data;\n    this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      reason: this.reason,\n      customErrorName: this.customErrorName,\n      customErrorDecodedSignature: this.customErrorDecodedSignature,\n      customErrorArguments: this.customErrorArguments,\n      signature: this.signature,\n      receipt: this.receipt,\n      data: this.data\n    });\n  }\n}\nexport class NoContractAddressFoundError extends TransactionError {\n  constructor(receipt) {\n    super(\"The transaction receipt didn't contain a contract address.\", receipt);\n    this.code = ERR_TX_NO_CONTRACT_ADDRESS;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      receipt: this.receipt\n    });\n  }\n}\nexport class ContractCodeNotStoredError extends TransactionError {\n  constructor(receipt) {\n    super(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n    this.code = ERR_TX_CONTRACT_NOT_STORED;\n  }\n}\nexport class TransactionRevertedWithoutReasonError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction has been reverted by the EVM${receipt === undefined ? '' : `:\\n ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);\n    this.code = ERR_TX_REVERT_WITHOUT_REASON;\n  }\n}\nexport class TransactionOutOfGasError extends TransactionError {\n  constructor(receipt) {\n    super(`Transaction ran out of gas. Please provide more gas:\\n ${JSON.stringify(receipt, undefined, 2)}`, receipt);\n    this.code = ERR_TX_OUT_OF_GAS;\n  }\n}\nexport class UndefinedRawTransactionError extends TransactionError {\n  constructor() {\n    super(`Raw transaction undefined`);\n    this.code = ERR_RAW_TX_UNDEFINED;\n  }\n}\nexport class TransactionNotFound extends TransactionError {\n  constructor() {\n    super('Transaction not found');\n    this.code = ERR_TX_NOT_FOUND;\n  }\n}\nexport class InvalidTransactionWithSender extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid sender');\n    this.code = ERR_TX_INVALID_SENDER;\n  }\n}\nexport class InvalidTransactionWithReceiver extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction with invalid receiver');\n    this.code = ERR_TX_INVALID_RECEIVER;\n  }\n}\nexport class InvalidTransactionCall extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction call');\n    this.code = ERR_TX_INVALID_CALL;\n  }\n}\nexport class MissingCustomChainError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainError', 'If tx.common is provided it must have tx.common.customChain');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN;\n  }\n}\nexport class MissingCustomChainIdError extends InvalidValueError {\n  constructor() {\n    super('MissingCustomChainIdError', 'If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId');\n    this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;\n  }\n}\nexport class ChainIdMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value),\n    // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176\n    'Chain Id doesnt match in tx.chainId tx.common.customChain.chainId');\n    this.code = ERR_TX_CHAIN_ID_MISMATCH;\n  }\n}\nexport class ChainMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'Chain doesnt match in tx.chain tx.common.basechain');\n    this.code = ERR_TX_CHAIN_MISMATCH;\n  }\n}\nexport class HardforkMismatchError extends InvalidValueError {\n  constructor(value) {\n    super(JSON.stringify(value), 'hardfork doesnt match in tx.hardfork tx.common.hardfork');\n    this.code = ERR_TX_HARDFORK_MISMATCH;\n  }\n}\nexport class CommonOrChainAndHardforkError extends InvalidValueError {\n  constructor() {\n    super('CommonOrChainAndHardforkError', 'Please provide the common object or the chain and hardfork property but not all together.');\n    this.code = ERR_TX_INVALID_CHAIN_INFO;\n  }\n}\nexport class MissingChainOrHardforkError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super('MissingChainOrHardforkError', `When specifying chain and hardfork, both values must be defined. Received \"chain\": ${(_a = value.chain) !== null && _a !== void 0 ? _a : 'undefined'}, \"hardfork\": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : 'undefined'}`);\n    this.code = ERR_TX_MISSING_CHAIN_INFO;\n  }\n}\nexport class MissingGasInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions');\n    this.code = ERR_TX_MISSING_GAS_INNER_ERROR;\n  }\n}\nexport class MissingGasError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, '\"gas\" is missing');\n    this.code = ERR_TX_MISSING_GAS;\n    this.cause = new MissingGasInnerError();\n  }\n}\nexport class TransactionGasMismatchInnerError extends BaseWeb3Error {\n  constructor() {\n    super('Missing properties in transaction, either define \"gas\" and \"gasPrice\" for type 0 transactions or \"gas\", \"maxPriorityFeePerGas\" and \"maxFeePerGas\" for type 2 transactions, not both');\n    this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;\n  }\n}\nexport class TransactionGasMismatchError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b, _c, _d;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : 'undefined'}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : 'undefined'}`, 'transaction must specify legacy or fee market gas properties, not both');\n    this.code = ERR_TX_GAS_MISMATCH;\n    this.cause = new TransactionGasMismatchInnerError();\n  }\n}\nexport class InvalidGasOrGasPrice extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`gas: ${(_a = value.gas) !== null && _a !== void 0 ? _a : 'undefined'}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Gas or gasPrice is lower than 0');\n    this.code = ERR_TX_INVALID_LEGACY_GAS;\n  }\n}\nexport class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, 'maxPriorityFeePerGas or maxFeePerGas is lower than 0');\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS;\n  }\n}\nexport class Eip1559GasPriceError extends InvalidValueError {\n  constructor(value) {\n    super(value, \"eip-1559 transactions don't support gasPrice\");\n    this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;\n  }\n}\nexport class UnsupportedFeeMarketError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`maxPriorityFeePerGas: ${(_a = value.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : 'undefined'}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : 'undefined'}`, \"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\");\n    this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;\n  }\n}\nexport class InvalidTransactionObjectError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid transaction object');\n    this.code = ERR_TX_INVALID_OBJECT;\n  }\n}\nexport class InvalidNonceOrChainIdError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`nonce: ${(_a = value.nonce) !== null && _a !== void 0 ? _a : 'undefined'}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : 'undefined'}`, 'Nonce or chainId is lower than 0');\n    this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;\n  }\n}\nexport class UnableToPopulateNonceError extends InvalidValueError {\n  constructor() {\n    super('UnableToPopulateNonceError', 'unable to populate nonce, no from address available');\n    this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;\n  }\n}\nexport class Eip1559NotSupportedError extends InvalidValueError {\n  constructor() {\n    super('Eip1559NotSupportedError', \"Network doesn't support eip-1559\");\n    this.code = ERR_TX_UNSUPPORTED_EIP_1559;\n  }\n}\nexport class UnsupportedTransactionTypeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'unsupported transaction type');\n    this.code = ERR_TX_UNSUPPORTED_TYPE;\n  }\n}\nexport class TransactionDataAndInputError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`data: ${(_a = value.data) !== null && _a !== void 0 ? _a : 'undefined'}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : 'undefined'}`, 'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    this.code = ERR_TX_DATA_AND_INPUT;\n  }\n}\nexport class TransactionSendTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!\\n\\tTransaction Hash: ${value.transactionHash ? value.transactionHash.toString() : 'not available'}`);\n    this.code = ERR_TX_SEND_TIMEOUT;\n  }\n}\nfunction transactionTimeoutHint(transactionHash) {\n  return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!\\n\\tTransaction Hash: ${transactionHash ? transactionHash.toString() : 'not available'}`;\n}\nexport class TransactionPollingTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_POLLING_TIMEOUT;\n  }\n}\nexport class TransactionBlockTimeoutError extends BaseWeb3Error {\n  constructor(value) {\n    super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);\n    this.code = ERR_TX_BLOCK_TIMEOUT;\n  }\n}\nexport class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {\n  constructor(value) {\n    var _a, _b;\n    super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a = value.blockHash) === null || _a === void 0 ? void 0 : _a.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);\n    this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;\n  }\n}\nexport class TransactionReceiptMissingBlockNumberError extends InvalidValueError {\n  constructor(value) {\n    super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);\n    this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;\n  }\n}\nexport class TransactionSigningError extends BaseWeb3Error {\n  constructor(errorDetails) {\n    super(`Invalid signature. \"${errorDetails}\"`);\n    this.code = ERR_TX_SIGNING;\n  }\n}\nexport class LocalWalletNotAvailableError extends InvalidValueError {\n  constructor() {\n    super('LocalWalletNotAvailableError', `Attempted to index account in local wallet, but no wallet is available`);\n    this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;\n  }\n}\nexport class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {\n  constructor(validationError, txType) {\n    const invalidPropertyNames = [];\n    validationError.forEach(error => invalidPropertyNames.push(error.keyword));\n    super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(', ')}`);\n    this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;\n  }\n}\n//# sourceMappingURL=transaction_errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}