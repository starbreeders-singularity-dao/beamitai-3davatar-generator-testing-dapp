{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconsole.log('Starting NFT.Storage setup...');\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found');\n}\nconst authHeader = `Bearer ${NFT_STORAGE_KEY.trim()}`;\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // 1. Create collection first\n    const createCollectionResponse = await fetch('https://preserve.nft.storage/api/v1/collection/create_collection', {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        collectionName: \"BeamitAIAvatars\",\n        contractAddress: \"undefined\",\n        // For testing\n        chainID: \"80002\",\n        // Mumbai testnet\n        network: \"polygon\"\n      })\n    });\n    if (!createCollectionResponse.ok) {\n      const error = await createCollectionResponse.json();\n      console.error('Collection creation response:', error);\n      throw new Error(`Collection creation failed: ${JSON.stringify(error)}`);\n    }\n    const collectionData = await createCollectionResponse.json();\n    console.log('Collection created:', collectionData);\n\n    // 2. Get the GLB file\n    console.log('Fetching GLB from:', glbUrl);\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // 3. Create token data\n    const tokenData = [{\n      tokenID: Date.now().toString(),\n      cid: \"uploading...\" // Temporary CID\n    }];\n    const tokenFile = new Blob([JSON.stringify(tokenData)], {\n      type: 'application/json'\n    });\n\n    // 4. Upload token data\n    const formData = new FormData();\n    formData.append('collectionID', collectionData.collectionID);\n    formData.append('file', tokenFile, 'tokens.json');\n    const uploadResponse = await fetch('https://preserve.nft.storage/api/v1/collection/add_tokens', {\n      method: 'POST',\n      headers: {\n        'Authorization': authHeader\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload response:', error);\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const uploadData = await uploadResponse.json();\n    console.log('Upload successful:', uploadData);\n\n    // Return the IPFS URI\n    return `ipfs://${uploadData.cid}`;\n  } catch (error) {\n    console.error('Upload error:', {\n      message: error.message,\n      name: error.name,\n      response: error.response\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","Error","authHeader","trim","uploadToIPFS","glbUrl","originalNFT","createCollectionResponse","fetch","method","headers","body","JSON","stringify","collectionName","contractAddress","chainID","network","ok","error","json","collectionData","response","status","glbBlob","blob","size","type","tokenData","tokenID","Date","now","toString","cid","tokenFile","Blob","formData","FormData","append","collectionID","uploadResponse","uploadData","message","name"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\nconsole.log('Starting NFT.Storage setup...');\n\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found');\n}\n\nconst authHeader = `Bearer ${NFT_STORAGE_KEY.trim()}`;\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // 1. Create collection first\n        const createCollectionResponse = await fetch('https://preserve.nft.storage/api/v1/collection/create_collection', {\n            method: 'POST',\n            headers: {\n                'Authorization': authHeader,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                collectionName: \"BeamitAIAvatars\",\n                contractAddress: \"undefined\", // For testing\n                chainID: \"80002\",  // Mumbai testnet\n                network: \"polygon\"\n            })\n        });\n\n        if (!createCollectionResponse.ok) {\n            const error = await createCollectionResponse.json();\n            console.error('Collection creation response:', error);\n            throw new Error(`Collection creation failed: ${JSON.stringify(error)}`);\n        }\n\n        const collectionData = await createCollectionResponse.json();\n        console.log('Collection created:', collectionData);\n\n        // 2. Get the GLB file\n        console.log('Fetching GLB from:', glbUrl);\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // 3. Create token data\n        const tokenData = [{\n            tokenID: Date.now().toString(),\n            cid: \"uploading...\" // Temporary CID\n        }];\n\n        const tokenFile = new Blob([JSON.stringify(tokenData)], {\n            type: 'application/json'\n        });\n\n        // 4. Upload token data\n        const formData = new FormData();\n        formData.append('collectionID', collectionData.collectionID);\n        formData.append('file', tokenFile, 'tokens.json');\n\n        const uploadResponse = await fetch('https://preserve.nft.storage/api/v1/collection/add_tokens', {\n            method: 'POST',\n            headers: {\n                'Authorization': authHeader\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload response:', error);\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const uploadData = await uploadResponse.json();\n        console.log('Upload successful:', uploadData);\n\n        // Return the IPFS URI\n        return `ipfs://${uploadData.cid}`;\n    } catch (error) {\n        console.error('Upload error:', {\n            message: error.message,\n            name: error.name,\n            response: error.response\n        });\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}