{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport fetch from 'cross-fetch';\nimport { Web3BaseProvider } from 'web3-types';\nimport { InvalidClientError, MethodNotImplementedError, ResponseError } from 'web3-errors';\nexport default class HttpProvider extends Web3BaseProvider {\n  constructor(clientUrl, httpProviderOptions) {\n    super();\n    if (!HttpProvider.validateClientUrl(clientUrl)) throw new InvalidClientError(clientUrl);\n    this.clientUrl = clientUrl;\n    this.httpProviderOptions = httpProviderOptions;\n  }\n  static validateClientUrl(clientUrl) {\n    return typeof clientUrl === 'string' ? /^http(s)?:\\/\\//i.test(clientUrl) : false;\n  }\n  /* eslint-disable class-methods-use-this */\n  getStatus() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  supportsSubscriptions() {\n    return false;\n  }\n  request(payload, requestOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const providerOptionsCombined = Object.assign(Object.assign({}, (_a = this.httpProviderOptions) === null || _a === void 0 ? void 0 : _a.providerOptions), requestOptions);\n      const response = yield fetch(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), {\n        method: 'POST',\n        headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), {\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify(payload)\n      }));\n      if (!response.ok) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        throw new ResponseError(yield response.json(), undefined, undefined, response.status);\n      }\n      ;\n      return yield response.json();\n    });\n  }\n  /* eslint-disable class-methods-use-this */\n  on() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  removeListener() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  once() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  removeAllListeners() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  connect() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  disconnect() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  reset() {\n    throw new MethodNotImplementedError();\n  }\n  /* eslint-disable class-methods-use-this */\n  reconnect() {\n    throw new MethodNotImplementedError();\n  }\n}\nexport { HttpProvider };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}