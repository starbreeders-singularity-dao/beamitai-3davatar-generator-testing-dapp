{"ast":null,"code":"import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris(bvh, side, ray, offset, count, intersections, near, far) {\n  const {\n    geometry,\n    _indirectBuffer\n  } = bvh;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    intersectTri(geometry, side, ray, i, intersections, near, far);\n  }\n}\nfunction intersectClosestTri(bvh, side, ray, offset, count, near, far) {\n  const {\n    geometry,\n    _indirectBuffer\n  } = bvh;\n  let dist = Infinity;\n  let res = null;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let intersection;\n    intersection = intersectTri(geometry, side, ray, i, null, near, far);\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n  return res;\n}\nfunction iterateOverTriangles(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n  const {\n    geometry\n  } = bvh;\n  const {\n    index\n  } = geometry;\n  const pos = geometry.attributes.position;\n  for (let i = offset, l = count + offset; i < l; i++) {\n    let tri;\n    tri = i;\n    setTriangle(triangle, tri * 3, index, pos);\n    triangle.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport { intersectClosestTri, intersectTris, iterateOverTriangles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}