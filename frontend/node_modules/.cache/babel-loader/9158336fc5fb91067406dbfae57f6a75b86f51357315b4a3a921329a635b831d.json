{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { QuadraticBezierCurve3, Vector3 } from 'three';\nimport { Line } from './Line.js';\nconst v = /* @__PURE__ */new Vector3();\nconst QuadraticBezierLine = /* @__PURE__ */React.forwardRef(function QuadraticBezierLine({\n  start = [0, 0, 0],\n  end = [0, 0, 0],\n  mid,\n  segments = 20,\n  ...rest\n}, forwardref) {\n  const ref = React.useRef(null);\n  React.useImperativeHandle(forwardref, () => ref.current);\n  const [curve] = React.useState(() => new QuadraticBezierCurve3(undefined, undefined, undefined));\n  const getPoints = React.useCallback((start, end, mid, segments = 20) => {\n    if (start instanceof Vector3) curve.v0.copy(start);else curve.v0.set(...start);\n    if (end instanceof Vector3) curve.v2.copy(end);else curve.v2.set(...end);\n    if (mid instanceof Vector3) {\n      curve.v1.copy(mid);\n    } else if (Array.isArray(mid)) {\n      curve.v1.set(...mid);\n    } else {\n      curve.v1.copy(curve.v0.clone().add(curve.v2.clone().sub(curve.v0)).add(v.set(0, curve.v0.y - curve.v2.y, 0)));\n    }\n    return curve.getPoints(segments);\n  }, []);\n  React.useLayoutEffect(() => {\n    ref.current.setPoints = (start, end, mid) => {\n      const points = getPoints(start, end, mid);\n      if (ref.current.geometry) ref.current.geometry.setPositions(points.map(p => p.toArray()).flat());\n    };\n  }, []);\n  const points = React.useMemo(() => getPoints(start, end, mid, segments), [start, end, mid, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: points\n  }, rest));\n});\nexport { QuadraticBezierLine };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}