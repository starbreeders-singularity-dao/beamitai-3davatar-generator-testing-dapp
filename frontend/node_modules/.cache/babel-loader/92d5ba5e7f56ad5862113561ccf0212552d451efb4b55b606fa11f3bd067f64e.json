{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { decodeAddress, encodeAddress } from './address.js';\nimport { decodeBool, encodeBoolean } from './bool.js';\nimport { decodeBytes, encodeBytes } from './bytes.js';\nimport { decodeNumber, encodeNumber } from './number.js';\nimport { decodeString, encodeString } from './string.js';\n// eslint-disable-next-line import/no-cycle\nimport { decodeTuple, encodeTuple } from './tuple.js';\n// eslint-disable-next-line import/no-cycle\nimport { decodeArray, encodeArray } from './array.js';\nexport { encodeAddress, decodeAddress } from './address.js';\nexport { encodeBoolean, decodeBool } from './bool.js';\nexport { encodeBytes, decodeBytes } from './bytes.js';\nexport { encodeNumber, decodeNumber } from './number.js';\nexport { encodeString, decodeString } from './string.js';\n// eslint-disable-next-line import/no-cycle\nexport { encodeTuple, decodeTuple } from './tuple.js';\n// eslint-disable-next-line import/no-cycle\nexport { encodeArray, decodeArray } from './array.js';\nexport function encodeParamFromAbiParameter(param, value) {\n  if (param.type === 'string') {\n    return encodeString(param, value);\n  }\n  if (param.type === 'bool') {\n    return encodeBoolean(param, value);\n  }\n  if (param.type === 'address') {\n    return encodeAddress(param, value);\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(param, value);\n  }\n  if (param.type.endsWith(']')) {\n    return encodeArray(param, value);\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(param, value);\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    return encodeNumber(param, value);\n  }\n  throw new AbiError('Unsupported', {\n    param,\n    value\n  });\n}\nexport function decodeParamFromAbiParameter(param, bytes) {\n  if (param.type === 'string') {\n    return decodeString(param, bytes);\n  }\n  if (param.type === 'bool') {\n    return decodeBool(param, bytes);\n  }\n  if (param.type === 'address') {\n    return decodeAddress(param, bytes);\n  }\n  if (param.type === 'tuple') {\n    return decodeTuple(param, bytes);\n  }\n  if (param.type.endsWith(']')) {\n    return decodeArray(param, bytes);\n  }\n  if (param.type.startsWith('bytes')) {\n    return decodeBytes(param, bytes);\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    return decodeNumber(param, bytes);\n  }\n  throw new AbiError('Unsupported', {\n    param,\n    bytes\n  });\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}