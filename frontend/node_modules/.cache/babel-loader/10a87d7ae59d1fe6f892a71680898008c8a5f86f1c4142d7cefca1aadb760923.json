{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { Eip1559NotSupportedError, UnsupportedTransactionTypeError } from 'web3-errors';\nimport { format } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { getBlock, getGasPrice } from '../rpc_method_wrappers.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionType } from './transaction_builder.js';\nfunction getEip1559GasPricing(transaction, web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    var _a, _b, _c, _d;\n    const block = yield getBlock(web3Context, web3Context.defaultBlock, false, ETH_DATA_FORMAT);\n    if (isNullish(block.baseFeePerGas)) throw new Eip1559NotSupportedError();\n    let gasPrice;\n    if (isNullish(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) {\n      gasPrice = yield getGasPrice(web3Context, returnFormat);\n    }\n    if (!isNullish(transaction.gasPrice) || !isNullish(gasPrice)) {\n      const convertedTransactionGasPrice = format({\n        format: 'uint'\n      }, (_a = transaction.gasPrice) !== null && _a !== void 0 ? _a : gasPrice, returnFormat);\n      return {\n        maxPriorityFeePerGas: convertedTransactionGasPrice,\n        maxFeePerGas: convertedTransactionGasPrice\n      };\n    }\n    return {\n      maxPriorityFeePerGas: format({\n        format: 'uint'\n      }, (_b = transaction.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : web3Context.defaultMaxPriorityFeePerGas, returnFormat),\n      maxFeePerGas: format({\n        format: 'uint'\n      }, (_c = transaction.maxFeePerGas) !== null && _c !== void 0 ? _c : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_d = transaction.maxPriorityFeePerGas) !== null && _d !== void 0 ? _d : web3Context.defaultMaxPriorityFeePerGas), returnFormat)\n    };\n  });\n}\nexport function getTransactionGasPricing(transaction, web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionType = getTransactionType(transaction, web3Context);\n    if (!isNullish(transactionType)) {\n      if (transactionType.startsWith('-')) throw new UnsupportedTransactionTypeError(transactionType);\n      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n      if (Number(transactionType) < 0 || Number(transactionType) > 127) throw new UnsupportedTransactionTypeError(transactionType);\n      if (isNullish(transaction.gasPrice) && (transactionType === '0x0' || transactionType === '0x1')) return {\n        gasPrice: yield getGasPrice(web3Context, returnFormat),\n        maxPriorityFeePerGas: undefined,\n        maxFeePerGas: undefined\n      };\n      if (transactionType === '0x2') {\n        return Object.assign({\n          gasPrice: undefined\n        }, yield getEip1559GasPricing(transaction, web3Context, returnFormat));\n      }\n    }\n    return undefined;\n  });\n}\n//# sourceMappingURL=get_transaction_gas_pricing.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}