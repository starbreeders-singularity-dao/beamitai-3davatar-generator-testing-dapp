{"ast":null,"code":"import { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nexport function decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = {\n  fillInputAndData: false\n}) {\n  return {\n    raw: format({\n      format: 'bytes'\n    }, encodedSignedTransaction, returnFormat),\n    tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes(encodedSignedTransaction)).toJSON()), {\n      hash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n      type: detectRawTransactionType(hexToBytes(encodedSignedTransaction))\n    }), returnFormat, {\n      fillInputAndData: options.fillInputAndData,\n      transactionSchema: options.transactionSchema\n    })\n  };\n}\n//# sourceMappingURL=decode_signed_transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}