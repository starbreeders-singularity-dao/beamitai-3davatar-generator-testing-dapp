{"ast":null,"code":"/**\n * This function performs intersection tests similar to Ray.intersectBox in three.js,\n * with the difference that the box values are read from an array to improve performance.\n */\nexport function intersectRay(nodeIndex32, array, ray, near, far) {\n  let tmin, tmax, tymin, tymax, tzmin, tzmax;\n  const invdirx = 1 / ray.direction.x,\n    invdiry = 1 / ray.direction.y,\n    invdirz = 1 / ray.direction.z;\n  const ox = ray.origin.x;\n  const oy = ray.origin.y;\n  const oz = ray.origin.z;\n  let minx = array[nodeIndex32];\n  let maxx = array[nodeIndex32 + 3];\n  let miny = array[nodeIndex32 + 1];\n  let maxy = array[nodeIndex32 + 3 + 1];\n  let minz = array[nodeIndex32 + 2];\n  let maxz = array[nodeIndex32 + 3 + 2];\n  if (invdirx >= 0) {\n    tmin = (minx - ox) * invdirx;\n    tmax = (maxx - ox) * invdirx;\n  } else {\n    tmin = (maxx - ox) * invdirx;\n    tmax = (minx - ox) * invdirx;\n  }\n  if (invdiry >= 0) {\n    tymin = (miny - oy) * invdiry;\n    tymax = (maxy - oy) * invdiry;\n  } else {\n    tymin = (maxy - oy) * invdiry;\n    tymax = (miny - oy) * invdiry;\n  }\n  if (tmin > tymax || tymin > tmax) return false;\n  if (tymin > tmin || isNaN(tmin)) tmin = tymin;\n  if (tymax < tmax || isNaN(tmax)) tmax = tymax;\n  if (invdirz >= 0) {\n    tzmin = (minz - oz) * invdirz;\n    tzmax = (maxz - oz) * invdirz;\n  } else {\n    tzmin = (maxz - oz) * invdirz;\n    tzmax = (minz - oz) * invdirz;\n  }\n  if (tmin > tzmax || tzmin > tmax) return false;\n  if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n  if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n  //return point closest to the ray (positive side)\n\n  return tmin <= far && tmax >= near;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}