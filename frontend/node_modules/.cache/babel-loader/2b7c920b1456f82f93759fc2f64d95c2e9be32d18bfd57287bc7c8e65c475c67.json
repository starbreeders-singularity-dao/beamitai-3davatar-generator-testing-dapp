{"ast":null,"code":"const HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n  // hue\n  \"\tfloat angle = hue * 3.14159265;\", \"\tfloat s = sin(angle), c = cos(angle);\", \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"\tfloat len = length(gl_FragColor.rgb);\", \"\tgl_FragColor.rgb = vec3(\", \"\t\tdot(gl_FragColor.rgb, weights.xyz),\", \"\t\tdot(gl_FragColor.rgb, weights.zxy),\", \"\t\tdot(gl_FragColor.rgb, weights.yzx)\", \"\t);\",\n  // saturation\n  \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"\tif (saturation > 0.0) {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"\t} else {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { HueSaturationShader };\n//# sourceMappingURL=HueSaturationShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}