{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { Vector3 } from 'three';\nimport { $altDefaulted, $announceModelVisibility, $getModelIsVisible, $isElementInViewport, $progressTracker, $scene, $shouldAttemptPreload, $updateSource, $userInputElement, toVector3D } from '../model-viewer-base.js';\nimport { $loader, CachingGLTFLoader } from '../three-components/CachingGLTFLoader.js';\nimport { Renderer } from '../three-components/Renderer.js';\nimport { throttle } from '../utilities.js';\nexport const PROGRESS_BAR_UPDATE_THRESHOLD = 100;\nconst DEFAULT_DRACO_DECODER_LOCATION = 'https://www.gstatic.com/draco/versioned/decoders/1.5.6/';\nconst DEFAULT_KTX2_TRANSCODER_LOCATION = 'https://www.gstatic.com/basis-universal/versioned/2021-04-15-ba1c3e4/';\nconst DEFAULT_LOTTIE_LOADER_LOCATION = 'https://cdn.jsdelivr.net/npm/three@0.149.0/examples/jsm/loaders/LottieLoader.js';\nconst RevealStrategy = {\n  AUTO: 'auto',\n  MANUAL: 'manual'\n};\nconst LoadingStrategy = {\n  AUTO: 'auto',\n  LAZY: 'lazy',\n  EAGER: 'eager'\n};\nexport const $defaultProgressBarElement = Symbol('defaultProgressBarElement');\nexport const $posterContainerElement = Symbol('posterContainerElement');\nexport const $defaultPosterElement = Symbol('defaultPosterElement');\nconst $shouldDismissPoster = Symbol('shouldDismissPoster');\nconst $hidePoster = Symbol('hidePoster');\nconst $modelIsRevealed = Symbol('modelIsRevealed');\nconst $updateProgressBar = Symbol('updateProgressBar');\nconst $ariaLabelCallToAction = Symbol('ariaLabelCallToAction');\nconst $onProgress = Symbol('onProgress');\n/**\n * LoadingMixin implements features related to lazy loading, as well as\n * presentation details related to the pre-load / pre-render presentation of a\n * <model-viewer>\n *\n * This mixin implements support for models with DRACO-compressed meshes.\n * The DRACO decoder will be loaded on-demand if a glTF that uses the DRACO mesh\n * compression extension is encountered.\n *\n * By default, the DRACO decoder will be loaded from a Google CDN. It is\n * possible to customize where the decoder is loaded from by defining a global\n * configuration option for `<model-viewer>` like so:\n *\n * ```html\n * <script>\n * self.ModelViewerElement = self.ModelViewerElement || {};\n * self.ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration strategy must be performed *before* the\n * first `<model-viewer>` element is created in the browser. The configuration\n * can be done anywhere, but the easiest way to ensure it is done at the right\n * time is to do it in the `<head>` of the HTML document. This is the\n * recommended way to set the location because it is most compatible with\n * scenarios where the `<model-viewer>` library is lazily loaded.\n *\n * If you absolutely have to set the DRACO decoder location *after* the first\n * `<model-viewer>` element is created, you can do it this way:\n *\n * ```html\n * <script>\n * const ModelViewerElement = customElements.get('model-viewer');\n * ModelViewerElement.dracoDecoderLocation =\n *     'http://example.com/location/of/draco/decoder/files/';\n * </script>\n * ```\n *\n * Note that the above configuration approach will not work until *after*\n * `<model-viewer>` is defined in the browser. Also note that this configuration\n * *must* be set *before* the first DRACO model is fully loaded.\n *\n * It is recommended that users who intend to take advantage of DRACO mesh\n * compression consider whether or not it is acceptable for their use case to\n * have code side-loaded from a Google CDN. If it is not acceptable, then the\n * location must be customized before loading any DRACO models in order to cause\n * the decoder to be loaded from an alternative, acceptable location.\n */\nexport const LoadingMixin = ModelViewerElement => {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  class LoadingModelViewerElement extends ModelViewerElement {\n    constructor(...args) {\n      super(...args);\n      /**\n       * A URL pointing to the image to use as a poster in scenarios where the\n       * <model-viewer> is not ready to reveal a rendered model to the viewer.\n       */\n      this.poster = null;\n      /**\n       * An enumerable attribute describing under what conditions the\n       * <model-viewer> should reveal a model to the viewer.\n       *\n       * The default value is \"auto\". The only supported alternative values is\n       * \"manual\".\n       */\n      this.reveal = RevealStrategy.AUTO;\n      /**\n       * An enumerable attribute describing under what conditions the\n       * <model-viewer> should preload a model.\n       *\n       * The default value is \"auto\". The only supported alternative values are\n       * \"lazy\" and \"eager\". Auto is equivalent to lazy, which loads the model\n       * when it is near the viewport for reveal = \"auto\", and when interacted\n       * with for reveal = \"interaction\". Eager loads the model immediately.\n       */\n      this.loading = LoadingStrategy.AUTO;\n      this[_a] = false;\n      this[_b] = false;\n      // TODO: Add this to the shadow root as part of this mixin's\n      // implementation:\n      this[_c] = this.shadowRoot.querySelector('.slot.poster');\n      this[_d] = this.shadowRoot.querySelector('#default-poster');\n      this[_e] = this.shadowRoot.querySelector('#default-progress-bar > .bar');\n      this[_f] = this[$defaultPosterElement].getAttribute('aria-label');\n      this[_g] = throttle(progress => {\n        const parentNode = this[$defaultProgressBarElement].parentNode;\n        requestAnimationFrame(() => {\n          this[$defaultProgressBarElement].style.transform = `scaleX(${progress})`;\n          if (progress === 0) {\n            // NOTE(cdata): We remove and re-append the progress bar in this\n            // condition so that the progress bar does not appear to\n            // transition backwards from the right when we reset to 0 (or\n            // otherwise <1) progress after having already reached 1 progress\n            // previously.\n            parentNode.removeChild(this[$defaultProgressBarElement]);\n            parentNode.appendChild(this[$defaultProgressBarElement]);\n          }\n          this[$defaultProgressBarElement].classList.toggle('hide', progress === 1.0);\n        });\n      }, PROGRESS_BAR_UPDATE_THRESHOLD);\n      this[_h] = event => {\n        const progress = event.detail.totalProgress;\n        const reason = event.detail.reason;\n        if (progress === 1.0) {\n          this[$updateProgressBar].flush();\n          if (this.loaded && (this[$shouldDismissPoster] || this.reveal === RevealStrategy.AUTO)) {\n            this[$hidePoster]();\n          }\n        }\n        this[$updateProgressBar](progress);\n        this.dispatchEvent(new CustomEvent('progress', {\n          detail: {\n            totalProgress: progress,\n            reason\n          }\n        }));\n      };\n      const ModelViewerElement = self.ModelViewerElement || {};\n      const dracoDecoderLocation = ModelViewerElement.dracoDecoderLocation || DEFAULT_DRACO_DECODER_LOCATION;\n      CachingGLTFLoader.setDRACODecoderLocation(dracoDecoderLocation);\n      const ktx2TranscoderLocation = ModelViewerElement.ktx2TranscoderLocation || DEFAULT_KTX2_TRANSCODER_LOCATION;\n      CachingGLTFLoader.setKTX2TranscoderLocation(ktx2TranscoderLocation);\n      if (ModelViewerElement.meshoptDecoderLocation) {\n        CachingGLTFLoader.setMeshoptDecoderLocation(ModelViewerElement.meshoptDecoderLocation);\n      }\n      const lottieLoaderLocation = ModelViewerElement.lottieLoaderLocation || DEFAULT_LOTTIE_LOADER_LOCATION;\n      Renderer.singleton.textureUtils.lottieLoaderUrl = lottieLoaderLocation;\n    }\n    static set dracoDecoderLocation(value) {\n      CachingGLTFLoader.setDRACODecoderLocation(value);\n    }\n    static get dracoDecoderLocation() {\n      return CachingGLTFLoader.getDRACODecoderLocation();\n    }\n    static set ktx2TranscoderLocation(value) {\n      CachingGLTFLoader.setKTX2TranscoderLocation(value);\n    }\n    static get ktx2TranscoderLocation() {\n      return CachingGLTFLoader.getKTX2TranscoderLocation();\n    }\n    static set meshoptDecoderLocation(value) {\n      CachingGLTFLoader.setMeshoptDecoderLocation(value);\n    }\n    static get meshoptDecoderLocation() {\n      return CachingGLTFLoader.getMeshoptDecoderLocation();\n    }\n    static set lottieLoaderLocation(value) {\n      Renderer.singleton.textureUtils.lottieLoaderUrl = value;\n    }\n    static get lottieLoaderLocation() {\n      return Renderer.singleton.textureUtils.lottieLoaderUrl;\n    }\n    /**\n     * If provided, the callback will be passed each resource URL before a\n     * request is sent. The callback may return the original URL, or a new URL\n     * to override loading behavior. This behavior can be used to load assets\n     * from .ZIP files, drag-and-drop APIs, and Data URIs.\n     */\n    static mapURLs(callback) {\n      Renderer.singleton.loader[$loader].manager.setURLModifier(callback);\n    }\n    /**\n     * Dismisses the poster, causing the model to load and render if\n     * necessary. This is currently effectively the same as interacting with\n     * the poster via user input.\n     */\n    dismissPoster() {\n      if (this.loaded) {\n        this[$hidePoster]();\n      } else {\n        this[$shouldDismissPoster] = true;\n        this[$updateSource]();\n      }\n    }\n    /**\n     * Displays the poster, hiding the 3D model. If this is called after the 3D\n     * model has been revealed, then it must be dismissed by a call to\n     * dismissPoster().\n     */\n    showPoster() {\n      const posterContainerElement = this[$posterContainerElement];\n      if (posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.add('show');\n      this[$userInputElement].classList.remove('show');\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.removeAttribute('tabindex');\n      defaultPosterElement.removeAttribute('aria-hidden');\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = false;\n      this[$announceModelVisibility](oldVisibility);\n    }\n    /**\n     * Returns the model's bounding box dimensions in meters, independent of\n     * turntable rotation.\n     */\n    getDimensions() {\n      return toVector3D(this[$scene].size);\n    }\n    getBoundingBoxCenter() {\n      return toVector3D(this[$scene].boundingBox.getCenter(new Vector3()));\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      if (!this.loaded) {\n        this.showPoster();\n      }\n      this[$progressTracker].addEventListener('progress', this[$onProgress]);\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this[$progressTracker].removeEventListener('progress', this[$onProgress]);\n    }\n    async updated(changedProperties) {\n      super.updated(changedProperties);\n      if (changedProperties.has('poster') && this.poster != null) {\n        this[$defaultPosterElement].style.backgroundImage = `url(${this.poster})`;\n      }\n      if (changedProperties.has('alt')) {\n        this[$defaultPosterElement].setAttribute('aria-label', this[$altDefaulted]);\n      }\n      if (changedProperties.has('reveal') || changedProperties.has('loading')) {\n        this[$updateSource]();\n      }\n    }\n    [(_a = $modelIsRevealed, _b = $shouldDismissPoster, _c = $posterContainerElement, _d = $defaultPosterElement, _e = $defaultProgressBarElement, _f = $ariaLabelCallToAction, _g = $updateProgressBar, _h = $onProgress, $shouldAttemptPreload)]() {\n      return !!this.src && (this[$shouldDismissPoster] || this.loading === LoadingStrategy.EAGER || this.reveal === RevealStrategy.AUTO && this[$isElementInViewport]);\n    }\n    [$hidePoster]() {\n      this[$shouldDismissPoster] = false;\n      const posterContainerElement = this[$posterContainerElement];\n      if (!posterContainerElement.classList.contains('show')) {\n        return;\n      }\n      posterContainerElement.classList.remove('show');\n      this[$userInputElement].classList.add('show');\n      const oldVisibility = this.modelIsVisible;\n      this[$modelIsRevealed] = true;\n      this[$announceModelVisibility](oldVisibility);\n      const root = this.getRootNode();\n      // If the <model-viewer> is still focused, forward the focus to\n      // the canvas that has just been revealed\n      if (root && root.activeElement === this) {\n        this[$userInputElement].focus();\n      }\n      // Ensure that the poster is no longer focusable or visible to\n      // screen readers\n      const defaultPosterElement = this[$defaultPosterElement];\n      defaultPosterElement.setAttribute('aria-hidden', 'true');\n      defaultPosterElement.tabIndex = -1;\n      this.dispatchEvent(new CustomEvent('poster-dismissed'));\n    }\n    [$getModelIsVisible]() {\n      return super[$getModelIsVisible]() && this[$modelIsRevealed];\n    }\n  }\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"poster\", void 0);\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"reveal\", void 0);\n  __decorate([property({\n    type: String\n  })], LoadingModelViewerElement.prototype, \"loading\", void 0);\n  return LoadingModelViewerElement;\n};\n//# sourceMappingURL=loading.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}