{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\nconsole.log('Starting NFT.Storage setup with new API format...');\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found');\n}\n\n// Configure client with new API format\nconst client = new NFTStorage({\n  token: NFT_STORAGE_KEY.trim(),\n  endpoint: new URL('https://api.nft.storage')\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // First get the GLB file\n    console.log('Fetching GLB from:', glbUrl);\n    const response = await fetch(glbUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GLB: ${response.status}`);\n    }\n    const glbBlob = await response.blob();\n    console.log('GLB file fetched:', {\n      size: glbBlob.size,\n      type: glbBlob.type\n    });\n\n    // Create form data for upload\n    const formData = new FormData();\n    formData.append('file', glbBlob, 'model.glb');\n\n    // Direct API call\n    const uploadResponse = await fetch('https://api.nft.storage/upload', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY}`\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const {\n      value: {\n        cid\n      }\n    } = await uploadResponse.json();\n    console.log('File uploaded to IPFS:', cid);\n\n    // Create metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: `ipfs://${cid}`,\n      animation_url: `ipfs://${cid}`,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n\n    // Upload metadata\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataFormData = new FormData();\n    metadataFormData.append('file', metadataBlob, 'metadata.json');\n    const metadataResponse = await fetch('https://api.nft.storage/upload', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${NFT_STORAGE_KEY}`\n      },\n      body: metadataFormData\n    });\n    if (!metadataResponse.ok) {\n      const error = await metadataResponse.json();\n      throw new Error(`Metadata upload failed: ${JSON.stringify(error)}`);\n    }\n    const {\n      value: {\n        cid: metadataCid\n      }\n    } = await metadataResponse.json();\n    console.log('Metadata uploaded:', metadataCid);\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('Upload error:', {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","Error","client","token","trim","endpoint","URL","uploadToIPFS","glbUrl","originalNFT","response","fetch","ok","status","glbBlob","blob","size","type","formData","FormData","append","uploadResponse","method","headers","body","error","json","JSON","stringify","value","cid","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","tokenId","chainId","metadataBlob","Blob","metadataFormData","metadataResponse","metadataCid","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\nconsole.log('Starting NFT.Storage setup with new API format...');\n\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found');\n}\n\n// Configure client with new API format\nconst client = new NFTStorage({ \n    token: NFT_STORAGE_KEY.trim(),\n    endpoint: new URL('https://api.nft.storage')\n});\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n        \n        // First get the GLB file\n        console.log('Fetching GLB from:', glbUrl);\n        const response = await fetch(glbUrl);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch GLB: ${response.status}`);\n        }\n        const glbBlob = await response.blob();\n        console.log('GLB file fetched:', {\n            size: glbBlob.size,\n            type: glbBlob.type\n        });\n\n        // Create form data for upload\n        const formData = new FormData();\n        formData.append('file', glbBlob, 'model.glb');\n\n        // Direct API call\n        const uploadResponse = await fetch('https://api.nft.storage/upload', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY}`\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const { value: { cid } } = await uploadResponse.json();\n        console.log('File uploaded to IPFS:', cid);\n\n        // Create metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: `ipfs://${cid}`,\n            animation_url: `ipfs://${cid}`,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n\n        // Upload metadata\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { \n            type: 'application/json' \n        });\n        \n        const metadataFormData = new FormData();\n        metadataFormData.append('file', metadataBlob, 'metadata.json');\n\n        const metadataResponse = await fetch('https://api.nft.storage/upload', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${NFT_STORAGE_KEY}`\n            },\n            body: metadataFormData\n        });\n\n        if (!metadataResponse.ok) {\n            const error = await metadataResponse.json();\n            throw new Error(`Metadata upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const { value: { cid: metadataCid } } = await metadataResponse.json();\n        console.log('Metadata uploaded:', metadataCid);\n\n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('Upload error:', {\n            message: error.message,\n            name: error.name,\n            stack: error.stack\n        });\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}