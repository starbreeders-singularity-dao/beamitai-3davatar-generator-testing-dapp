{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ERR_CONN, ERR_CONN_INVALID, ERR_CONN_TIMEOUT, ERR_CONN_NOT_OPEN, ERR_CONN_CLOSE, ERR_CONN_MAX_ATTEMPTS, ERR_CONN_PENDING_REQUESTS, ERR_REQ_ALREADY_SENT } from '../error_codes.js';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nexport class ConnectionError extends BaseWeb3Error {\n  constructor(message, event) {\n    super(message);\n    this.code = ERR_CONN;\n    if (event) {\n      this.errorCode = event.code;\n      this.errorReason = event.reason;\n    }\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      errorCode: this.errorCode,\n      errorReason: this.errorReason\n    });\n  }\n}\nexport class InvalidConnectionError extends ConnectionError {\n  constructor(host, event) {\n    super(`CONNECTION ERROR: Couldn't connect to node ${host}.`, event);\n    this.host = host;\n    this.code = ERR_CONN_INVALID;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      host: this.host\n    });\n  }\n}\nexport class ConnectionTimeoutError extends ConnectionError {\n  constructor(duration) {\n    super(`CONNECTION TIMEOUT: timeout of ${duration}ms achieved`);\n    this.duration = duration;\n    this.code = ERR_CONN_TIMEOUT;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      duration: this.duration\n    });\n  }\n}\nexport class ConnectionNotOpenError extends ConnectionError {\n  constructor(event) {\n    super('Connection not open', event);\n    this.code = ERR_CONN_NOT_OPEN;\n  }\n}\nexport class ConnectionCloseError extends ConnectionError {\n  constructor(event) {\n    var _a, _b;\n    super(`CONNECTION ERROR: The connection got closed with the close code ${(_a = event === null || event === void 0 ? void 0 : event.code) !== null && _a !== void 0 ? _a : ''} and the following reason string ${(_b = event === null || event === void 0 ? void 0 : event.reason) !== null && _b !== void 0 ? _b : ''}`, event);\n    this.code = ERR_CONN_CLOSE;\n  }\n}\nexport class MaxAttemptsReachedOnReconnectingError extends ConnectionError {\n  constructor(numberOfAttempts) {\n    super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);\n    this.code = ERR_CONN_MAX_ATTEMPTS;\n  }\n}\nexport class PendingRequestsOnReconnectingError extends ConnectionError {\n  constructor() {\n    super('CONNECTION ERROR: Provider started to reconnect before the response got received!');\n    this.code = ERR_CONN_PENDING_REQUESTS;\n  }\n}\nexport class RequestAlreadySentError extends ConnectionError {\n  constructor(id) {\n    super(`Request already sent with following id: ${id}`);\n    this.code = ERR_REQ_ALREADY_SENT;\n  }\n}\n//# sourceMappingURL=connection_errors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}