{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({\n      numberOfSeconds: web3Context.transactionSendTimeout / 1000,\n      transactionHash\n    }));\n    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);\n    try {\n      // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n      return yield Promise.race([sendTransactionFunc(),\n      // this is the function that will send the transaction\n      rejectOnTimeout,\n      // this will throw an error on Transaction Send Timeout\n      rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n      ]);\n    } finally {\n      clearTimeout(timeoutId);\n      blockTimeoutResourceCleaner.clean();\n    }\n  });\n}\n//# sourceMappingURL=try_send_transaction.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}