{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Matrix3, Quaternion, Triangle, Vector3 } from 'three';\nimport { CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nconst a = new Vector3();\nconst b = new Vector3();\nconst c = new Vector3();\nconst mat = new Matrix3();\nconst triangle = new Triangle();\nconst quat = new Quaternion();\n/**\n * The Hotspot object is a reference-counted slot. If decrement() returns true,\n * it should be removed from the tree so it can be garbage-collected.\n */\nexport class Hotspot extends CSS2DObject {\n  constructor(config) {\n    super(document.createElement('div'));\n    this.normal = new Vector3(0, 1, 0);\n    this.initialized = false;\n    this.referenceCount = 1;\n    this.pivot = document.createElement('div');\n    this.slot = document.createElement('slot');\n    this.element.classList.add('annotation-wrapper');\n    this.slot.name = config.name;\n    this.element.appendChild(this.pivot);\n    this.pivot.appendChild(this.slot);\n    this.updatePosition(config.position);\n    this.updateNormal(config.normal);\n    this.surface = config.surface;\n  }\n  get facingCamera() {\n    return !this.element.classList.contains('hide');\n  }\n  /**\n   * Sets the hotspot to be in the highly visible foreground state.\n   */\n  show() {\n    if (!this.facingCamera || !this.initialized) {\n      this.updateVisibility(true);\n    }\n  }\n  /**\n   * Sets the hotspot to be in the diminished background state.\n   */\n  hide() {\n    if (this.facingCamera || !this.initialized) {\n      this.updateVisibility(false);\n    }\n  }\n  /**\n   * Call this when adding elements to the same slot to keep track.\n   */\n  increment() {\n    this.referenceCount++;\n  }\n  /**\n   * Call this when removing elements from the slot; returns true when the slot\n   * is unused.\n   */\n  decrement() {\n    if (this.referenceCount > 0) {\n      --this.referenceCount;\n    }\n    return this.referenceCount === 0;\n  }\n  /**\n   * Change the position of the hotspot to the input string, in the same format\n   * as the data-position attribute.\n   */\n  updatePosition(position) {\n    if (position == null) return;\n    const positionNodes = parseExpressions(position)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.position.setComponent(i, normalizeUnit(positionNodes[i]).number);\n    }\n    this.updateMatrixWorld();\n  }\n  /**\n   * Change the hotspot's normal to the input string, in the same format as the\n   * data-normal attribute.\n   */\n  updateNormal(normal) {\n    if (normal == null) return;\n    const normalNodes = parseExpressions(normal)[0].terms;\n    for (let i = 0; i < 3; ++i) {\n      this.normal.setComponent(i, normalNodes[i].number);\n    }\n  }\n  updateSurface() {\n    const {\n      mesh,\n      tri,\n      bary\n    } = this;\n    if (mesh == null || tri == null || bary == null) {\n      return;\n    }\n    mesh.getVertexPosition(tri.x, a);\n    mesh.getVertexPosition(tri.y, b);\n    mesh.getVertexPosition(tri.z, c);\n    a.toArray(mat.elements, 0);\n    b.toArray(mat.elements, 3);\n    c.toArray(mat.elements, 6);\n    this.position.copy(bary).applyMatrix3(mat);\n    const target = this.parent;\n    target.worldToLocal(mesh.localToWorld(this.position));\n    triangle.set(a, b, c);\n    triangle.getNormal(this.normal).transformDirection(mesh.matrixWorld);\n    const pivot = target.parent;\n    quat.setFromAxisAngle(a.set(0, 1, 0), -pivot.rotation.y);\n    this.normal.applyQuaternion(quat);\n  }\n  orient(radians) {\n    this.pivot.style.transform = `rotate(${radians}rad)`;\n  }\n  updateVisibility(show) {\n    this.element.classList.toggle('hide', !show);\n    // NOTE: ShadyDOM doesn't support slot.assignedElements, otherwise we could\n    // use that here.\n    this.slot.assignedNodes().forEach(node => {\n      if (node.nodeType !== Node.ELEMENT_NODE) {\n        return;\n      }\n      const element = node;\n      // Visibility attribute can be configured per-node in the hotspot:\n      const visibilityAttribute = element.dataset.visibilityAttribute;\n      if (visibilityAttribute != null) {\n        const attributeName = `data-${visibilityAttribute}`;\n        element.toggleAttribute(attributeName, show);\n      }\n      element.dispatchEvent(new CustomEvent('hotspot-visibility', {\n        detail: {\n          visible: show\n        }\n      }));\n    });\n    this.initialized = true;\n  }\n}\n//# sourceMappingURL=Hotspot.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}