{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { NibbleWidthError } from 'web3-errors';\nimport { isHexStrict, validator, utils as validatorUtils, bigintPower } from 'web3-validator';\nimport { numberToHex, toHex, toNumber } from './converters.js';\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\nexport const padLeft = (value, characterAmount, sign = '0') => {\n  // To avoid duplicate code and circular dependency we will\n  // use `padLeft` implementation from `web3-validator`\n  if (typeof value === 'string') {\n    if (!isHexStrict(value)) {\n      return value.padStart(characterAmount, sign);\n    }\n    return validatorUtils.padLeft(value, characterAmount, sign);\n  }\n  validator.validate(['int'], [value]);\n  return validatorUtils.padLeft(value, characterAmount, sign);\n};\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\nexport const padRight = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return value.padEnd(characterAmount, sign);\n  }\n  const hexString = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n  const prefixLength = hexString.startsWith('-') ? 3 : 2;\n  validator.validate([hexString.startsWith('-') ? 'int' : 'uint'], [value]);\n  return hexString.padEnd(characterAmount + prefixLength, sign);\n};\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\nexport const rightPad = padRight;\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\nexport const leftPad = padLeft;\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\nexport const toTwosComplement = (value, nibbleWidth = 64) => {\n  validator.validate(['int'], [value]);\n  const val = toNumber(value);\n  if (val >= 0) return padLeft(toHex(val), nibbleWidth);\n  const largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));\n  if (-val >= largestBit) {\n    throw new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n  }\n  const updatedVal = BigInt(val);\n  const complement = updatedVal + largestBit;\n  return padLeft(numberToHex(complement), nibbleWidth);\n};\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\nexport const fromTwosComplement = (value, nibbleWidth = 64) => {\n  validator.validate(['int'], [value]);\n  const val = toNumber(value);\n  if (val < 0) return val;\n  const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n  if (largestBit > nibbleWidth * 4) throw new NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`);\n  // check the largest bit to see if negative\n  if (nibbleWidth * 4 !== largestBit) return val;\n  const complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n  return toNumber(BigInt(val) - complement);\n};\n//# sourceMappingURL=string_manipulation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}