{"ast":null,"code":"export function arrayToBox(nodeIndex32, array, target) {\n  target.min.x = array[nodeIndex32];\n  target.min.y = array[nodeIndex32 + 1];\n  target.min.z = array[nodeIndex32 + 2];\n  target.max.x = array[nodeIndex32 + 3];\n  target.max.y = array[nodeIndex32 + 4];\n  target.max.z = array[nodeIndex32 + 5];\n  return target;\n}\nexport function makeEmptyBounds(target) {\n  target[0] = target[1] = target[2] = Infinity;\n  target[3] = target[4] = target[5] = -Infinity;\n}\nexport function getLongestEdgeIndex(bounds) {\n  let splitDimIdx = -1;\n  let splitDist = -Infinity;\n  for (let i = 0; i < 3; i++) {\n    const dist = bounds[i + 3] - bounds[i];\n    if (dist > splitDist) {\n      splitDist = dist;\n      splitDimIdx = i;\n    }\n  }\n  return splitDimIdx;\n}\n\n// copies bounds a into bounds b\nexport function copyBounds(source, target) {\n  target.set(source);\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds(a, b, target) {\n  let aVal, bVal;\n  for (let d = 0; d < 3; d++) {\n    const d3 = d + 3;\n\n    // set the minimum values\n    aVal = a[d];\n    bVal = b[d];\n    target[d] = aVal < bVal ? aVal : bVal;\n\n    // set the max values\n    aVal = a[d3];\n    bVal = b[d3];\n    target[d3] = aVal > bVal ? aVal : bVal;\n  }\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds(startIndex, triangleBounds, bounds) {\n  for (let d = 0; d < 3; d++) {\n    const tCenter = triangleBounds[startIndex + 2 * d];\n    const tHalf = triangleBounds[startIndex + 2 * d + 1];\n    const tMin = tCenter - tHalf;\n    const tMax = tCenter + tHalf;\n    if (tMin < bounds[d]) {\n      bounds[d] = tMin;\n    }\n    if (tMax > bounds[d + 3]) {\n      bounds[d + 3] = tMax;\n    }\n  }\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea(bounds) {\n  const d0 = bounds[3] - bounds[0];\n  const d1 = bounds[4] - bounds[1];\n  const d2 = bounds[5] - bounds[2];\n  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}