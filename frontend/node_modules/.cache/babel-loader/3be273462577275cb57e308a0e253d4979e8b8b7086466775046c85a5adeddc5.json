{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Plane, Raycaster, Vector2, Vector3, Matrix4 } from \"three\";\nimport { EventDispatcher } from \"./EventDispatcher.js\";\nclass DragControls extends EventDispatcher {\n  constructor(_objects, _camera, _domElement) {\n    super();\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"transformGroup\", false);\n    __publicField(this, \"_objects\");\n    __publicField(this, \"_camera\");\n    __publicField(this, \"_domElement\");\n    __publicField(this, \"_plane\", new Plane());\n    __publicField(this, \"_raycaster\", new Raycaster());\n    __publicField(this, \"_mouse\", new Vector2());\n    __publicField(this, \"_offset\", new Vector3());\n    __publicField(this, \"_intersection\", new Vector3());\n    __publicField(this, \"_worldPosition\", new Vector3());\n    __publicField(this, \"_inverseMatrix\", new Matrix4());\n    __publicField(this, \"_intersections\", []);\n    __publicField(this, \"_selected\", null);\n    __publicField(this, \"_hovered\", null);\n    __publicField(this, \"activate\", () => {\n      this._domElement.addEventListener(\"pointermove\", this.onPointerMove);\n      this._domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this._domElement.addEventListener(\"pointerup\", this.onPointerCancel);\n      this._domElement.addEventListener(\"pointerleave\", this.onPointerCancel);\n      this._domElement.addEventListener(\"touchmove\", this.onTouchMove);\n      this._domElement.addEventListener(\"touchstart\", this.onTouchStart);\n      this._domElement.addEventListener(\"touchend\", this.onTouchEnd);\n    });\n    __publicField(this, \"deactivate\", () => {\n      this._domElement.removeEventListener(\"pointermove\", this.onPointerMove);\n      this._domElement.removeEventListener(\"pointerdown\", this.onPointerDown);\n      this._domElement.removeEventListener(\"pointerup\", this.onPointerCancel);\n      this._domElement.removeEventListener(\"pointerleave\", this.onPointerCancel);\n      this._domElement.removeEventListener(\"touchmove\", this.onTouchMove);\n      this._domElement.removeEventListener(\"touchstart\", this.onTouchStart);\n      this._domElement.removeEventListener(\"touchend\", this.onTouchEnd);\n      this._domElement.style.cursor = \"\";\n    });\n    // TODO: confirm if this can be removed?\n    __publicField(this, \"dispose\", () => this.deactivate());\n    __publicField(this, \"getObjects\", () => this._objects);\n    __publicField(this, \"getRaycaster\", () => this._raycaster);\n    __publicField(this, \"onMouseMove\", event => {\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n        this.dispatchEvent({\n          type: \"drag\",\n          object: this._selected\n        });\n        return;\n      }\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        const object = this._intersections[0].object;\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(object.matrixWorld));\n        if (this._hovered !== object) {\n          this.dispatchEvent({\n            type: \"hoveron\",\n            object\n          });\n          this._domElement.style.cursor = \"pointer\";\n          this._hovered = object;\n        }\n      } else {\n        if (this._hovered !== null) {\n          this.dispatchEvent({\n            type: \"hoveroff\",\n            object: this._hovered\n          });\n          this._domElement.style.cursor = \"auto\";\n          this._hovered = null;\n        }\n      }\n    });\n    __publicField(this, \"onMouseDown\", () => {\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n        this._domElement.style.cursor = \"move\";\n        this.dispatchEvent({\n          type: \"dragstart\",\n          object: this._selected\n        });\n      }\n    });\n    __publicField(this, \"onMouseCancel\", () => {\n      if (this._selected) {\n        this.dispatchEvent({\n          type: \"dragend\",\n          object: this._selected\n        });\n        this._selected = null;\n      }\n      this._domElement.style.cursor = this._hovered ? \"pointer\" : \"auto\";\n    });\n    __publicField(this, \"onPointerMove\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseMove(event);\n          break;\n      }\n    });\n    __publicField(this, \"onPointerDown\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseDown();\n          break;\n      }\n    });\n    __publicField(this, \"onPointerCancel\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseCancel();\n          break;\n      }\n    });\n    __publicField(this, \"onTouchMove\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n        this.dispatchEvent({\n          type: \"drag\",\n          object: this._selected\n        });\n        return;\n      }\n    });\n    __publicField(this, \"onTouchStart\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n        this._domElement.style.cursor = \"move\";\n        this.dispatchEvent({\n          type: \"dragstart\",\n          object: this._selected\n        });\n      }\n    });\n    __publicField(this, \"onTouchEnd\", event => {\n      event.preventDefault();\n      if (this._selected) {\n        this.dispatchEvent({\n          type: \"dragend\",\n          object: this._selected\n        });\n        this._selected = null;\n      }\n      this._domElement.style.cursor = \"auto\";\n    });\n    this._objects = _objects;\n    this._camera = _camera;\n    this._domElement = _domElement;\n    this.activate();\n  }\n}\nexport { DragControls };\n//# sourceMappingURL=DragControls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}