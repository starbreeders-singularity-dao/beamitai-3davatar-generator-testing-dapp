{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Mesh, MeshBasicMaterial, OrthographicCamera, PlaneGeometry, Scene, WebGLRenderTarget } from 'three';\nimport { blobCanvas } from '../../model-viewer-base.js';\nimport { Renderer } from '../../three-components/Renderer.js';\nimport { $correlatedObjects, $onUpdate, ThreeDOMElement } from './three-dom-element.js';\nconst quadMaterial = new MeshBasicMaterial();\nconst quad = new PlaneGeometry(2, 2);\nlet adhocNum = 0;\nexport const $threeTexture = Symbol('threeTexture');\nexport const $threeTextures = Symbol('threeTextures');\nexport const $applyTexture = Symbol('applyTexture');\n/**\n * Image facade implementation for Three.js textures\n */\nexport class Image extends ThreeDOMElement {\n  get [$threeTexture]() {\n    var _a;\n    return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n  }\n  get [$threeTextures]() {\n    return this[$correlatedObjects];\n  }\n  constructor(onUpdate, texture) {\n    super(onUpdate, new Set(texture ? [texture] : []));\n    if (!this[$threeTexture].image.src) {\n      this[$threeTexture].image.src = texture.name ? texture.name : 'adhoc_image' + adhocNum++;\n    }\n    if (!this[$threeTexture].image.name) {\n      this[$threeTexture].image.name = texture && texture.image && texture.image.src ? texture.image.src.split('/').pop() : 'adhoc_image';\n    }\n  }\n  get name() {\n    return this[$threeTexture].image.name || '';\n  }\n  get uri() {\n    return this[$threeTexture].image.src;\n  }\n  get bufferView() {\n    return this[$threeTexture].image.bufferView;\n  }\n  get element() {\n    const texture = this[$threeTexture];\n    if (texture && (texture.isCanvasTexture || texture.isVideoTexture)) {\n      return texture.image;\n    }\n    return;\n  }\n  get animation() {\n    const texture = this[$threeTexture];\n    if (texture && texture.isCanvasTexture && texture.animation) {\n      return texture.animation;\n    }\n    return;\n  }\n  get type() {\n    return this.uri != null ? 'external' : 'embedded';\n  }\n  set name(name) {\n    for (const texture of this[$threeTextures]) {\n      texture.image.name = name;\n    }\n  }\n  update() {\n    const texture = this[$threeTexture];\n    // Applies to non-Lottie canvas textures only\n    if (texture && texture.isCanvasTexture && !texture.animation) {\n      this[$threeTexture].needsUpdate = true;\n      this[$onUpdate]();\n    }\n  }\n  async createThumbnail(width, height) {\n    const scene = new Scene();\n    quadMaterial.map = this[$threeTexture];\n    const mesh = new Mesh(quad, quadMaterial);\n    scene.add(mesh);\n    const camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const {\n      threeRenderer\n    } = Renderer.singleton;\n    const renderTarget = new WebGLRenderTarget(width, height);\n    threeRenderer.setRenderTarget(renderTarget);\n    threeRenderer.render(scene, camera);\n    threeRenderer.setRenderTarget(null);\n    const buffer = new Uint8Array(width * height * 4);\n    threeRenderer.readRenderTargetPixels(renderTarget, 0, 0, width, height, buffer);\n    blobCanvas.width = width;\n    blobCanvas.height = height;\n    const blobContext = blobCanvas.getContext('2d');\n    const imageData = blobContext.createImageData(width, height);\n    imageData.data.set(buffer);\n    blobContext.putImageData(imageData, 0, 0);\n    return new Promise(async (resolve, reject) => {\n      blobCanvas.toBlob(blob => {\n        if (!blob) {\n          return reject('Failed to capture thumbnail.');\n        }\n        resolve(URL.createObjectURL(blob));\n      }, 'image/png');\n    });\n  }\n}\n//# sourceMappingURL=image.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}