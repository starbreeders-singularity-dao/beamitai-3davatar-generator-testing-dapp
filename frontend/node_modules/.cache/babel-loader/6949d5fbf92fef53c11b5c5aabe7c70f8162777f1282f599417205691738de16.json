{"ast":null,"code":"import { Loader, FileLoader, NumberKeyframeTrack, AnimationClip, BufferAttribute } from \"three\";\nclass MDDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data));\n    }, onProgress, onError);\n  }\n  parse(data) {\n    const view = new DataView(data);\n    const totalFrames = view.getUint32(0);\n    const totalPoints = view.getUint32(4);\n    let offset = 8;\n    const times = new Float32Array(totalFrames);\n    const values = new Float32Array(totalFrames * totalFrames).fill(0);\n    for (let i = 0; i < totalFrames; i++) {\n      times[i] = view.getFloat32(offset);\n      offset += 4;\n      values[totalFrames * i + i] = 1;\n    }\n    const track = new NumberKeyframeTrack(\".morphTargetInfluences\", times, values);\n    const clip = new AnimationClip(\"default\", times[times.length - 1], [track]);\n    const morphTargets = [];\n    for (let i = 0; i < totalFrames; i++) {\n      const morphTarget = new Float32Array(totalPoints * 3);\n      for (let j = 0; j < totalPoints; j++) {\n        const stride = j * 3;\n        morphTarget[stride + 0] = view.getFloat32(offset);\n        offset += 4;\n        morphTarget[stride + 1] = view.getFloat32(offset);\n        offset += 4;\n        morphTarget[stride + 2] = view.getFloat32(offset);\n        offset += 4;\n      }\n      const attribute = new BufferAttribute(morphTarget, 3);\n      attribute.name = \"morph_\" + i;\n      morphTargets.push(attribute);\n    }\n    return {\n      morphTargets,\n      clip\n    };\n  }\n}\nexport { MDDLoader };\n//# sourceMappingURL=MDDLoader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}