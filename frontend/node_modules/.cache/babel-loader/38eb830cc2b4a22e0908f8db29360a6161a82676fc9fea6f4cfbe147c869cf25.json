{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\nexport const isBloom = bloom => {\n  if (typeof bloom !== 'string') {\n    return false;\n  }\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n  return false;\n};\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\nexport const isInBloom = (bloom, value) => {\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return false;\n  }\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  const uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n  const hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n  for (let i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    const bitpos =\n    // eslint-disable-next-line no-bitwise\n    (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047;\n    // test if bitpos in bloom is active\n    const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n    // eslint-disable-next-line no-bitwise\n    const offset = 1 << bitpos % 4;\n    // eslint-disable-next-line no-bitwise\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\nexport const isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  if (!isAddress(ethereumAddress)) {\n    return false;\n  }\n  // you have to pad the ethereum address to 32 bytes\n  // else the bloom filter does not work\n  // this is only if your matching the USERS\n  // ethereum address. Contract address do not need this\n  // hence why we have 2 methods\n  // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n  const address = padLeft(ethereumAddress, 64);\n  return isInBloom(bloom, address);\n};\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\nexport const isContractAddressInBloom = (bloom, contractAddress) => {\n  if (!isBloom(bloom)) {\n    return false;\n  }\n  if (!isAddress(contractAddress)) {\n    return false;\n  }\n  return isInBloom(bloom, contractAddress);\n};\n//# sourceMappingURL=bloom.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}