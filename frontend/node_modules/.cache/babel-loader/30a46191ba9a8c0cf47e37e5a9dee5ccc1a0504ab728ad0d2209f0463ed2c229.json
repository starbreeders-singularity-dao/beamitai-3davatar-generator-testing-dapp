{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Euler, Quaternion, MathUtils } from \"three\";\nimport { EventDispatcher } from \"./EventDispatcher.js\";\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(this, \"EPS\", 1e-6);\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n    __publicField(this, \"screenOrientation\", 0);\n    __publicField(this, \"alphaOffset\", 0);\n    __publicField(this, \"onDeviceOrientationChangeEvent\", event => {\n      this.deviceOrientation = event;\n    });\n    __publicField(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n    __publicField(this, \"zee\", new Vector3(0, 0, 1));\n    __publicField(this, \"euler\", new Euler());\n    __publicField(this, \"q0\", new Quaternion());\n    __publicField(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n    // - PI/2 around the x-axis\n    __publicField(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, \"YXZ\");\n      quaternion.setFromEuler(this.euler);\n      quaternion.multiply(this.q1);\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient));\n    });\n    __publicField(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent();\n      if (window.DeviceOrientationEvent !== void 0 &&\n      // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === \"function\") {\n        window.DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == \"granted\") {\n            window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n            window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(error => {\n          console.error(\"THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:\", error);\n        });\n      } else {\n        window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n        window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      }\n      this.enabled = true;\n    });\n    __publicField(this, \"disconnect\", () => {\n      window.removeEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n      window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n    __publicField(this, \"lastQuaternion\", new Quaternion());\n    __publicField(this, \"update\", () => {\n      if (this.enabled === false) return;\n      const device = this.deviceOrientation;\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0;\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0;\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0;\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0;\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n    __publicField(this, \"dispose\", () => this.disconnect());\n    this.object = object;\n    this.object.rotation.reorder(\"YXZ\");\n    this.connect();\n  }\n}\nexport { DeviceOrientationControls };\n//# sourceMappingURL=DeviceOrientationControls.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}