{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineSegmentsGeometry } from 'three-stdlib';\nconst context = /* @__PURE__ */React.createContext(null);\nconst Segments = /* @__PURE__ */React.forwardRef((props, forwardedRef) => {\n  React.useMemo(() => extend({\n    SegmentObject\n  }), []);\n  const {\n    limit = 1000,\n    lineWidth = 1.0,\n    children,\n    ...rest\n  } = props;\n  const [segments, setSegments] = React.useState([]);\n  const [line] = React.useState(() => new Line2());\n  const [material] = React.useState(() => new LineMaterial());\n  const [geometry] = React.useState(() => new LineSegmentsGeometry());\n  const [resolution] = React.useState(() => new THREE.Vector2(512, 512));\n  const [positions] = React.useState(() => Array(limit * 6).fill(0));\n  const [colors] = React.useState(() => Array(limit * 6).fill(0));\n  const api = React.useMemo(() => ({\n    subscribe: ref => {\n      setSegments(segments => [...segments, ref]);\n      return () => setSegments(segments => segments.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  useFrame(() => {\n    for (let i = 0; i < limit; i++) {\n      var _segments$i;\n      const segment = (_segments$i = segments[i]) == null ? void 0 : _segments$i.current;\n      if (segment) {\n        positions[i * 6 + 0] = segment.start.x;\n        positions[i * 6 + 1] = segment.start.y;\n        positions[i * 6 + 2] = segment.start.z;\n        positions[i * 6 + 3] = segment.end.x;\n        positions[i * 6 + 4] = segment.end.y;\n        positions[i * 6 + 5] = segment.end.z;\n        colors[i * 6 + 0] = segment.color.r;\n        colors[i * 6 + 1] = segment.color.g;\n        colors[i * 6 + 2] = segment.color.b;\n        colors[i * 6 + 3] = segment.color.r;\n        colors[i * 6 + 4] = segment.color.g;\n        colors[i * 6 + 5] = segment.color.b;\n      }\n    }\n    geometry.setColors(colors);\n    geometry.setPositions(positions);\n    line.computeLineDistances();\n  });\n  return /*#__PURE__*/React.createElement(\"primitive\", {\n    object: line,\n    ref: forwardedRef\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: geometry,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: material,\n    attach: \"material\",\n    vertexColors: true,\n    resolution: resolution,\n    linewidth: lineWidth\n  }, rest)), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nclass SegmentObject {\n  constructor() {\n    this.color = new THREE.Color('white');\n    this.start = new THREE.Vector3(0, 0, 0);\n    this.end = new THREE.Vector3(0, 0, 0);\n  }\n}\nconst normPos = pos => pos instanceof THREE.Vector3 ? pos : new THREE.Vector3(...(typeof pos === 'number' ? [pos, pos, pos] : pos));\nconst Segment = /* @__PURE__ */React.forwardRef(({\n  color,\n  start,\n  end\n}, forwardedRef) => {\n  const api = React.useContext(context);\n  if (!api) throw 'Segment must used inside Segments component.';\n  const ref = React.useRef(null);\n  React.useImperativeHandle(forwardedRef, () => ref.current, []);\n  React.useLayoutEffect(() => api.subscribe(ref), []);\n  return /*#__PURE__*/React.createElement(\"segmentObject\", {\n    ref: ref,\n    color: color,\n    start: normPos(start),\n    end: normPos(end)\n  });\n});\nexport { Segment, SegmentObject, Segments };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}