{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { style } from '../decorators.js';\nimport { $getModelIsVisible, $renderer, $scene, $tick } from '../model-viewer-base.js';\nimport { degreesToRadians } from '../styles/conversions.js';\nimport { numberNode } from '../styles/parsers.js';\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\nconst rotationRateIntrinsics = {\n  basis: [degreesToRadians(numberNode(DEFAULT_ROTATION_SPEED, 'rad'))],\n  keywords: {\n    auto: [null]\n  }\n};\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\nexport const StagingMixin = ModelViewerElement => {\n  var _a, _b, _c;\n  class StagingModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.autoRotate = false;\n      this.autoRotateDelay = AUTO_ROTATE_DELAY_DEFAULT;\n      this.rotationPerSecond = 'auto';\n      this[_a] = performance.now();\n      this[_b] = 0;\n      this[_c] = event => {\n        if (!this.autoRotate) {\n          return;\n        }\n        if (event.detail.source === 'user-interaction') {\n          this[$autoRotateStartTime] = performance.now();\n        }\n      };\n    }\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener('camera-change', this[$onCameraChange]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener('camera-change', this[$onCameraChange]);\n      this[$autoRotateStartTime] = performance.now();\n    }\n    updated(changedProperties) {\n      super.updated(changedProperties);\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n    [(_a = $autoRotateStartTime, _b = $radiansPerSecond, $syncRotationRate)](style) {\n      this[$radiansPerSecond] = style[0];\n    }\n    [$tick](time, delta) {\n      super[$tick](time, delta);\n      if (!this.autoRotate || !this[$getModelIsVisible]() || this[$renderer].isPresenting) {\n        return;\n      }\n      const rotationDelta = Math.min(delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n      if (rotationDelta > 0) {\n        this[$scene].yaw = this.turntableRotation + this[$radiansPerSecond] * rotationDelta * 0.001;\n      }\n    }\n    get turntableRotation() {\n      return this[$scene].yaw;\n    }\n    resetTurntableRotation(theta = 0) {\n      this[$scene].yaw = theta;\n    }\n  }\n  _c = $onCameraChange;\n  __decorate([property({\n    type: Boolean,\n    attribute: 'auto-rotate'\n  })], StagingModelViewerElement.prototype, \"autoRotate\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'auto-rotate-delay'\n  })], StagingModelViewerElement.prototype, \"autoRotateDelay\", void 0);\n  __decorate([style({\n    intrinsics: rotationRateIntrinsics,\n    updateHandler: $syncRotationRate\n  }), property({\n    type: String,\n    attribute: 'rotation-per-second'\n  })], StagingModelViewerElement.prototype, \"rotationPerSecond\", void 0);\n  return StagingModelViewerElement;\n};\n//# sourceMappingURL=staging.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}