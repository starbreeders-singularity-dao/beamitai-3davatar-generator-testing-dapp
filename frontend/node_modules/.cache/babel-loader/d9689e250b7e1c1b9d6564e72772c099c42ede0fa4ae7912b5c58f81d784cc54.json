{"ast":null,"code":"import { NFTStorage } from 'nft.storage';\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// More detailed logging\nconsole.log('Raw API Key:', NFT_STORAGE_KEY); // We'll remove this in production!\n\nif (!NFT_STORAGE_KEY) {\n  throw new Error('NFT Storage API key not found');\n}\nconst client = new NFTStorage({\n  token: NFT_STORAGE_KEY.trim()\n});\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Testing API key...');\n\n    // Attempt a simple operation to test the key\n    await client.check();\n    console.log('API key is valid!');\n\n    // Continue with upload...\n    console.log('Downloading GLB file...');\n    const response = await fetch(glbUrl);\n    const glbBlob = await response.blob();\n    console.log('Uploading to IPFS...');\n    const cid = await client.storeBlob(glbBlob);\n    console.log('Upload successful! CID:', cid);\n    const glbIpfsUrl = `ipfs://${cid}`;\n\n    // Create metadata\n    const metadata = {\n      name: `Beamit AI Avatar #${Date.now()}`,\n      description: \"AI-Generated 3D Avatar from Beamit\",\n      image: glbIpfsUrl,\n      animation_url: glbIpfsUrl,\n      attributes: [{\n        trait_type: \"Original NFT ID\",\n        value: originalNFT.tokenId\n      }, {\n        trait_type: \"Original Chain ID\",\n        value: originalNFT.chainId\n      }]\n    };\n\n    // Upload metadata to IPFS\n    console.log('Uploading metadata to IPFS...');\n    const metadataBlob = new Blob([JSON.stringify(metadata)], {\n      type: 'application/json'\n    });\n    const metadataCid = await client.storeBlob(metadataBlob);\n    console.log('Upload complete:', {\n      glbCid: cid,\n      metadataCid: metadataCid\n    });\n    return `ipfs://${metadataCid}`;\n  } catch (error) {\n    console.error('Detailed error:', {\n      message: error.message,\n      stack: error.stack,\n      response: error.response\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["NFTStorage","NFT_STORAGE_KEY","process","env","REACT_APP_NFT_STORAGE_KEY","console","log","Error","client","token","trim","uploadToIPFS","glbUrl","originalNFT","check","response","fetch","glbBlob","blob","cid","storeBlob","glbIpfsUrl","metadata","name","Date","now","description","image","animation_url","attributes","trait_type","value","tokenId","chainId","metadataBlob","Blob","JSON","stringify","type","metadataCid","glbCid","error","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["import { NFTStorage } from 'nft.storage';\n\nconst NFT_STORAGE_KEY = process.env.REACT_APP_NFT_STORAGE_KEY;\n\n// More detailed logging\nconsole.log('Raw API Key:', NFT_STORAGE_KEY); // We'll remove this in production!\n\nif (!NFT_STORAGE_KEY) {\n    throw new Error('NFT Storage API key not found');\n}\n\nconst client = new NFTStorage({ token: NFT_STORAGE_KEY.trim() });\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Testing API key...');\n        \n        // Attempt a simple operation to test the key\n        await client.check();\n        console.log('API key is valid!');\n        \n        // Continue with upload...\n        console.log('Downloading GLB file...');\n        const response = await fetch(glbUrl);\n        const glbBlob = await response.blob();\n        \n        console.log('Uploading to IPFS...');\n        const cid = await client.storeBlob(glbBlob);\n        console.log('Upload successful! CID:', cid);\n        \n        const glbIpfsUrl = `ipfs://${cid}`;\n        \n        // Create metadata\n        const metadata = {\n            name: `Beamit AI Avatar #${Date.now()}`,\n            description: \"AI-Generated 3D Avatar from Beamit\",\n            image: glbIpfsUrl,\n            animation_url: glbIpfsUrl,\n            attributes: [\n                {\n                    trait_type: \"Original NFT ID\",\n                    value: originalNFT.tokenId\n                },\n                {\n                    trait_type: \"Original Chain ID\",\n                    value: originalNFT.chainId\n                }\n            ]\n        };\n        \n        // Upload metadata to IPFS\n        console.log('Uploading metadata to IPFS...');\n        const metadataBlob = new Blob([JSON.stringify(metadata)], { \n            type: 'application/json' \n        });\n        const metadataCid = await client.storeBlob(metadataBlob);\n        \n        console.log('Upload complete:', {\n            glbCid: cid,\n            metadataCid: metadataCid\n        });\n        \n        return `ipfs://${metadataCid}`;\n    } catch (error) {\n        console.error('Detailed error:', {\n            message: error.message,\n            stack: error.stack,\n            response: error.response\n        });\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AAExC,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;;AAE7D;AACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,eAAe,CAAC,CAAC,CAAC;;AAE9C,IAAI,CAACA,eAAe,EAAE;EAClB,MAAM,IAAIM,KAAK,CAAC,+BAA+B,CAAC;AACpD;AAEA,MAAMC,MAAM,GAAG,IAAIR,UAAU,CAAC;EAAES,KAAK,EAAER,eAAe,CAACS,IAAI,CAAC;AAAE,CAAC,CAAC;AAEhE,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;EACvD,IAAI;IACAR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;IAEjC;IACA,MAAME,MAAM,CAACM,KAAK,CAAC,CAAC;IACpBT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;IAEhC;IACAD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACJ,MAAM,CAAC;IACpC,MAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAErCb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMa,GAAG,GAAG,MAAMX,MAAM,CAACY,SAAS,CAACH,OAAO,CAAC;IAC3CZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEa,GAAG,CAAC;IAE3C,MAAME,UAAU,GAAG,UAAUF,GAAG,EAAE;;IAElC;IACA,MAAMG,QAAQ,GAAG;MACbC,IAAI,EAAE,qBAAqBC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACvCC,WAAW,EAAE,oCAAoC;MACjDC,KAAK,EAAEN,UAAU;MACjBO,aAAa,EAAEP,UAAU;MACzBQ,UAAU,EAAE,CACR;QACIC,UAAU,EAAE,iBAAiB;QAC7BC,KAAK,EAAElB,WAAW,CAACmB;MACvB,CAAC,EACD;QACIF,UAAU,EAAE,mBAAmB;QAC/BC,KAAK,EAAElB,WAAW,CAACoB;MACvB,CAAC;IAET,CAAC;;IAED;IACA5B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAM4B,YAAY,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE;MACtDgB,IAAI,EAAE;IACV,CAAC,CAAC;IACF,MAAMC,WAAW,GAAG,MAAM/B,MAAM,CAACY,SAAS,CAACc,YAAY,CAAC;IAExD7B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;MAC5BkC,MAAM,EAAErB,GAAG;MACXoB,WAAW,EAAEA;IACjB,CAAC,CAAC;IAEF,OAAO,UAAUA,WAAW,EAAE;EAClC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZpC,OAAO,CAACoC,KAAK,CAAC,iBAAiB,EAAE;MAC7BC,OAAO,EAAED,KAAK,CAACC,OAAO;MACtBC,KAAK,EAAEF,KAAK,CAACE,KAAK;MAClB5B,QAAQ,EAAE0B,KAAK,CAAC1B;IACpB,CAAC,CAAC;IACF,MAAM0B,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}