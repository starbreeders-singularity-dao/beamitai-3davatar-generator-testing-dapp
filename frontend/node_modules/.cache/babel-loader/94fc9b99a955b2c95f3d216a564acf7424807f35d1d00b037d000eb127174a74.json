{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { parseAbiParameter } from 'abitype';\nimport { AbiError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSimplifiedStructFormat, mapStructNameAndType, mapStructToCoderFormat } from '../utils.js';\nexport const WORD_SIZE = 32;\nexport function alloc(size = 0) {\n  var _a;\n  if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.alloc) !== undefined) {\n    const buf = globalThis.Buffer.alloc(size);\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return new Uint8Array(size);\n}\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe(size = 0) {\n  var _a;\n  if (((_a = globalThis.Buffer) === null || _a === void 0 ? void 0 : _a.allocUnsafe) !== undefined) {\n    const buf = globalThis.Buffer.allocUnsafe(size);\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return new Uint8Array(size);\n}\nexport function convertExternalAbiParameter(abiParam) {\n  var _a, _b;\n  return Object.assign(Object.assign({}, abiParam), {\n    name: (_a = abiParam.name) !== null && _a !== void 0 ? _a : '',\n    components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map(c => convertExternalAbiParameter(c))\n  });\n}\nexport function isAbiParameter(param) {\n  return !isNullish(param) && typeof param === 'object' && !isNullish(param.type) && typeof param.type === 'string';\n}\nexport function toAbiParams(abi) {\n  return abi.map(input => {\n    var _a;\n    if (isAbiParameter(input)) {\n      return input;\n    }\n    if (typeof input === 'string') {\n      return convertExternalAbiParameter(parseAbiParameter(input.replace(/tuple/, '')));\n    }\n    if (isSimplifiedStructFormat(input)) {\n      const structName = Object.keys(input)[0];\n      const structInfo = mapStructNameAndType(structName);\n      structInfo.name = (_a = structInfo.name) !== null && _a !== void 0 ? _a : '';\n      return Object.assign(Object.assign({}, structInfo), {\n        components: mapStructToCoderFormat(input[structName])\n      });\n    }\n    throw new AbiError('Invalid abi');\n  });\n}\nexport function extractArrayType(param) {\n  const arrayParenthesisStart = param.type.lastIndexOf('[');\n  const arrayParamType = param.type.substring(0, arrayParenthesisStart);\n  const sizeString = param.type.substring(arrayParenthesisStart);\n  let size = -1;\n  if (sizeString !== '[]') {\n    size = Number(sizeString.slice(1, -1));\n    // eslint-disable-next-line no-restricted-globals\n    if (isNaN(size)) {\n      throw new AbiError('Invalid fixed array size', {\n        size: sizeString\n      });\n    }\n  }\n  return {\n    param: {\n      type: arrayParamType,\n      name: '',\n      components: param.components\n    },\n    size\n  };\n}\n/**\n * Param is dynamic if it's dynamic base type or if some of his children (components, array items)\n * is of dynamic type\n * @param param\n */\nexport function isDynamic(param) {\n  var _a, _b;\n  if (param.type === 'string' || param.type === 'bytes' || param.type.endsWith('[]')) return true;\n  if (param.type === 'tuple') {\n    return (_b = (_a = param.components) === null || _a === void 0 ? void 0 : _a.some(isDynamic)) !== null && _b !== void 0 ? _b : false;\n  }\n  if (param.type.endsWith(']')) {\n    return isDynamic(extractArrayType(param).param);\n  }\n  return false;\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}