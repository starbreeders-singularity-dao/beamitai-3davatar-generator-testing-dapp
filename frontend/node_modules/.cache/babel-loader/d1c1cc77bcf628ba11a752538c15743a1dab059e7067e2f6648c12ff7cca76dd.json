{"ast":null,"code":"/**\n * Pinata IPFS Upload Handler for BeamitAI\n */\n\nconst PINATA_JWT = process.env.REACT_APP_PINATA_JWT;\nconst PINATA_API = 'https://api.pinata.cloud';\n\n// Test the connection\nconst testPinataConnection = async () => {\n  try {\n    const response = await fetch(`${PINATA_API}/data/testAuthentication`, {\n      headers: {\n        'Authorization': `Bearer ${PINATA_JWT}`\n      }\n    });\n    const data = await response.json();\n    console.log('Pinata connection:', data);\n    return response.ok;\n  } catch (error) {\n    console.error('Pinata connection failed:', error);\n    return false;\n  }\n};\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n  try {\n    console.log('Starting upload process...');\n\n    // Test connection first\n    const isConnected = await testPinataConnection();\n    if (!isConnected) {\n      throw new Error('Failed to connect to Pinata');\n    }\n\n    // 1. Fetch the GLB file\n    const glbResponse = await fetch(glbUrl);\n    if (!glbResponse.ok) {\n      throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n    }\n    const glbBlob = await glbResponse.blob();\n\n    // 2. Create metadata\n    const metadata = {\n      name: `BeamitAI Avatar #${Date.now()}`,\n      description: 'AI-Generated 3D Avatar',\n      originalNFT: originalNFT\n    };\n\n    // 3. Upload GLB to Pinata\n    const formData = new FormData();\n    formData.append('file', glbBlob, 'avatar.glb');\n    formData.append('pinataMetadata', JSON.stringify({\n      name: `beamit-avatar-${Date.now()}`,\n      keyvalues: {\n        type: '3d-avatar',\n        originalNFTId: originalNFT.tokenId\n      }\n    }));\n    console.log('Uploading to Pinata...');\n    const uploadResponse = await fetch(`${PINATA_API}/pinning/pinFileToIPFS`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${PINATA_JWT}`\n      },\n      body: formData\n    });\n    if (!uploadResponse.ok) {\n      const error = await uploadResponse.json();\n      console.error('Upload failed:', error);\n      throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n    }\n    const result = await uploadResponse.json();\n    console.log('Upload successful:', result);\n\n    // Returns format: ipfs://Qm...\n    return `ipfs://${result.IpfsHash}`;\n  } catch (error) {\n    console.error('Upload process failed:', {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["PINATA_JWT","process","env","REACT_APP_PINATA_JWT","PINATA_API","testPinataConnection","response","fetch","headers","data","json","console","log","ok","error","uploadToIPFS","glbUrl","originalNFT","isConnected","Error","glbResponse","status","glbBlob","blob","metadata","name","Date","now","description","formData","FormData","append","JSON","stringify","keyvalues","type","originalNFTId","tokenId","uploadResponse","method","body","result","IpfsHash","message","stack"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/ipfsHandler.js"],"sourcesContent":["/**\n * Pinata IPFS Upload Handler for BeamitAI\n */\n\nconst PINATA_JWT = process.env.REACT_APP_PINATA_JWT;\nconst PINATA_API = 'https://api.pinata.cloud';\n\n// Test the connection\nconst testPinataConnection = async () => {\n    try {\n        const response = await fetch(`${PINATA_API}/data/testAuthentication`, {\n            headers: {\n                'Authorization': `Bearer ${PINATA_JWT}`\n            }\n        });\n        const data = await response.json();\n        console.log('Pinata connection:', data);\n        return response.ok;\n    } catch (error) {\n        console.error('Pinata connection failed:', error);\n        return false;\n    }\n};\n\nexport const uploadToIPFS = async (glbUrl, originalNFT) => {\n    try {\n        console.log('Starting upload process...');\n\n        // Test connection first\n        const isConnected = await testPinataConnection();\n        if (!isConnected) {\n            throw new Error('Failed to connect to Pinata');\n        }\n\n        // 1. Fetch the GLB file\n        const glbResponse = await fetch(glbUrl);\n        if (!glbResponse.ok) {\n            throw new Error(`Failed to fetch GLB: ${glbResponse.status}`);\n        }\n        const glbBlob = await glbResponse.blob();\n\n        // 2. Create metadata\n        const metadata = {\n            name: `BeamitAI Avatar #${Date.now()}`,\n            description: 'AI-Generated 3D Avatar',\n            originalNFT: originalNFT\n        };\n\n        // 3. Upload GLB to Pinata\n        const formData = new FormData();\n        formData.append('file', glbBlob, 'avatar.glb');\n        formData.append('pinataMetadata', JSON.stringify({\n            name: `beamit-avatar-${Date.now()}`,\n            keyvalues: {\n                type: '3d-avatar',\n                originalNFTId: originalNFT.tokenId\n            }\n        }));\n\n        console.log('Uploading to Pinata...');\n        const uploadResponse = await fetch(`${PINATA_API}/pinning/pinFileToIPFS`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${PINATA_JWT}`\n            },\n            body: formData\n        });\n\n        if (!uploadResponse.ok) {\n            const error = await uploadResponse.json();\n            console.error('Upload failed:', error);\n            throw new Error(`Upload failed: ${JSON.stringify(error)}`);\n        }\n\n        const result = await uploadResponse.json();\n        console.log('Upload successful:', result);\n\n        // Returns format: ipfs://Qm...\n        return `ipfs://${result.IpfsHash}`;\n\n    } catch (error) {\n        console.error('Upload process failed:', {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        });\n        throw error;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}