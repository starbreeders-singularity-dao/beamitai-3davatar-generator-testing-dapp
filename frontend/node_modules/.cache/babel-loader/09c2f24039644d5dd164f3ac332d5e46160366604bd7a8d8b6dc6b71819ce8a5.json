{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { ContractExecutionError, InvalidResponseError, TransactionPollingTimeoutError, TransactionRevertedWithoutReasonError, TransactionRevertInstructionError, TransactionRevertWithCustomError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\nexport class SendTxHelper {\n  constructor({\n    options,\n    web3Context,\n    promiEvent,\n    returnFormat\n  }) {\n    this.options = {\n      checkRevertBeforeSending: true\n    };\n    this.options = options;\n    this.web3Context = web3Context;\n    this.promiEvent = promiEvent;\n    this.returnFormat = returnFormat;\n  }\n  getReceiptWithEvents(data) {\n    var _a, _b;\n    const result = Object.assign({}, data !== null && data !== void 0 ? data : {});\n    if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {\n      result.events = {};\n      for (const log of result.logs) {\n        const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);\n        if (event.event) {\n          result.events[event.event] = event;\n        }\n      }\n    }\n    return result;\n  }\n  checkRevertBeforeSending(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.options.checkRevertBeforeSending !== false) {\n        let formatTx = tx;\n        if (isNullish(tx.data) && isNullish(tx.input) && isNullish(tx.gas)) {\n          // eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n          formatTx = Object.assign(Object.assign({}, tx), {\n            gas: 21000\n          });\n        }\n        const reason = yield getRevertReason(this.web3Context, formatTx, this.options.contractAbi);\n        if (reason !== undefined) {\n          throw yield getTransactionError(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);\n        }\n      }\n    });\n  }\n  emitSending(tx) {\n    if (this.promiEvent.listenerCount('sending') > 0) {\n      this.promiEvent.emit('sending', tx);\n    }\n  }\n  populateGasPrice(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      transactionFormatted,\n      transaction\n    }) {\n      var _b;\n      let result = transactionFormatted;\n      if (!this.web3Context.config.ignoreGasPricing && !((_b = this.options) === null || _b === void 0 ? void 0 : _b.ignoreGasPricing) && isNullish(transactionFormatted.gasPrice) && (isNullish(transaction.maxPriorityFeePerGas) || isNullish(transaction.maxFeePerGas))) {\n        result = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, this.web3Context, ETH_DATA_FORMAT));\n      }\n      return result;\n    });\n  }\n  signAndSend(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      wallet,\n      tx\n    }) {\n      if (wallet) {\n        const signedTransaction = yield wallet.signTransaction(tx);\n        return trySendTransaction(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n          return ethRpcMethods.sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);\n        }), signedTransaction.transactionHash);\n      }\n      return trySendTransaction(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n        return ethRpcMethods.sendTransaction(this.web3Context.requestManager, tx);\n      }));\n    });\n  }\n  emitSent(tx) {\n    if (this.promiEvent.listenerCount('sent') > 0) {\n      this.promiEvent.emit('sent', tx);\n    }\n  }\n  emitTransactionHash(hash) {\n    if (this.promiEvent.listenerCount('transactionHash') > 0) {\n      this.promiEvent.emit('transactionHash', hash);\n    }\n  }\n  emitReceipt(receipt) {\n    if (this.promiEvent.listenerCount('receipt') > 0) {\n      this.promiEvent.emit('receipt',\n      // @ts-expect-error unknown type fix\n      receipt);\n    }\n  }\n  handleError(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      error,\n      tx\n    }) {\n      var _b;\n      let _error = error;\n      if (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n        _error = yield getTransactionError(this.web3Context, tx, undefined, undefined, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi);\n      }\n      if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError || _error instanceof TransactionPollingTimeoutError) && this.promiEvent.listenerCount('error') > 0) {\n        this.promiEvent.emit('error', _error);\n      }\n      return _error;\n    });\n  }\n  emitConfirmation({\n    receipt,\n    transactionHash,\n    customTransactionReceiptSchema\n  }) {\n    if (this.promiEvent.listenerCount('confirmation') > 0) {\n      watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);\n    }\n  }\n  handleResolve(_a) {\n    return __awaiter(this, arguments, void 0, function* ({\n      receipt,\n      tx\n    }) {\n      var _b, _c, _d;\n      if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver) {\n        return (_c = this.options) === null || _c === void 0 ? void 0 : _c.transactionResolver(receipt);\n      }\n      if (receipt.status === BigInt(0)) {\n        const error = yield getTransactionError(this.web3Context, tx,\n        // @ts-expect-error unknown type fix\n        receipt, undefined, (_d = this.options) === null || _d === void 0 ? void 0 : _d.contractAbi);\n        if (this.promiEvent.listenerCount('error') > 0) {\n          this.promiEvent.emit('error', error);\n        }\n        throw error;\n      } else {\n        return receipt;\n      }\n    });\n  }\n}\n//# sourceMappingURL=send_tx_helper.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}