{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { hexToUint8Array, parseBaseType } from '../utils.js';\nimport { isHexStrict } from './string.js';\n/**\n * checks input if typeof data is valid Uint8Array input\n */\nexport const isUint8Array = data => {\n  var _a, _b;\n  return data instanceof Uint8Array || ((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array' || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'Buffer';\n};\nexport const isBytes = (value, options = {\n  abiType: 'bytes'\n}) => {\n  if (typeof value !== 'string' && !Array.isArray(value) && !isUint8Array(value)) {\n    return false;\n  }\n  // isHexStrict also accepts - prefix which can not exists in bytes\n  if (typeof value === 'string' && isHexStrict(value) && value.startsWith('-')) {\n    return false;\n  }\n  if (typeof value === 'string' && !isHexStrict(value)) {\n    return false;\n  }\n  let valueToCheck;\n  if (typeof value === 'string') {\n    if (value.length % 2 !== 0) {\n      // odd length hex\n      return false;\n    }\n    valueToCheck = hexToUint8Array(value);\n  } else if (Array.isArray(value)) {\n    if (value.some(d => d < 0 || d > 255 || !Number.isInteger(d))) {\n      return false;\n    }\n    valueToCheck = new Uint8Array(value);\n  } else {\n    valueToCheck = value;\n  }\n  if (options === null || options === void 0 ? void 0 : options.abiType) {\n    const {\n      baseTypeSize\n    } = parseBaseType(options.abiType);\n    return baseTypeSize ? valueToCheck.length === baseTypeSize : true;\n  }\n  if (options === null || options === void 0 ? void 0 : options.size) {\n    return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);\n  }\n  return true;\n};\n//# sourceMappingURL=bytes.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}