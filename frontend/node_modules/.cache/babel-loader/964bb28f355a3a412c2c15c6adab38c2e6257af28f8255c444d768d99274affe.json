{"ast":null,"code":"/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version;\n    /**\n     * @private\n     */\n    this._roots = roots;\n    /**\n     * @private\n     */\n    this._blockstore = blockstore;\n  }\n  get version() {\n    return this._version;\n  }\n  get blockstore() {\n    return this._blockstore;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  has(cid) {\n    return this._blockstore.has(cid);\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid);\n    return {\n      cid,\n      bytes\n    };\n  }\n  blocks() {\n    return this._blockstore.blocks();\n  }\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}