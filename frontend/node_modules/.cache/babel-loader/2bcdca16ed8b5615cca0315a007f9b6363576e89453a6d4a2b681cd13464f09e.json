{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n  const [modelViewerError, setModelViewerError] = useState(null);\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n  };\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: selectedNFT\n        })\n      });\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: downloadData.filename\n        })\n      });\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('GLB status response:', data);\n      if (data.status === 'ready' && data.fileName) {\n        const proxyUrl = `http://localhost:5001/proxy/glb`;\n        console.log('Using proxy URL:', proxyUrl);\n        setGlbUrl(proxyUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n      setModelViewerError(error.message);\n    }\n  };\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n  useEffect(() => {\n    if (glbUrl) {\n      console.log('Attempting to render model-viewer with URL:', glbUrl);\n      fetch(glbUrl).then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        console.log('GLB file is accessible');\n      }).catch(error => {\n        console.error('Error verifying GLB file:', error);\n        setModelViewerError(`Failed to access GLB file: ${error.message}`);\n      });\n    }\n  }, [glbUrl]);\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n  useEffect(() => {\n    console.log('3D Model State Update:', {\n      glbStatus,\n      glbUrl,\n      glbFileName,\n      uploadStatus,\n      modelViewerError\n    });\n  }, [glbStatus, glbUrl, glbFileName, uploadStatus, modelViewerError]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px',\n          marginLeft: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"wallet-button\",\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"wallet-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: polygonIcon,\n          alt: \"Polygon Icon\",\n          style: {\n            width: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Your Avatar Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), selectedNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedNFT,\n            alt: \"Selected NFT\",\n            className: \"selected-nft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"nft-button\",\n            onClick: handleGenerateFullBodyImage,\n            children: loading ? 'Generating...' : 'Create Full Body Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), showNFTGrid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Please select an image to create your avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-gallery\",\n          children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: nft.image_url,\n              alt: nft.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCreateAvatar(nft.image_url),\n              className: \"nft-button\",\n              children: \"Choose PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pink-text\",\n          children: \"Please connect your MetaMask wallet to view your NFTs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-body-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"pink-text\",\n            children: \"Your Full Body Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-body-image\",\n          children: uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"model-container\",\n            children: glbStatus === 'ready' && glbUrl ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: uploadStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"model-viewer-container\",\n                style: {\n                  position: 'relative'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    zIndex: 1,\n                    color: '#FF1493',\n                    display: modelViewerError ? 'none' : 'block'\n                  },\n                  children: \"Loading 3D Model...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 25\n                }, this), modelViewerError && /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    color: '#FF1493',\n                    textAlign: 'center',\n                    padding: '20px',\n                    background: 'rgba(0,0,0,0.8)',\n                    borderRadius: '8px'\n                  },\n                  children: [\"Error loading 3D model: \", modelViewerError]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"model-viewer\", {\n                  src: glbUrl,\n                  alt: \"3D Avatar\",\n                  \"auto-rotate\": true,\n                  \"camera-controls\": true,\n                  \"camera-orbit\": \"0deg 75deg 2.5m\",\n                  \"min-camera-orbit\": \"auto auto 1.5m\",\n                  \"max-camera-orbit\": \"auto auto 4m\",\n                  \"camera-target\": \"0m -0.2m 0m\",\n                  bounds: \"tight\",\n                  \"field-of-view\": \"30deg\",\n                  \"environment-image\": \"neutral\",\n                  \"shadow-intensity\": \"1\",\n                  exposure: \"1\",\n                  \"shadow-softness\": \"1\",\n                  \"interaction-prompt\": \"auto\",\n                  \"auto-rotate-delay\": \"0\",\n                  \"rotation-per-second\": \"30deg\",\n                  \"min-field-of-view\": \"25deg\",\n                  \"max-field-of-view\": \"45deg\",\n                  \"interpolation-decay\": \"200\",\n                  loading: \"eager\",\n                  reveal: \"auto\",\n                  style: {\n                    width: '600px',\n                    height: '600px',\n                    backgroundColor: '#e0e0e0',\n                    border: '2px solid #FF1493',\n                    transform: 'translateY(-15%)',\n                    borderRadius: '8px'\n                  },\n                  onLoad: () => {\n                    console.log('=== Model Viewer Loaded ===');\n                    console.log('Source URL:', glbUrl);\n                    const modelViewer = document.querySelector('model-viewer');\n                    console.log('Model loaded state:', modelViewer.loaded);\n                  },\n                  onError: error => {\n                    console.error('Model viewer error:', error);\n                    console.error('Failed URL:', glbUrl);\n                    console.error('Error details:', {\n                      type: error.type,\n                      detail: error.detail,\n                      message: error.message\n                    });\n                    setModelViewerError(error.detail);\n                  },\n                  onProgress: event => {\n                    const progress = event.detail.totalProgress * 100;\n                    console.log('Loading progress:', {\n                      progress: progress.toFixed(2) + '%',\n                      loaded: event.detail.loaded,\n                      total: event.detail.total\n                    });\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 23\n              }, this), glbFileName && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"glb-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"glb-filename\",\n                  children: [\"GLB File: \", glbFileName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"glb-url\",\n                  children: [\"URL: \", glbUrl]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleMintNFT,\n                className: \"nft-button mint-button\",\n                style: {\n                  marginTop: '20px'\n                },\n                children: \"Mint NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Processing your avatar... Please wait.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fullBodyImageUrl,\n              alt: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackButton,\n                className: \"nft-button\",\n                children: \"Back to NFT Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBeamIt,\n                className: \"nft-button beam-button\",\n                children: \"Beam It!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-message\",\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `nav-button ${showNFTGrid ? 'active' : ''}`,\n        onClick: () => {\n          setShowNFTGrid(true);\n          setFullBodyImageUrl(null);\n          setGlbUrl(null);\n          setUploadStatus('');\n        },\n        children: \"NFT Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `nav-button ${!showNFTGrid && fullBodyImageUrl && !glbUrl ? 'active' : ''}`,\n        onClick: () => {\n          if (fullBodyImageUrl) {\n            setShowNFTGrid(false);\n            setGlbUrl(null);\n            setUploadStatus('');\n          }\n        },\n        children: \"Full Body Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `nav-button ${!showNFTGrid && glbUrl ? 'active' : ''}`,\n        onClick: () => {\n          if (glbUrl) {\n            setShowNFTGrid(false);\n            setUploadStatus('3D Avatar Ready!');\n          }\n        },\n        children: \"3D Avatar View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), glbUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Debug: GLB URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: glbUrl,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        style: {\n          color: '#FF1493'\n        },\n        children: \"Test GLB File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hX5Kcg0G5ZuSyRjjHJNgvL8Du7I=\");\n_c = App;\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n\n.glb-filename {\n  margin-top: 10px;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.model-viewer-container {\n  position: relative;\n  width: 600px;\n  height: 600px;\n  margin: 0 auto;\n}\n\n.error-message {\n  color: #ff4444;\n  background: rgba(255, 0, 0, 0.1);\n  padding: 10px;\n  margin-top: 10px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.glb-info {\n  margin: 15px 0;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n.glb-filename {\n  font-family: monospace;\n  margin: 5px 0;\n}\n\n.glb-url {\n  font-family: monospace;\n  font-size: 0.8em;\n  word-break: break-all;\n  margin: 5px 0;\n  color: #666;\n}\n\n.navigation-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin: 20px 0;\n  padding: 10px;\n  position: fixed;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.9);\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n}\n\n.nav-button {\n  background: transparent;\n  color: white;\n  border: 2px solid #FF1493;\n  padding: 10px 20px;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: all 0.3s ease;\n  min-width: 150px;\n}\n\n.nav-button:hover {\n  background: #FF1493;\n  color: white;\n  transform: translateY(-2px);\n}\n\n.nav-button.active {\n  background: #FF1493;\n  color: white;\n}\n\n.App-content {\n  padding-bottom: 80px;\n}\n`;\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","logo","polygonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","account","setAccount","nfts","setNfts","loading","setLoading","statusMessage","setStatusMessage","fullBodyImageUrl","setFullBodyImageUrl","showNFTGrid","setShowNFTGrid","glbUrl","setGlbUrl","glbStatus","setGlbStatus","uploadStatus","setUploadStatus","showMintButton","setShowMintButton","glbFileName","setGlbFileName","modelViewerError","setModelViewerError","fetchNFTs","connectWallet","window","ethereum","accounts","request","method","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","status","data","json","handleCreateAvatar","imageUrl","handleBackButton","handleGenerateFullBodyImage","downloadResponse","body","JSON","stringify","errorText","text","downloadData","generateResponse","filename","imagePath","handleBeamIt","split","pop","fileName","checkGlbStatus","proxyUrl","message","interval","setInterval","clearInterval","then","catch","handleMintNFT","className","children","src","alt","style","maxWidth","marginLeft","_jsxFileName","lineNumber","columnNumber","position","top","right","display","alignItems","gap","onClick","width","map","nft","index","image_url","name","left","transform","zIndex","color","textAlign","padding","background","borderRadius","bounds","exposure","reveal","height","backgroundColor","border","onLoad","modelViewer","document","querySelector","loaded","onError","type","detail","onProgress","event","progress","totalProgress","toFixed","total","marginTop","href","target","rel","_c","styles","styleSheet","createElement","innerText","head","appendChild","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [glbUrl, setGlbUrl] = useState(null);\n  const [glbStatus, setGlbStatus] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [showMintButton, setShowMintButton] = useState(false);\n  const [glbFileName, setGlbFileName] = useState(null);\n  const [modelViewerError, setModelViewerError] = useState(null);\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n  };\n\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: selectedNFT\n        }),\n      });\n\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n\n      const downloadData = await downloadResponse.json();\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: downloadData.filename \n        }),\n      });\n\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setFullBodyImageUrl(data.imagePath);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n  \n    try {\n      setUploadStatus('Processing your 3D Avatar...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      \n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          fileName: filename \n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n  \n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n      \n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n\n  const checkGlbStatus = async () => {\n    try {\n      console.log('=== Checking GLB Status ===');\n      const response = await fetch('http://localhost:5001/api/glb/status');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      console.log('GLB status response:', data);\n      \n      if (data.status === 'ready' && data.fileName) {\n        const proxyUrl = `http://localhost:5001/proxy/glb`;\n        console.log('Using proxy URL:', proxyUrl);\n\n        setGlbUrl(proxyUrl);\n        setGlbFileName(data.fileName);\n        setGlbStatus('ready');\n        setUploadStatus('3D Avatar Ready!');\n      } else {\n        console.log('Still processing GLB file');\n      }\n    } catch (error) {\n      console.error('Error checking GLB status:', error);\n      setModelViewerError(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (uploadStatus === 'Processing your 3D Avatar...') {\n      const interval = setInterval(checkGlbStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [uploadStatus]);\n\n  useEffect(() => {\n    if (glbUrl) {\n      console.log('Attempting to render model-viewer with URL:', glbUrl);\n      fetch(glbUrl)\n        .then(response => {\n          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n          console.log('GLB file is accessible');\n        })\n        .catch(error => {\n          console.error('Error verifying GLB file:', error);\n          setModelViewerError(`Failed to access GLB file: ${error.message}`);\n        });\n    }\n  }, [glbUrl]);\n\n  const handleMintNFT = async () => {\n    console.log('Minting NFT...');\n    // Minting logic will go here\n  };\n\n  useEffect(() => {\n    console.log('Current state:', {\n      uploadStatus,\n      glbStatus,\n      glbUrl\n    });\n  }, [uploadStatus, glbStatus, glbUrl]);\n\n  useEffect(() => {\n    console.log('3D Model State Update:', {\n      glbStatus,\n      glbUrl,\n      glbFileName,\n      uploadStatus,\n      modelViewerError\n    });\n  }, [glbStatus, glbUrl, glbFileName, uploadStatus, modelViewerError]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px', marginLeft: '20px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20, display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <button onClick={connectWallet} className=\"wallet-button\">\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet} className=\"wallet-button\">Disconnect</button>}\n          <img src={polygonIcon} alt=\"Polygon Icon\" style={{ width: '30px' }} />\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        <div className=\"avatar-selection\">\n          <h2 className=\"pink-text\">Your Avatar Selection</h2>\n          {selectedNFT && (\n            <div>\n              <img src={selectedNFT} alt=\"Selected NFT\" className=\"selected-nft\" />\n              <button className=\"nft-button\" onClick={handleGenerateFullBodyImage}>\n                {loading ? 'Generating...' : 'Create Full Body Image'}\n              </button>\n              <p className=\"status-message\">{statusMessage}</p>\n              {loading && <div className=\"loading-dots\">...</div>}\n            </div>\n          )}\n        </div>\n        \n        {showNFTGrid ? (\n          <div className=\"nft-gallery-container\">\n            <h2 className=\"pink-text\">Please select an image to create your avatar</h2>\n            {account ? (\n              <div className=\"nft-gallery\">\n                {nfts.map((nft, index) => (\n                  <div key={index} className=\"nft-item\">\n                    <img src={nft.image_url} alt={nft.name} style={{ width: '100px' }} />\n                    <p>{nft.name}</p>\n                    <button onClick={() => handleCreateAvatar(nft.image_url)} className=\"nft-button\">Choose PFP</button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"pink-text\">Please connect your MetaMask wallet to view your NFTs.</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"full-body-container\">\n            <div className=\"full-body-header\">\n              <h2 className=\"pink-text\">Your Full Body Image</h2>\n            </div>\n            \n            <div className=\"full-body-image\">\n              {uploadStatus === 'Processing your 3D Avatar...' || uploadStatus === '3D Avatar Ready!' ? (\n                <div className=\"model-container\">\n                  {glbStatus === 'ready' && glbUrl ? (\n                    <>\n                      <p>{uploadStatus}</p>\n                      <div className=\"model-viewer-container\" style={{ position: 'relative' }}>\n                        <div style={{\n                          position: 'absolute',\n                          top: '50%',\n                          left: '50%',\n                          transform: 'translate(-50%, -50%)',\n                          zIndex: 1,\n                          color: '#FF1493',\n                          display: modelViewerError ? 'none' : 'block'\n                        }}>\n                          Loading 3D Model...\n                        </div>\n\n                        {modelViewerError && (\n                          <div style={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            color: '#FF1493',\n                            textAlign: 'center',\n                            padding: '20px',\n                            background: 'rgba(0,0,0,0.8)',\n                            borderRadius: '8px'\n                          }}>\n                            Error loading 3D model: {modelViewerError}\n                          </div>\n                        )}\n\n                        <model-viewer\n                          src={glbUrl}\n                          alt=\"3D Avatar\"\n                          auto-rotate\n                          camera-controls\n                          camera-orbit=\"0deg 75deg 2.5m\"\n                          min-camera-orbit=\"auto auto 1.5m\"\n                          max-camera-orbit=\"auto auto 4m\"\n                          camera-target=\"0m -0.2m 0m\"\n                          bounds=\"tight\"\n                          field-of-view=\"30deg\"\n                          environment-image=\"neutral\"\n                          shadow-intensity=\"1\"\n                          exposure=\"1\"\n                          shadow-softness=\"1\"\n                          interaction-prompt=\"auto\"\n                          auto-rotate-delay=\"0\"\n                          rotation-per-second=\"30deg\"\n                          min-field-of-view=\"25deg\"\n                          max-field-of-view=\"45deg\"\n                          interpolation-decay=\"200\"\n                          loading=\"eager\"\n                          reveal=\"auto\"\n                          style={{\n                            width: '600px', \n                            height: '600px', \n                            backgroundColor: '#e0e0e0',\n                            border: '2px solid #FF1493',\n                            transform: 'translateY(-15%)',\n                            borderRadius: '8px'\n                          }}\n                          onLoad={() => {\n                            console.log('=== Model Viewer Loaded ===');\n                            console.log('Source URL:', glbUrl);\n                            const modelViewer = document.querySelector('model-viewer');\n                            console.log('Model loaded state:', modelViewer.loaded);\n                          }}\n                          onError={(error) => {\n                            console.error('Model viewer error:', error);\n                            console.error('Failed URL:', glbUrl);\n                            console.error('Error details:', {\n                              type: error.type,\n                              detail: error.detail,\n                              message: error.message\n                            });\n                            setModelViewerError(error.detail);\n                          }}\n                          onProgress={(event) => {\n                            const progress = event.detail.totalProgress * 100;\n                            console.log('Loading progress:', {\n                              progress: progress.toFixed(2) + '%',\n                              loaded: event.detail.loaded,\n                              total: event.detail.total\n                            });\n                          }}\n                        ></model-viewer>\n                      </div>\n                      {glbFileName && (\n                        <div className=\"glb-info\">\n                          <p className=\"glb-filename\">GLB File: {glbFileName}</p>\n                          <p className=\"glb-url\">URL: {glbUrl}</p>\n                        </div>\n                      )}\n                      <button \n                        onClick={handleMintNFT} \n                        className=\"nft-button mint-button\"\n                        style={{ marginTop: '20px' }}\n                      >\n                        Mint NFT\n                      </button>\n                    </>\n                  ) : (\n                    <p>Processing your avatar... Please wait.</p>\n                  )}\n                </div>\n              ) : (\n                <>\n                  <h2>Full Body</h2>\n                  <img src={fullBodyImageUrl} alt=\"Full Body\" />\n                  <div className=\"button-group\">\n                    <button onClick={handleBackButton} className=\"nft-button\">Back to NFT Selection</button>\n                    <button onClick={handleBeamIt} className=\"nft-button beam-button\">Beam It!</button>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            {uploadStatus && <p className=\"status-message\">{uploadStatus}</p>}\n          </div>\n        )}\n      </div>\n\n      <div className=\"navigation-buttons\">\n        <button \n          className={`nav-button ${showNFTGrid ? 'active' : ''}`}\n          onClick={() => {\n            setShowNFTGrid(true);\n            setFullBodyImageUrl(null);\n            setGlbUrl(null);\n            setUploadStatus('');\n          }}\n        >\n          NFT Selection\n        </button>\n        <button \n          className={`nav-button ${(!showNFTGrid && fullBodyImageUrl && !glbUrl) ? 'active' : ''}`}\n          onClick={() => {\n            if (fullBodyImageUrl) {\n              setShowNFTGrid(false);\n              setGlbUrl(null);\n              setUploadStatus('');\n            }\n          }}\n        >\n          Full Body Image\n        </button>\n        <button \n          className={`nav-button ${(!showNFTGrid && glbUrl) ? 'active' : ''}`}\n          onClick={() => {\n            if (glbUrl) {\n              setShowNFTGrid(false);\n              setUploadStatus('3D Avatar Ready!');\n            }\n          }}\n        >\n          3D Avatar View\n        </button>\n      </div>\n\n      {glbUrl && (\n        <div style={{ marginTop: '20px', textAlign: 'center' }}>\n          <p>Debug: GLB URL</p>\n          <a \n            href={glbUrl} \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            style={{ color: '#FF1493' }}\n          >\n            Test GLB File\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst styles = `\n.mint-button {\n  background: linear-gradient(45deg, #FF1493, #FF69B4);\n  color: white;\n  font-weight: bold;\n  padding: 12px 24px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.mint-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(255, 20, 147, 0.3);\n}\n\n.glb-filename {\n  margin-top: 10px;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.model-viewer-container {\n  position: relative;\n  width: 600px;\n  height: 600px;\n  margin: 0 auto;\n}\n\n.error-message {\n  color: #ff4444;\n  background: rgba(255, 0, 0, 0.1);\n  padding: 10px;\n  margin-top: 10px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n\n.glb-info {\n  margin: 15px 0;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n\n.glb-filename {\n  font-family: monospace;\n  margin: 5px 0;\n}\n\n.glb-url {\n  font-family: monospace;\n  font-size: 0.8em;\n  word-break: break-all;\n  margin: 5px 0;\n  color: #666;\n}\n\n.navigation-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin: 20px 0;\n  padding: 10px;\n  position: fixed;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.9);\n  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n}\n\n.nav-button {\n  background: transparent;\n  color: white;\n  border: 2px solid #FF1493;\n  padding: 10px 20px;\n  border-radius: 25px;\n  cursor: pointer;\n  font-weight: bold;\n  transition: all 0.3s ease;\n  min-width: 150px;\n}\n\n.nav-button:hover {\n  background: #FF1493;\n  color: white;\n  transform: translateY(-2px);\n}\n\n.nav-button.active {\n  background: #FF1493;\n  color: white;\n}\n\n.App-content {\n  padding-bottom: 80px;\n}\n`;\n\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}