{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\",\n  _s = $RefreshSig$();\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  _s();\n  const [status, setStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const mintNFT = async () => {\n    setIsLoading(true);\n    try {\n      if (!window.ethereum) {\n        throw new Error('Please install MetaMask');\n      }\n\n      // Check network\n      setStatus('Checking network...');\n      const chainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n      if (chainId !== '0x13882') {\n        setStatus('Switching to Polygon Amoy...');\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13882'\n          }]\n        });\n      }\n\n      // Get account\n      setStatus('Connecting wallet...');\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const userAddress = accounts[0];\n\n      // Upload to IPFS\n      setStatus('Uploading to IPFS...');\n      const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n      setStatus('IPFS Upload successful! âœ…');\n\n      // Setup provider and contract\n      setStatus('Preparing transaction...');\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      const nonce = await provider.getTransactionCount(userAddress);\n      const tokenId = ethers.solidityPacked([\"address\", \"uint256\"], [userAddress, nonce]);\n\n      // Estimate gas\n      setStatus('Estimating gas...');\n      const gasEstimate = await contract.mint.estimateGas(userAddress, tokenURI, tokenId, \"0x00\");\n\n      // Send transaction\n      setStatus('Minting NFT...');\n      const tx = await contract.mint(userAddress, tokenURI, tokenId, \"0x00\", {\n        gasLimit: Math.floor(Number(gasEstimate) * 1.2)\n      });\n      setStatus('Transaction sent! Waiting for confirmation...');\n      const receipt = await tx.wait();\n      setStatus('NFT Minted Successfully! ðŸŽ‰');\n      console.log('Transaction details:', {\n        hash: tx.hash,\n        from: receipt.from,\n        to: receipt.to,\n        blockNumber: receipt.blockNumber\n      });\n      return receipt;\n    } catch (error) {\n      console.error('Minting error:', error);\n      setStatus(`Error: ${error.message}`);\n      throw error;\n    } finally {\n      setTimeout(() => {\n        setIsLoading(false);\n        setStatus('');\n      }, 5000); // Clear status after 5 seconds\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNFT,\n      disabled: isLoading,\n      style: {\n        padding: '10px 20px',\n        backgroundColor: isLoading ? '#cccccc' : '#FF1493',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: isLoading ? 'not-allowed' : 'pointer',\n        minWidth: '150px'\n      },\n      children: isLoading ? 'Processing...' : 'Mint NFT'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px',\n        padding: '10px',\n        borderRadius: '5px',\n        backgroundColor: status.includes('Error') ? '#ffe6e6' : '#e6ffe6',\n        color: status.includes('Error') ? '#cc0000' : '#006600',\n        maxWidth: '300px',\n        textAlign: 'center'\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTMinter, \"Uxbod1XfHW64RUgXcd5ZnvwHjWo=\");\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["ethers","useState","CONTRACT_ADDRESS","CONTRACT_ABI","uploadToIPFS","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","_s","status","setStatus","isLoading","setIsLoading","mintNFT","window","ethereum","Error","chainId","request","method","params","accounts","userAddress","tokenURI","provider","BrowserProvider","signer","getSigner","contract","Contract","nonce","getTransactionCount","tokenId","solidityPacked","gasEstimate","mint","estimateGas","tx","gasLimit","Math","floor","Number","receipt","wait","console","log","hash","from","to","blockNumber","error","message","setTimeout","style","display","flexDirection","alignItems","gap","children","onClick","disabled","padding","backgroundColor","color","border","borderRadius","cursor","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","includes","maxWidth","textAlign","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { useState } from 'react';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { uploadToIPFS } from '../utils/ipfsHandler';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const [status, setStatus] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    const mintNFT = async () => {\n        setIsLoading(true);\n        try {\n            if (!window.ethereum) {\n                throw new Error('Please install MetaMask');\n            }\n\n            // Check network\n            setStatus('Checking network...');\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n            if (chainId !== '0x13882') {\n                setStatus('Switching to Polygon Amoy...');\n                await window.ethereum.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: '0x13882' }],\n                });\n            }\n\n            // Get account\n            setStatus('Connecting wallet...');\n            const accounts = await window.ethereum.request({ \n                method: 'eth_requestAccounts' \n            });\n            const userAddress = accounts[0];\n\n            // Upload to IPFS\n            setStatus('Uploading to IPFS...');\n            const tokenURI = await uploadToIPFS(glbUrl, originalNFT);\n            setStatus('IPFS Upload successful! âœ…');\n\n            // Setup provider and contract\n            setStatus('Preparing transaction...');\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const contract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n\n            const nonce = await provider.getTransactionCount(userAddress);\n            const tokenId = ethers.solidityPacked(\n                [\"address\", \"uint256\"],\n                [userAddress, nonce]\n            );\n\n            // Estimate gas\n            setStatus('Estimating gas...');\n            const gasEstimate = await contract.mint.estimateGas(\n                userAddress,\n                tokenURI,\n                tokenId,\n                \"0x00\"\n            );\n\n            // Send transaction\n            setStatus('Minting NFT...');\n            const tx = await contract.mint(\n                userAddress,\n                tokenURI,\n                tokenId,\n                \"0x00\",\n                {\n                    gasLimit: Math.floor(Number(gasEstimate) * 1.2)\n                }\n            );\n\n            setStatus('Transaction sent! Waiting for confirmation...');\n            const receipt = await tx.wait();\n            setStatus('NFT Minted Successfully! ðŸŽ‰');\n\n            console.log('Transaction details:', {\n                hash: tx.hash,\n                from: receipt.from,\n                to: receipt.to,\n                blockNumber: receipt.blockNumber\n            });\n\n            return receipt;\n\n        } catch (error) {\n            console.error('Minting error:', error);\n            setStatus(`Error: ${error.message}`);\n            throw error;\n        } finally {\n            setTimeout(() => {\n                setIsLoading(false);\n                setStatus('');\n            }, 5000); // Clear status after 5 seconds\n        }\n    };\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '10px' }}>\n            <button \n                onClick={mintNFT}\n                disabled={isLoading}\n                style={{\n                    padding: '10px 20px',\n                    backgroundColor: isLoading ? '#cccccc' : '#FF1493',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '5px',\n                    cursor: isLoading ? 'not-allowed' : 'pointer',\n                    minWidth: '150px'\n                }}\n            >\n                {isLoading ? 'Processing...' : 'Mint NFT'}\n            </button>\n            \n            {status && (\n                <div \n                    style={{\n                        marginTop: '10px',\n                        padding: '10px',\n                        borderRadius: '5px',\n                        backgroundColor: status.includes('Error') ? '#ffe6e6' : '#e6ffe6',\n                        color: status.includes('Error') ? '#cc0000' : '#006600',\n                        maxWidth: '300px',\n                        textAlign: 'center'\n                    }}\n                >\n                    {status}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}