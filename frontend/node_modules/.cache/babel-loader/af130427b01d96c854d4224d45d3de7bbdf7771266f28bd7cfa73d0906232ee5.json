{"ast":null,"code":"import * as React from 'react';\nimport { forwardRef, useEffect, useImperativeHandle, useContext, createContext } from 'react';\nimport { suspend, clear } from 'suspend-react';\n\n/* eslint react-hooks/exhaustive-deps: 1 */\nconst FaceLandmarkerContext = /* @__PURE__ */createContext({});\nconst FaceLandmarkerDefaults = {\n  basePath: 'https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.17/wasm',\n  options: {\n    baseOptions: {\n      modelAssetPath: 'https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task',\n      delegate: 'GPU'\n    },\n    runningMode: 'VIDEO',\n    outputFaceBlendshapes: true,\n    outputFacialTransformationMatrixes: true\n  }\n};\nconst FaceLandmarker = /*#__PURE__*/forwardRef(({\n  basePath = FaceLandmarkerDefaults.basePath,\n  options = FaceLandmarkerDefaults.options,\n  children\n}, fref) => {\n  const opts = JSON.stringify(options);\n  const faceLandmarker = suspend(async () => {\n    const {\n      FilesetResolver,\n      FaceLandmarker\n    } = await import('@mediapipe/tasks-vision');\n    const vision = await FilesetResolver.forVisionTasks(basePath);\n    return FaceLandmarker.createFromOptions(vision, options);\n  }, [basePath, opts]);\n  useEffect(() => {\n    return () => {\n      faceLandmarker == null || faceLandmarker.close();\n      clear([basePath, opts]);\n    };\n  }, [faceLandmarker, basePath, opts]);\n  useImperativeHandle(fref, () => faceLandmarker, [faceLandmarker]); // expose faceLandmarker through ref\n\n  return /*#__PURE__*/React.createElement(FaceLandmarkerContext.Provider, {\n    value: faceLandmarker\n  }, children);\n});\nfunction useFaceLandmarker() {\n  return useContext(FaceLandmarkerContext);\n}\nexport { FaceLandmarker, FaceLandmarkerDefaults, useFaceLandmarker };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}