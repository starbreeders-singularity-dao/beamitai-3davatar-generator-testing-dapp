{"ast":null,"code":"import { bytesToHex } from 'web3-utils';\nimport { setLengthLeft, toUint8Array } from '../common/utils.js';\nimport { isAccessList } from './types.js';\nexport const checkMaxInitCodeSize = (common, length) => {\n  const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n  if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n    throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n  }\n};\nexport const getAccessListData = accessList => {\n  let AccessListJSON;\n  let uint8arrayAccessList;\n  if (isAccessList(accessList)) {\n    AccessListJSON = accessList;\n    const newAccessList = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < accessList.length; i += 1) {\n      const item = accessList[i];\n      const addressBytes = toUint8Array(item.address);\n      const storageItems = [];\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let index = 0; index < item.storageKeys.length; index += 1) {\n        storageItems.push(toUint8Array(item.storageKeys[index]));\n      }\n      newAccessList.push([addressBytes, storageItems]);\n    }\n    uint8arrayAccessList = newAccessList;\n  } else {\n    uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n    // build the JSON\n    const json = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < uint8arrayAccessList.length; i += 1) {\n      const data = uint8arrayAccessList[i];\n      const address = bytesToHex(data[0]);\n      const storageKeys = [];\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let item = 0; item < data[1].length; item += 1) {\n        storageKeys.push(bytesToHex(data[1][item]));\n      }\n      const jsonItem = {\n        address,\n        storageKeys\n      };\n      json.push(jsonItem);\n    }\n    AccessListJSON = json;\n  }\n  return {\n    AccessListJSON,\n    accessList: uint8arrayAccessList\n  };\n};\nexport const verifyAccessList = accessList => {\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let key = 0; key < accessList.length; key += 1) {\n    const accessListItem = accessList[key];\n    const address = accessListItem[0];\n    const storageSlots = accessListItem[1];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n    if (accessListItem[2] !== undefined) {\n      throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n    }\n    if (address.length !== 20) {\n      throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {\n      if (storageSlots[storageSlot].length !== 32) {\n        throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n      }\n    }\n  }\n};\nexport const getAccessListJSON = accessList => {\n  const accessListJSON = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let index = 0; index < accessList.length; index += 1) {\n    const item = accessList[index];\n    const JSONItem = {\n      address: bytesToHex(setLengthLeft(item[0], 20)),\n      storageKeys: []\n    };\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    const storageSlots = item && item[1];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let slot = 0; slot < storageSlots.length; slot += 1) {\n      const storageSlot = storageSlots[slot];\n      JSONItem.storageKeys.push(bytesToHex(setLengthLeft(storageSlot, 32)));\n    }\n    accessListJSON.push(JSONItem);\n  }\n  return accessListJSON;\n};\nexport const getDataFeeEIP2930 = (accessList, common) => {\n  const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n  const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n  let slots = 0;\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let index = 0; index < accessList.length; index += 1) {\n    const item = accessList[index];\n    const storageSlots = item[1];\n    slots += storageSlots.length;\n  }\n  const addresses = accessList.length;\n  return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n};\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}