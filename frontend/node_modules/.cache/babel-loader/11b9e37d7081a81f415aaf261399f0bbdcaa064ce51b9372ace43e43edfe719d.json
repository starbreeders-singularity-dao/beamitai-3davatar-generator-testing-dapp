{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\nfunction App() {\n  _s();\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [videoUrl, setVideoUrl] = useState(null);\n  const [videoStatus, setVideoStatus] = useState('processing');\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n  const fetchNFTs = async walletAddress => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n  const handleCreateAvatar = async imageUrl => {\n    setSelectedNFT(imageUrl);\n  };\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: selectedNFT\n        })\n      });\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n      const downloadData = await downloadResponse.json();\n      const savedImageName = downloadData.filename;\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageUrl: savedImageName\n        })\n      });\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setFullBodyImageUrl(data.imagePath);\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n  const checkVideoStatus = async fileName => {\n    try {\n      const response = await fetch(`http://localhost:5001/check-video-status?fileName=${fileName}`);\n      const data = await response.json();\n      if (data.status === 'complete') {\n        setVideoUrl(data.videoUrl);\n        setVideoStatus('complete');\n        setUploadStatus('3D Avatar is ready!');\n      } else {\n        setTimeout(() => checkVideoStatus(fileName), 10000);\n      }\n    } catch (error) {\n      console.error('Error checking video status:', error);\n    }\n  };\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n    try {\n      setUploadStatus('Uploading...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: filename\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n      checkVideoStatus(filename);\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n  const VideoDisplay = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pink-text\",\n      children: \"Your 3D Avatar is ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      className: \"avatar-video\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: videoUrl,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log('Mint NFT clicked'),\n      className: \"nft-button mint-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Beamit AI Logo\",\n        style: {\n          maxWidth: '250px',\n          marginLeft: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connectWallet,\n          className: \"wallet-button\",\n          children: account ? 'Wallet Connected' : 'Connect Wallet'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), account && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: disconnectWallet,\n          className: \"wallet-button\",\n          children: \"Disconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: polygonIcon,\n          alt: \"Polygon Icon\",\n          style: {\n            width: '30px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Your Avatar Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), selectedNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedNFT,\n            alt: \"Selected NFT\",\n            className: \"selected-nft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"nft-button\",\n            onClick: handleGenerateFullBodyImage,\n            children: loading ? 'Generating...' : 'Create Full Body Image'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-dots\",\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), showNFTGrid ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"pink-text\",\n          children: \"Please select an image to create your avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nft-gallery\",\n          children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: nft.image_url,\n              alt: nft.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCreateAvatar(nft.image_url),\n              className: \"nft-button\",\n              children: \"Choose PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pink-text\",\n          children: \"Please connect your MetaMask wallet to view your NFTs.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-body-container\",\n        children: videoUrl ? /*#__PURE__*/_jsxDEV(VideoDisplay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-body-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"pink-text\",\n              children: \"Your Full Body Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"full-body-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: fullBodyImageUrl,\n              alt: \"Full Body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBackButton,\n              className: \"nft-button\",\n              children: \"Back to NFT Selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleBeamIt,\n              className: \"nft-button beam-button\",\n              children: \"Beam It!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"status-message\",\n            children: uploadStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YYjKTrvc73WSFQH4Yb71ysf+YZ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","AvatarSelection","logo","polygonIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","console","log","process","env","REACT_APP_API_URL","App","_s","selectedNFT","setSelectedNFT","account","setAccount","nfts","setNfts","loading","setLoading","statusMessage","setStatusMessage","fullBodyImageUrl","setFullBodyImageUrl","showNFTGrid","setShowNFTGrid","uploadStatus","setUploadStatus","videoUrl","setVideoUrl","videoStatus","setVideoStatus","fetchNFTs","connectWallet","window","ethereum","accounts","request","method","error","alert","disconnectWallet","walletAddress","apiKey","REACT_APP_OPENSEA_API_KEY","chain","response","fetch","headers","ok","Error","status","data","json","handleCreateAvatar","imageUrl","handleBackButton","handleGenerateFullBodyImage","downloadResponse","body","JSON","stringify","errorText","text","downloadData","savedImageName","filename","generateResponse","imagePath","checkVideoStatus","fileName","setTimeout","handleBeamIt","split","pop","VideoDisplay","className","children","_jsxFileName","lineNumber","columnNumber","controls","src","type","onClick","alt","style","maxWidth","marginLeft","position","top","right","display","alignItems","gap","width","map","nft","index","image_url","name","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport AvatarSelection from './components/AvatarSelection';\nimport './App.css';\nimport logo from './images/beamit-ai-logo.png';\nimport polygonIcon from './images/polygon.png';\n\nconsole.log('Backend URL:', process.env.REACT_APP_API_URL);\n\nfunction App() {\n  const [selectedNFT, setSelectedNFT] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [fullBodyImageUrl, setFullBodyImageUrl] = useState(null);\n  const [showNFTGrid, setShowNFTGrid] = useState(true);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [videoUrl, setVideoUrl] = useState(null);\n  const [videoStatus, setVideoStatus] = useState('processing');\n\n  useEffect(() => {\n    if (account) {\n      fetchNFTs(account);\n    }\n  }, [account]);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      } catch (error) {\n        console.error(\"Error connecting to MetaMask\", error);\n      }\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setAccount(null);\n    setNfts([]);\n  };\n\n  const fetchNFTs = async (walletAddress) => {\n    try {\n      const apiKey = process.env.REACT_APP_OPENSEA_API_KEY;\n      const chain = 'matic';\n      const response = await fetch(`https://api.opensea.io/api/v2/chain/${chain}/account/${walletAddress}/nfts`, {\n        headers: {\n          'X-API-KEY': apiKey,\n          'accept': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setNfts(data.nfts || []);\n    } catch (error) {\n      console.error(\"Error fetching NFTs\", error);\n    }\n  };\n\n  const handleCreateAvatar = async (imageUrl) => {\n    setSelectedNFT(imageUrl);\n  };\n\n  const handleBackButton = () => {\n    setShowNFTGrid(true);\n    setFullBodyImageUrl(null);\n  };\n\n  const handleGenerateFullBodyImage = async () => {\n    if (!selectedNFT) {\n      alert('Please select an image first.');\n      return;\n    }\n    try {\n      setLoading(true);\n      setStatusMessage('Downloading PFP...');\n\n      const downloadResponse = await fetch('http://localhost:5001/save-image', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: selectedNFT\n        }),\n      });\n\n      if (!downloadResponse.ok) {\n        const errorText = await downloadResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to download image');\n      }\n\n      const downloadData = await downloadResponse.json();\n      const savedImageName = downloadData.filename;\n\n      console.log('Image download success');\n      setStatusMessage('Image Download Success');\n\n      setStatusMessage('Generating Full Body Image...');\n      const generateResponse = await fetch('http://localhost:5001/generate-images', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          imageUrl: savedImageName \n        }),\n      });\n\n      if (!generateResponse.ok) {\n        const errorText = await generateResponse.text();\n        console.error('Error response:', errorText);\n        throw new Error('Failed to generate full body image');\n      }\n\n      const data = await generateResponse.json();\n      console.log('Full body image generated:', data);\n      setStatusMessage('Full Body Image Generated Successfully');\n      setFullBodyImageUrl(data.imagePath);\n      setShowNFTGrid(false);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error generating full body image:', error);\n      setStatusMessage('Failed to generate full body image');\n      setLoading(false);\n    }\n  };\n\n  const checkVideoStatus = async (fileName) => {\n    try {\n      const response = await fetch(`http://localhost:5001/check-video-status?fileName=${fileName}`);\n      const data = await response.json();\n      \n      if (data.status === 'complete') {\n        setVideoUrl(data.videoUrl);\n        setVideoStatus('complete');\n        setUploadStatus('3D Avatar is ready!');\n      } else {\n        setTimeout(() => checkVideoStatus(fileName), 10000);\n      }\n    } catch (error) {\n      console.error('Error checking video status:', error);\n    }\n  };\n\n  const handleBeamIt = async () => {\n    if (!fullBodyImageUrl) return;\n\n    try {\n      setUploadStatus('Uploading...');\n      const filename = fullBodyImageUrl.split('/').pop();\n      \n      const response = await fetch('http://localhost:5001/upload-to-cloud', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          fileName: filename \n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      console.log('Upload success:', data);\n      setUploadStatus('Processing your 3D Avatar...');\n      \n      checkVideoStatus(filename);\n    } catch (error) {\n      console.error('Error uploading to cloud:', error);\n      setUploadStatus('Failed to beam to cloud');\n    }\n  };\n\n  const VideoDisplay = () => (\n    <div className=\"video-container\">\n      <h2 className=\"pink-text\">Your 3D Avatar is ready</h2>\n      <video controls className=\"avatar-video\">\n        <source src={videoUrl} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n      <button onClick={() => console.log('Mint NFT clicked')} className=\"nft-button mint-button\">\n        Mint NFT\n      </button>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} alt=\"Beamit AI Logo\" style={{ maxWidth: '250px', marginLeft: '20px' }} />\n        <div style={{ position: 'absolute', top: 20, right: 20, display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <button onClick={connectWallet} className=\"wallet-button\">\n            {account ? 'Wallet Connected' : 'Connect Wallet'}\n          </button>\n          {account && <button onClick={disconnectWallet} className=\"wallet-button\">Disconnect</button>}\n          <img src={polygonIcon} alt=\"Polygon Icon\" style={{ width: '30px' }} />\n        </div>\n      </header>\n\n      <div className=\"App-content\">\n        <div className=\"avatar-selection\">\n          <h2 className=\"pink-text\">Your Avatar Selection</h2>\n          {selectedNFT && (\n            <div>\n              <img src={selectedNFT} alt=\"Selected NFT\" className=\"selected-nft\" />\n              <button className=\"nft-button\" onClick={handleGenerateFullBodyImage}>\n                {loading ? 'Generating...' : 'Create Full Body Image'}\n              </button>\n              <p className=\"status-message\">{statusMessage}</p>\n              {loading && <div className=\"loading-dots\">...</div>}\n            </div>\n          )}\n        </div>\n        \n        {showNFTGrid ? (\n          <div className=\"nft-gallery-container\">\n            <h2 className=\"pink-text\">Please select an image to create your avatar</h2>\n            {account ? (\n              <div className=\"nft-gallery\">\n                {nfts.map((nft, index) => (\n                  <div key={index} className=\"nft-item\">\n                    <img src={nft.image_url} alt={nft.name} style={{ width: '100px' }} />\n                    <p>{nft.name}</p>\n                    <button onClick={() => handleCreateAvatar(nft.image_url)} className=\"nft-button\">Choose PFP</button>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"pink-text\">Please connect your MetaMask wallet to view your NFTs.</p>\n            )}\n          </div>\n        ) : (\n          <div className=\"full-body-container\">\n            {videoUrl ? (\n              <VideoDisplay />\n            ) : (\n              <>\n                <div className=\"full-body-header\">\n                  <h2 className=\"pink-text\">Your Full Body Image</h2>\n                </div>\n                <div className=\"full-body-image\">\n                  <img src={fullBodyImageUrl} alt=\"Full Body\" />\n                </div>\n                <div className=\"button-group\">\n                  <button onClick={handleBackButton} className=\"nft-button\">Back to NFT Selection</button>\n                  <button onClick={handleBeamIt} className=\"nft-button beam-button\">Beam It!</button>\n                </div>\n                {uploadStatus && <p className=\"status-message\">{uploadStatus}</p>}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}