{"ast":null,"code":"const ParallaxShader = {\n  // Ordered from fastest to best quality.\n  modes: {\n    none: \"NO_PARALLAX\",\n    basic: \"USE_BASIC_PARALLAX\",\n    steep: \"USE_STEEP_PARALLAX\",\n    occlusion: \"USE_OCLUSION_PARALLAX\",\n    // a.k.a. POM\n    relief: \"USE_RELIEF_PARALLAX\"\n  },\n  uniforms: {\n    bumpMap: {\n      value: null\n    },\n    map: {\n      value: null\n    },\n    parallaxScale: {\n      value: null\n    },\n    parallaxMinLayers: {\n      value: null\n    },\n    parallaxMaxLayers: {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tvUv = uv;\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvViewPosition = -mvPosition.xyz;\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D bumpMap;\", \"uniform sampler2D map;\", \"uniform float parallaxScale;\", \"uniform float parallaxMinLayers;\", \"uniform float parallaxMaxLayers;\", \"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"#ifdef USE_BASIC_PARALLAX\", \"\tvec2 parallaxMap( in vec3 V ) {\", \"\t\tfloat initialHeight = texture2D( bumpMap, vUv ).r;\",\n  // No Offset Limitting: messy, floating output at grazing angles.\n  //\"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;\",\n  // Offset Limiting\n  \"\t\tvec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\", \"\t\treturn vUv - texCoordOffset;\", \"\t}\", \"#else\", \"\tvec2 parallaxMap( in vec3 V ) {\",\n  // Determine number of layers from angle between V and N\n  \"\t\tfloat numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\", \"\t\tfloat layerHeight = 1.0 / numLayers;\", \"\t\tfloat currentLayerHeight = 0.0;\",\n  // Shift of texture coordinates for each iteration\n  \"\t\tvec2 dtex = parallaxScale * V.xy / V.z / numLayers;\", \"\t\tvec2 currentTextureCoords = vUv;\", \"\t\tfloat heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n  // while ( heightFromTexture > currentLayerHeight )\n  // Infinite loops are not well supported. Do a \"large\" finite\n  // loop, but not too large, as it slows down some compilers.\n  \"\t\tfor ( int i = 0; i < 30; i += 1 ) {\", \"\t\t\tif ( heightFromTexture <= currentLayerHeight ) {\", \"\t\t\t\tbreak;\", \"\t\t\t}\", \"\t\t\tcurrentLayerHeight += layerHeight;\",\n  // Shift texture coordinates along vector V\n  \"\t\t\tcurrentTextureCoords -= dtex;\", \"\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\", \"\t\t}\", \"\t\t#ifdef USE_STEEP_PARALLAX\", \"\t\t\treturn currentTextureCoords;\", \"\t\t#elif defined( USE_RELIEF_PARALLAX )\", \"\t\t\tvec2 deltaTexCoord = dtex / 2.0;\", \"\t\t\tfloat deltaHeight = layerHeight / 2.0;\",\n  // Return to the mid point of previous layer\n  \"\t\t\tcurrentTextureCoords += deltaTexCoord;\", \"\t\t\tcurrentLayerHeight -= deltaHeight;\",\n  // Binary search to increase precision of Steep Parallax Mapping\n  \"\t\t\tconst int numSearches = 5;\", \"\t\t\tfor ( int i = 0; i < numSearches; i += 1 ) {\", \"\t\t\t\tdeltaTexCoord /= 2.0;\", \"\t\t\t\tdeltaHeight /= 2.0;\", \"\t\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n  // Shift along or against vector V\n  \"\t\t\t\tif( heightFromTexture > currentLayerHeight ) {\",\n  // Below the surface\n  \"\t\t\t\t\tcurrentTextureCoords -= deltaTexCoord;\", \"\t\t\t\t\tcurrentLayerHeight += deltaHeight;\", \"\t\t\t\t} else {\",\n  // above the surface\n  \"\t\t\t\t\tcurrentTextureCoords += deltaTexCoord;\", \"\t\t\t\t\tcurrentLayerHeight -= deltaHeight;\", \"\t\t\t\t}\", \"\t\t\t}\", \"\t\t\treturn currentTextureCoords;\", \"\t\t#elif defined( USE_OCLUSION_PARALLAX )\", \"\t\t\tvec2 prevTCoords = currentTextureCoords + dtex;\",\n  // Heights for linear interpolation\n  \"\t\t\tfloat nextH = heightFromTexture - currentLayerHeight;\", \"\t\t\tfloat prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\n  // Proportions for linear interpolation\n  \"\t\t\tfloat weight = nextH / ( nextH - prevH );\",\n  // Interpolation of texture coordinates\n  \"\t\t\treturn prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\", \"\t\t#else\",\n  // NO_PARALLAX\n  \"\t\t\treturn vUv;\", \"\t\t#endif\", \"\t}\", \"#endif\", \"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\", \"\tvec2 texDx = dFdx( vUv );\", \"\tvec2 texDy = dFdy( vUv );\", \"\tvec3 vSigmaX = dFdx( surfPosition );\", \"\tvec3 vSigmaY = dFdy( surfPosition );\", \"\tvec3 vR1 = cross( vSigmaY, surfNormal );\", \"\tvec3 vR2 = cross( surfNormal, vSigmaX );\", \"\tfloat fDet = dot( vSigmaX, vR1 );\", \"\tvec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\", \"\tvec3 vProjVtex;\", \"\tvProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\", \"\tvProjVtex.z = dot( surfNormal, viewPosition );\", \"\treturn parallaxMap( vProjVtex );\", \"}\", \"void main() {\", \"\tvec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\", \"\tgl_FragColor = texture2D( map, mapUv );\", \"}\"].join(\"\\n\")\n};\nexport { ParallaxShader };\n//# sourceMappingURL=ParallaxShader.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}