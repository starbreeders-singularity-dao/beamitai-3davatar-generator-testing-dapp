{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n  return {\n    profile,\n    assetPath\n  };\n}\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };\n//# sourceMappingURL=MotionControllers.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}