{"ast":null,"code":"var _jsxFileName = \"/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTMinter = ({\n  glbUrl,\n  originalNFT\n}) => {\n  _s();\n  const [isMinting, setIsMinting] = useState(false);\n  const mintNFT = async () => {\n    try {\n      setIsMinting(true);\n      console.log('Starting mint process...');\n\n      // Connect to MetaMask\n      const provider = new BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Create contract instance\n      const contract = new Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);\n      console.log('Contract instance created');\n\n      // For testing, let's just mint with dummy data\n      const tx = await contract.mint(await signer.getAddress(), \"test-uri\", (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.tokenId) || \"test-token\", (originalNFT === null || originalNFT === void 0 ? void 0 : originalNFT.chainId) || 1);\n      console.log('Waiting for transaction...');\n      await tx.wait();\n      console.log('Transaction confirmed!');\n      alert('NFT Minted Successfully!');\n    } catch (error) {\n      console.error('Minting error:', error);\n      alert('Failed to mint NFT: ' + error.message);\n    } finally {\n      setIsMinting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: mintNFT,\n    disabled: isMinting,\n    className: \"mint-button\",\n    children: isMinting ? 'Minting...' : 'Mint NFT'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTMinter, \"joId2EiQDCFhrJf1KnPBwxLsB9s=\");\n_c = NFTMinter;\nexport default NFTMinter;\nvar _c;\n$RefreshReg$(_c, \"NFTMinter\");","map":{"version":3,"names":["useState","BrowserProvider","Contract","CONTRACT_ADDRESS","CONTRACT_ABI","jsxDEV","_jsxDEV","NFTMinter","glbUrl","originalNFT","_s","isMinting","setIsMinting","mintNFT","console","log","provider","window","ethereum","signer","getSigner","contract","tx","mint","getAddress","tokenId","chainId","wait","alert","error","message","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/components/NFTMinter.js"],"sourcesContent":["import { useState } from 'react';\nimport { BrowserProvider, Contract } from 'ethers';\nimport { CONTRACT_ADDRESS, CONTRACT_ABI } from '../contracts/BeamitAIGen1';\n\nconst NFTMinter = ({ glbUrl, originalNFT }) => {\n    const [isMinting, setIsMinting] = useState(false);\n    \n    const mintNFT = async () => {\n        try {\n            setIsMinting(true);\n            console.log('Starting mint process...');\n            \n            // Connect to MetaMask\n            const provider = new BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            \n            // Create contract instance\n            const contract = new Contract(\n                CONTRACT_ADDRESS,\n                CONTRACT_ABI,\n                signer\n            );\n            \n            console.log('Contract instance created');\n            \n            // For testing, let's just mint with dummy data\n            const tx = await contract.mint(\n                await signer.getAddress(),\n                \"test-uri\",\n                originalNFT?.tokenId || \"test-token\",\n                originalNFT?.chainId || 1\n            );\n            \n            console.log('Waiting for transaction...');\n            await tx.wait();\n            console.log('Transaction confirmed!');\n            \n            alert('NFT Minted Successfully!');\n            \n        } catch (error) {\n            console.error('Minting error:', error);\n            alert('Failed to mint NFT: ' + error.message);\n        } finally {\n            setIsMinting(false);\n        }\n    };\n    \n    return (\n        <button \n            onClick={mintNFT} \n            disabled={isMinting}\n            className=\"mint-button\"\n        >\n            {isMinting ? 'Minting...' : 'Mint NFT'}\n        </button>\n    );\n};\n\nexport default NFTMinter;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,EAAEC,QAAQ,QAAQ,QAAQ;AAClD,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,SAAS,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMa,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI;MACAD,YAAY,CAAC,IAAI,CAAC;MAClBE,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACA,MAAMC,QAAQ,GAAG,IAAIf,eAAe,CAACgB,MAAM,CAACC,QAAQ,CAAC;MACrD,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,SAAS,CAAC,CAAC;;MAEzC;MACA,MAAMC,QAAQ,GAAG,IAAInB,QAAQ,CACzBC,gBAAgB,EAChBC,YAAY,EACZe,MACJ,CAAC;MAEDL,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;MAExC;MACA,MAAMO,EAAE,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAC1B,MAAMJ,MAAM,CAACK,UAAU,CAAC,CAAC,EACzB,UAAU,EACV,CAAAf,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEgB,OAAO,KAAI,YAAY,EACpC,CAAAhB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEiB,OAAO,KAAI,CAC5B,CAAC;MAEDZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,MAAMO,EAAE,CAACK,IAAI,CAAC,CAAC;MACfb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MAErCa,KAAK,CAAC,0BAA0B,CAAC;IAErC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZf,OAAO,CAACe,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCD,KAAK,CAAC,sBAAsB,GAAGC,KAAK,CAACC,OAAO,CAAC;IACjD,CAAC,SAAS;MACNlB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACIN,OAAA;IACIyB,OAAO,EAAElB,OAAQ;IACjBmB,QAAQ,EAAErB,SAAU;IACpBsB,SAAS,EAAC,aAAa;IAAAC,QAAA,EAEtBvB,SAAS,GAAG,YAAY,GAAG;EAAU;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEjB,CAAC;AAAC5B,EAAA,CApDIH,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAsDf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}