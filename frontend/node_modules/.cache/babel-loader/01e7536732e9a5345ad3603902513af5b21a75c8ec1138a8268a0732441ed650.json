{"ast":null,"code":"export const fetchLocalImages = async () => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const response = await fetch(`${backendUrl}/pfp`); // Fetch from the backend\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Backend data:', data); // Log the data received from backend\n    return data.images.map(img => {\n      const fullUrl = `${backendUrl}${img}`;\n      console.log('Full image URL:', fullUrl); // Log the full image URL\n      return fullUrl;\n    });\n  } catch (error) {\n    console.error('Error fetching local images:', error.message);\n    throw error;\n  }\n};\nexport const generateImages = async pfpFile => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const formData = new FormData();\n    formData.append('pfpImage', pfpFile);\n    const response = await fetch(`${backendUrl}/generate-images`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Error generating images: ${errorData.error}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating images:', error.message);\n    throw error;\n  }\n};\nexport const uploadImageToCloud = async fileName => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const response = await fetch(`${backendUrl}/upload-to-cloud`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fileName\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Error uploading image: ${errorData.error}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error uploading image:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchLocalImages","backendUrl","process","env","REACT_APP_API_URL","response","fetch","ok","Error","status","statusText","data","json","console","log","images","map","img","fullUrl","error","message","generateImages","pfpFile","formData","FormData","append","method","body","errorData","uploadImageToCloud","fileName","headers","JSON","stringify"],"sources":["/Users/thomasheindl/Documents/beamitai01/beamitai/frontend/src/utils/api.js"],"sourcesContent":["export const fetchLocalImages = async () => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const response = await fetch(`${backendUrl}/pfp`); // Fetch from the backend\n    if (!response.ok) {\n      throw new Error(`Error ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('Backend data:', data); // Log the data received from backend\n    return data.images.map((img) => {\n      const fullUrl = `${backendUrl}${img}`;\n      console.log('Full image URL:', fullUrl); // Log the full image URL\n      return fullUrl;\n    });\n  } catch (error) {\n    console.error('Error fetching local images:', error.message);\n    throw error;\n  }\n};\n\nexport const generateImages = async (pfpFile) => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const formData = new FormData();\n    formData.append('pfpImage', pfpFile);\n\n    const response = await fetch(`${backendUrl}/generate-images`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Error generating images: ${errorData.error}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating images:', error.message);\n    throw error;\n  }\n};\n\nexport const uploadImageToCloud = async (fileName) => {\n  const backendUrl = process.env.REACT_APP_API_URL; // Get the backend URL from environment variables\n  try {\n    const response = await fetch(`${backendUrl}/upload-to-cloud`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ fileName }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Error uploading image: ${errorData.error}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error uploading image:', error.message);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}