{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { property } from 'lit/decorators.js';\nimport { ACESFilmicToneMapping, AgXToneMapping, NeutralToneMapping } from 'three';\nimport { $needsRender, $progressTracker, $renderer, $scene, $shouldAttemptPreload } from '../model-viewer-base.js';\nimport { clamp, deserializeUrl } from '../utilities.js';\nexport const BASE_OPACITY = 0.5;\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_SHADOW_SOFTNESS = 1.0;\nconst DEFAULT_EXPOSURE = 1.0;\nexport const $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nexport const $currentBackground = Symbol('currentBackground');\nexport const $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\nexport const EnvironmentMixin = ModelViewerElement => {\n  var _a, _b, _c;\n  class EnvironmentModelViewerElement extends ModelViewerElement {\n    constructor() {\n      super(...arguments);\n      this.environmentImage = null;\n      this.skyboxImage = null;\n      this.shadowIntensity = DEFAULT_SHADOW_INTENSITY;\n      this.shadowSoftness = DEFAULT_SHADOW_SOFTNESS;\n      this.exposure = DEFAULT_EXPOSURE;\n      this.toneMapping = 'auto';\n      this.skyboxHeight = '0';\n      this[_a] = null;\n      this[_b] = null;\n      this[_c] = null;\n    }\n    updated(changedProperties) {\n      super.updated(changedProperties);\n      if (changedProperties.has('shadowIntensity')) {\n        this[$scene].setShadowIntensity(this.shadowIntensity * BASE_OPACITY);\n        this[$needsRender]();\n      }\n      if (changedProperties.has('shadowSoftness')) {\n        this[$scene].setShadowSoftness(this.shadowSoftness);\n        this[$needsRender]();\n      }\n      if (changedProperties.has('exposure')) {\n        this[$scene].exposure = this.exposure;\n        this[$needsRender]();\n      }\n      if (changedProperties.has('toneMapping')) {\n        this[$scene].toneMapping = this.toneMapping === 'aces' ? ACESFilmicToneMapping : this.toneMapping === 'agx' ? AgXToneMapping : NeutralToneMapping;\n        this[$needsRender]();\n      }\n      if ((changedProperties.has('environmentImage') || changedProperties.has('skyboxImage')) && this[$shouldAttemptPreload]()) {\n        this[$updateEnvironment]();\n      }\n      if (changedProperties.has('skyboxHeight')) {\n        this[$scene].setGroundedSkybox();\n        this[$needsRender]();\n      }\n    }\n    hasBakedShadow() {\n      return this[$scene].bakedShadows.size > 0;\n    }\n    async [(_a = $currentEnvironmentMap, _b = $currentBackground, _c = $cancelEnvironmentUpdate, $updateEnvironment)]() {\n      const {\n        skyboxImage,\n        environmentImage\n      } = this;\n      if (this[$cancelEnvironmentUpdate] != null) {\n        this[$cancelEnvironmentUpdate]();\n        this[$cancelEnvironmentUpdate] = null;\n      }\n      const {\n        textureUtils\n      } = this[$renderer];\n      if (textureUtils == null) {\n        return;\n      }\n      const updateEnvProgress = this[$progressTracker].beginActivity('environment-update');\n      try {\n        const {\n          environmentMap,\n          skybox\n        } = await textureUtils.generateEnvironmentMapAndSkybox(deserializeUrl(skyboxImage), environmentImage, progress => updateEnvProgress(clamp(progress, 0, 1)), this.withCredentials);\n        if (this[$currentEnvironmentMap] !== environmentMap) {\n          this[$currentEnvironmentMap] = environmentMap;\n          this.dispatchEvent(new CustomEvent('environment-change'));\n        }\n        if (skybox != null) {\n          // When using the same environment and skybox, use the environment as\n          // it gives HDR filtering.\n          this[$currentBackground] = skybox.name === environmentMap.name ? environmentMap : skybox;\n        } else {\n          this[$currentBackground] = null;\n        }\n        this[$scene].setEnvironmentAndSkybox(this[$currentEnvironmentMap], this[$currentBackground]);\n      } catch (errorOrPromise) {\n        if (errorOrPromise instanceof Error) {\n          this[$scene].setEnvironmentAndSkybox(null, null);\n          throw errorOrPromise;\n        }\n      } finally {\n        updateEnvProgress(1.0);\n      }\n    }\n  }\n  __decorate([property({\n    type: String,\n    attribute: 'environment-image'\n  })], EnvironmentModelViewerElement.prototype, \"environmentImage\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'skybox-image'\n  })], EnvironmentModelViewerElement.prototype, \"skyboxImage\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'shadow-intensity'\n  })], EnvironmentModelViewerElement.prototype, \"shadowIntensity\", void 0);\n  __decorate([property({\n    type: Number,\n    attribute: 'shadow-softness'\n  })], EnvironmentModelViewerElement.prototype, \"shadowSoftness\", void 0);\n  __decorate([property({\n    type: Number\n  })], EnvironmentModelViewerElement.prototype, \"exposure\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'tone-mapping'\n  })], EnvironmentModelViewerElement.prototype, \"toneMapping\", void 0);\n  __decorate([property({\n    type: String,\n    attribute: 'skybox-height'\n  })], EnvironmentModelViewerElement.prototype, \"skyboxHeight\", void 0);\n  return EnvironmentModelViewerElement;\n};\n//# sourceMappingURL=environment.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}