{"ast":null,"code":"class LWO2Parser {\n  constructor(IFFParser) {\n    this.IFF = IFFParser;\n  }\n  parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    const blockID = this.IFF.reader.getIDTag();\n    let length = this.IFF.reader.getUint32();\n    if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n      this.IFF.reader.offset -= 4;\n      length = this.IFF.reader.getUint16();\n    }\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length;\n    switch (blockID) {\n      case \"FORM\":\n        this.IFF.parseForm(length);\n        break;\n      case \"ICON\":\n      case \"VMPA\":\n      case \"BBOX\":\n      case \"NORM\":\n      case \"PRE \":\n      case \"POST\":\n      case \"KEY \":\n      case \"SPAN\":\n      case \"TIME\":\n      case \"CLRS\":\n      case \"CLRA\":\n      case \"FILT\":\n      case \"DITH\":\n      case \"CONT\":\n      case \"BRIT\":\n      case \"SATR\":\n      case \"HUE \":\n      case \"GAMM\":\n      case \"NEGA\":\n      case \"IFLT\":\n      case \"PFLT\":\n      case \"PROJ\":\n      case \"AXIS\":\n      case \"AAST\":\n      case \"PIXB\":\n      case \"AUVO\":\n      case \"STCK\":\n      case \"PROC\":\n      case \"VALU\":\n      case \"FUNC\":\n      case \"PNAM\":\n      case \"INAM\":\n      case \"GRST\":\n      case \"GREN\":\n      case \"GRPT\":\n      case \"FKEY\":\n      case \"IKEY\":\n      case \"CSYS\":\n      case \"OPAQ\":\n      case \"CMAP\":\n      case \"NLOC\":\n      case \"NZOM\":\n      case \"NVER\":\n      case \"NSRV\":\n      case \"NVSK\":\n      case \"NCRD\":\n      case \"WRPW\":\n      case \"WRPH\":\n      case \"NMOD\":\n      case \"NSEL\":\n      case \"NPRW\":\n      case \"NPLA\":\n      case \"NODS\":\n      case \"VERS\":\n      case \"ENUM\":\n      case \"TAG \":\n      case \"OPAC\":\n      case \"CGMD\":\n      case \"CGTY\":\n      case \"CGST\":\n      case \"CGEN\":\n      case \"CGTS\":\n      case \"CGTE\":\n      case \"OSMP\":\n      case \"OMDE\":\n      case \"OUTR\":\n      case \"FLAG\":\n      case \"TRNL\":\n      case \"GLOW\":\n      case \"GVAL\":\n      case \"SHRP\":\n      case \"RFOP\":\n      case \"RSAN\":\n      case \"TROP\":\n      case \"RBLR\":\n      case \"TBLR\":\n      case \"CLRH\":\n      case \"CLRF\":\n      case \"ADTR\":\n      case \"LINE\":\n      case \"ALPH\":\n      case \"VCOL\":\n      case \"ENAB\":\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      case \"SURF\":\n        this.IFF.parseSurfaceLwo2(length);\n        break;\n      case \"CLIP\":\n        this.IFF.parseClipLwo2(length);\n        break;\n      case \"IPIX\":\n      case \"IMIP\":\n      case \"IMOD\":\n      case \"AMOD\":\n      case \"IINV\":\n      case \"INCR\":\n      case \"IAXS\":\n      case \"IFOT\":\n      case \"ITIM\":\n      case \"IWRL\":\n      case \"IUTI\":\n      case \"IINX\":\n      case \"IINY\":\n      case \"IINZ\":\n      case \"IREF\":\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n      case \"OTAG\":\n        this.IFF.parseObjectTag();\n        break;\n      case \"LAYR\":\n        this.IFF.parseLayer(length);\n        break;\n      case \"PNTS\":\n        this.IFF.parsePoints(length);\n        break;\n      case \"VMAP\":\n        this.IFF.parseVertexMapping(length);\n        break;\n      case \"AUVU\":\n      case \"AUVN\":\n        this.IFF.reader.skip(length - 1);\n        this.IFF.reader.getVariableLengthIndex();\n        break;\n      case \"POLS\":\n        this.IFF.parsePolygonList(length);\n        break;\n      case \"TAGS\":\n        this.IFF.parseTagStrings(length);\n        break;\n      case \"PTAG\":\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n      case \"VMAD\":\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      case \"DESC\":\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n      case \"TEXT\":\n      case \"CMNT\":\n      case \"NCOM\":\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      case \"NAME\":\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      case \"WRAP\":\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n      case \"IMAG\":\n        const index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      case \"OREF\":\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n      case \"ROID\":\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      case \"SSHN\":\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n      case \"AOVN\":\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      case \"NSTA\":\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n      case \"NRNM\":\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n      case \"NNME\":\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      case \"INME\":\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n      case \"IINN\":\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n      case \"IINM\":\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n      case \"IONM\":\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n      case \"FNAM\":\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n      case \"CHAN\":\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      case \"SMAN\":\n        const maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      case \"COLR\":\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"LUMI\":\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"SPEC\":\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"DIFF\":\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"REFL\":\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"GLOS\":\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n      case \"TRAN\":\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"BUMP\":\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"SIDE\":\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n      case \"RIMG\":\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case \"RIND\":\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n      case \"TIMG\":\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n      case \"IMAP\":\n        this.IFF.reader.skip(2);\n        break;\n      case \"TMAP\":\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      case \"IUVI\":\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n      case \"IUTL\":\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n      case \"IVTL\":\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      case \"BLOK\":\n        break;\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n    if (blockID != \"FORM\") {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n}\nexport { LWO2Parser };\n//# sourceMappingURL=LWO2Parser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}